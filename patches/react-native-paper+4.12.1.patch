diff --git a/node_modules/react-native-paper/lib/commonjs/components/Button.js b/node_modules/react-native-paper/lib/commonjs/components/Button.js
index b46e456..9af44fd 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/Button.js
+++ b/node_modules/react-native-paper/lib/commonjs/components/Button.js
@@ -65,7 +65,7 @@ function _extends() { _extends = Object.assign || function (target) { for (var i
  * export default MyComponent;
  * ```
  */
-const Button = _ref => {
+const Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {
   var _StyleSheet$flatten;
 
   let {
@@ -80,6 +80,8 @@ const Button = _ref => {
     uppercase = true,
     accessibilityLabel,
     accessibilityHint,
+    onFocus,
+    onBlur,
     onPress,
     onLongPress,
     style,
@@ -97,6 +99,16 @@ const Button = _ref => {
     elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);
   }, [mode, elevation, disabled]);
 
+  const handleFocus = () => {
+    onFocus && onFocus();
+    handlePressIn();
+  };
+
+  const handleBlur = () => {
+    onBlur && onBlur();
+    handlePressOut();
+  };
+
   const handlePressIn = () => {
     if (mode === 'contained') {
       const {
@@ -194,12 +206,19 @@ const Button = _ref => {
       elevation
     }, buttonStyle, style]
   }), /*#__PURE__*/React.createElement(_TouchableRipple.default, {
+    forwardedRef: ref,
     borderless: true,
     delayPressIn: 0,
     onPress: onPress,
     onLongPress: onLongPress,
     onPressIn: handlePressIn,
     onPressOut: handlePressOut,
+    onFocus: handleFocus,
+    onBlur: handleBlur,
+    nextFocusLeft: rest === null || rest === void 0 ? void 0 : rest.nextFocusLeft,
+    nextFocusRight: rest === null || rest === void 0 ? void 0 : rest.nextFocusRight,
+    nextFocusUp: rest === null || rest === void 0 ? void 0 : rest.nextFocusUp,
+    nextFocusDown: rest === null || rest === void 0 ? void 0 : rest.nextFocusDown,
     accessibilityLabel: accessibilityLabel,
     accessibilityHint: accessibilityHint // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
     ,
@@ -213,7 +232,11 @@ const Button = _ref => {
     disabled: disabled,
     rippleColor: rippleColor,
     style: touchableStyle,
-    testID: testID
+    testID: testID,
+    tvParallaxProperties: {
+      enabled: true,
+      pressMagnification: 1.1
+    }
   }, /*#__PURE__*/React.createElement(_reactNative.View, {
     style: [styles.content, contentStyle]
   }, icon && loading !== true ? /*#__PURE__*/React.createElement(_reactNative.View, {
@@ -231,7 +254,7 @@ const Button = _ref => {
     numberOfLines: 1,
     style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]
   }, children))));
-};
+});
 
 const styles = _reactNative.StyleSheet.create({
   button: {
diff --git a/node_modules/react-native-paper/lib/commonjs/components/Button.js.map b/node_modules/react-native-paper/lib/commonjs/components/Button.js.map
index 5cfc62e..574c102 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/Button.js.map
+++ b/node_modules/react-native-paper/lib/commonjs/components/Button.js.map
@@ -1 +1 @@
-{"version":3,"sources":["Button.tsx"],"names":["Button","disabled","compact","mode","dark","loading","icon","color","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","current","elevation","React","useRef","Animated","Value","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","white","black","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","iconStyle","flexDirection","styles","iconReverse","button","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]}
\ No newline at end of file
+{"version":3,"sources":["Button.tsx"],"names":["Button","React","forwardRef","ref","disabled","compact","mode","dark","loading","icon","color","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onFocus","onBlur","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","current","elevation","useRef","Animated","Value","useEffect","setValue","handleFocus","handlePressIn","handleBlur","handlePressOut","scale","animation","timing","toValue","duration","useNativeDriver","start","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","white","black","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","iconStyle","flexDirection","styles","iconReverse","button","nextFocusLeft","nextFocusRight","nextFocusUp","nextFocusDown","enabled","pressMagnification","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on focus.\n   */\n  onFocus?: any;\n  /**\n   * Function to execute on blur.\n   */\n  onBlur?: any;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  nextFocusLeft?: any;\n  nextFocusRight?: any;\n  nextFocusUp?: any;\n  nextFocusDown?: any;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = React.forwardRef(({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onFocus,\n  onBlur,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props, ref) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handleFocus = () => {\n    onFocus && onFocus();\n    handlePressIn();\n  };\n\n  const handleBlur = () => {\n    onBlur && onBlur();\n    handlePressOut();\n  };\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        forwardedRef={ref}\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        nextFocusLeft={rest?.nextFocusLeft}\n        nextFocusRight={rest?.nextFocusRight}\n        nextFocusUp={rest?.nextFocusUp}\n        nextFocusDown={rest?.nextFocusDown}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n        tvParallaxProperties={{enabled: true, pressMagnification: 1.1}}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n});\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js
index f5c4bfc..6815e02 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js
+++ b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js
@@ -62,6 +62,7 @@ const TouchableRipple = _ref => {
     underlayColor: _underlayColor,
     children,
     theme,
+    forwardedRef,
     ...rest
   } = _ref;
 
@@ -187,7 +188,9 @@ const TouchableRipple = _ref => {
   };
 
   const disabled = disabledProp || !rest.onPress;
-  return /*#__PURE__*/React.createElement(_reactNative.TouchableWithoutFeedback, _extends({}, rest, {
+  return /*#__PURE__*/React.createElement(_reactNative.TouchableWithoutFeedback, _extends({
+    ref: forwardedRef
+  }, rest, {
     onPressIn: handlePressIn,
     onPressOut: handlePressOut,
     disabled: disabled
diff --git a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js.map b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js.map
index 4a220ee..832688b 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js.map
+++ b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js.map
@@ -1 +1 @@
-{"version":3,"sources":["TouchableRipple.tsx"],"names":["TouchableRipple","style","background","_background","borderless","disabled","disabledProp","rippleColor","underlayColor","_underlayColor","children","theme","rest","handlePressIn","e","centered","onPressIn","dark","colors","calculatedRippleColor","text","alpha","rgb","string","button","currentTarget","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","changedTouches","touches","nativeEvent","touch","width","height","locationX","pageX","locationY","pageY","size","Math","min","max","container","document","createElement","setAttribute","Object","assign","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","handlePressOut","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","onPress","styles","touchable","React","Children","only","supported","StyleSheet","create","Platform","OS","cursor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  Platform,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/touchablenativefeedback#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props\n */\nconst TouchableRipple = ({\n  style,\n  background: _background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor: _underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const handlePressIn = (e: any) => {\n    const { centered, onPressIn } = rest;\n\n    onPressIn?.(e);\n\n    const { dark, colors } = theme;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    const { changedTouches, touches } = e.nativeEvent;\n    const touch = touches?.[0] ?? changedTouches?.[0];\n\n    // If centered or it was pressed using keyboard - enter or space\n    if (centered || !touch) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      touchX = touch.locationX ?? e.pageX;\n      touchY = touch.locationY ?? e.pageY;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  const handlePressOut = (e: any) => {\n    rest.onPressOut?.(e);\n\n    const containers = e.currentTarget.querySelectorAll(\n      '[data-paper-ripple]'\n    ) as HTMLElement[];\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach((container) => {\n          const ripple = container.firstChild as HTMLSpanElement;\n\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  const disabled = disabledProp || !rest.onPress;\n\n  return (\n    <TouchableWithoutFeedback\n      {...rest}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      disabled={disabled}\n    >\n      <View style={[styles.touchable, borderless && styles.borderless, style]}>\n        {React.Children.only(children)}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\n/**\n * Whether ripple effect is supported.\n */\nTouchableRipple.supported = true;\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && { cursor: 'pointer' }),\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
+{"version":3,"sources":["TouchableRipple.tsx"],"names":["TouchableRipple","style","background","_background","borderless","disabled","disabledProp","rippleColor","underlayColor","_underlayColor","children","theme","forwardedRef","rest","handlePressIn","e","centered","onPressIn","dark","colors","calculatedRippleColor","text","alpha","rgb","string","button","currentTarget","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","changedTouches","touches","nativeEvent","touch","width","height","locationX","pageX","locationY","pageY","size","Math","min","max","container","document","createElement","setAttribute","Object","assign","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","handlePressOut","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","onPress","styles","touchable","React","Children","only","supported","StyleSheet","create","Platform","OS","cursor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  Platform,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/touchablenativefeedback#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  forwardedRef?: any;\n  nextFocusLeft?: any;\n  nextFocusRight?: any;\n  nextFocusUp?: any;\n  nextFocusDown?: any;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props\n */\nconst TouchableRipple = ({\n  style,\n  background: _background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor: _underlayColor,\n  children,\n  theme,\n  forwardedRef,\n  ...rest\n}: Props) => {\n  const handlePressIn = (e: any) => {\n    const { centered, onPressIn } = rest;\n\n    onPressIn?.(e);\n\n    const { dark, colors } = theme;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    const { changedTouches, touches } = e.nativeEvent;\n    const touch = touches?.[0] ?? changedTouches?.[0];\n\n    // If centered or it was pressed using keyboard - enter or space\n    if (centered || !touch) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      touchX = touch.locationX ?? e.pageX;\n      touchY = touch.locationY ?? e.pageY;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  const handlePressOut = (e: any) => {\n    rest.onPressOut?.(e);\n\n    const containers = e.currentTarget.querySelectorAll(\n      '[data-paper-ripple]'\n    ) as HTMLElement[];\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach((container) => {\n          const ripple = container.firstChild as HTMLSpanElement;\n\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  const disabled = disabledProp || !rest.onPress;\n\n  return (\n    <TouchableWithoutFeedback\n      ref={forwardedRef}\n      {...rest}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      disabled={disabled}\n    >\n      <View style={[styles.touchable, borderless && styles.borderless, style]}>\n        {React.Children.only(children)}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\n/**\n * Whether ripple effect is supported.\n */\nTouchableRipple.supported = true;\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && { cursor: 'pointer' }),\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js
index 876263e..7efcec3 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js
+++ b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js
@@ -34,6 +34,7 @@ const TouchableRipple = _ref => {
     underlayColor,
     children,
     theme,
+    forwardedRef,
     ...rest
   } = _ref;
   const {
@@ -48,6 +49,7 @@ const TouchableRipple = _ref => {
 
   if (TouchableRipple.supported) {
     return /*#__PURE__*/React.createElement(_reactNative.TouchableNativeFeedback, _extends({}, rest, {
+      ref: forwardedRef,
       disabled: disabled,
       useForeground: useForeground,
       background: background != null ? background : _reactNative.TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)
@@ -57,6 +59,7 @@ const TouchableRipple = _ref => {
   }
 
   return /*#__PURE__*/React.createElement(_reactNative.TouchableHighlight, _extends({}, rest, {
+    ref: forwardedRef,
     disabled: disabled,
     style: [borderless && styles.overflowHidden, style],
     underlayColor: underlayColor != null ? underlayColor : (0, _color.default)(calculatedRippleColor).fade(0.5).rgb().string()
diff --git a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js.map b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js.map
index 085dae6..de21e22 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js.map
+++ b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js.map
@@ -1 +1 @@
-{"version":3,"sources":["TouchableRipple.native.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","Platform","OS","Version","supported","TouchableNativeFeedback","Ripple","styles","overflowHidden","React","Children","only","fade","StyleSheet","create","overflow"],"mappings":";;;;;;;AAAA;;AACA;;AAWA;;AACA;;;;;;;;;;AAEA,MAAMA,wBAAwB,GAAG,EAAjC;AACA,MAAMC,mBAAmB,GAAG,EAA5B;;AAcA,MAAMC,eAAe,GAAG,QAUX;AAAA,MAVY;AACvBC,IAAAA,KADuB;AAEvBC,IAAAA,UAFuB;AAGvBC,IAAAA,UAAU,GAAG,KAHU;AAIvBC,IAAAA,QAAQ,EAAEC,YAJa;AAKvBC,IAAAA,WALuB;AAMvBC,IAAAA,aANuB;AAOvBC,IAAAA,QAPuB;AAQvBC,IAAAA,KARuB;AASvB,OAAGC;AAToB,GAUZ;AACX,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBH,KAAzB;AACA,QAAML,QAAQ,GAAGC,YAAY,IAAI,CAACK,IAAI,CAACG,OAAvC;AACA,QAAMC,qBAAqB,GACzBR,WAAW,IACX,oBAAMM,MAAM,CAACG,IAAb,EACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF,CAHW,CAUX;AACA;;AACA,QAAMC,aAAa,GACjBC,sBAASC,EAAT,KAAgB,SAAhB,IACAD,sBAASE,OAAT,IAAoBvB,mBADpB,IAEAI,UAHF;;AAKA,MAAIH,eAAe,CAACuB,SAApB,EAA+B;AAC7B,wBACE,oBAAC,oCAAD,eACMb,IADN;AAEE,MAAA,QAAQ,EAAEN,QAFZ;AAGE,MAAA,aAAa,EAAEe,aAHjB;AAIE,MAAA,UAAU,EACRjB,UAAU,IAAI,IAAd,GACIA,UADJ,GAEIsB,qCAAwBC,MAAxB,CAA+BX,qBAA/B,EAAsDX,UAAtD;AAPR,qBAUE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE,CAACA,UAAU,IAAIuB,MAAM,CAACC,cAAtB,EAAsC1B,KAAtC;AAAb,OACG2B,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBtB,QAApB,CADH,CAVF,CADF;AAgBD;;AAED,sBACE,oBAAC,+BAAD,eACME,IADN;AAEE,IAAA,QAAQ,EAAEN,QAFZ;AAGE,IAAA,KAAK,EAAE,CAACD,UAAU,IAAIuB,MAAM,CAACC,cAAtB,EAAsC1B,KAAtC,CAHT;AAIE,IAAA,aAAa,EACXM,aAAa,IAAI,IAAjB,GACIA,aADJ,GAEI,oBAAMO,qBAAN,EAA6BiB,IAA7B,CAAkC,GAAlC,EAAuCd,GAAvC,GAA6CC,MAA7C;AAPR,MAUGU,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBtB,QAApB,CAVH,CADF;AAcD,CA5DD;;AA8DAR,eAAe,CAACuB,SAAhB,GACEH,sBAASC,EAAT,KAAgB,SAAhB,IAA6BD,sBAASE,OAAT,IAAoBxB,wBADnD;;AAGA,MAAM4B,MAAM,GAAGM,wBAAWC,MAAX,CAAkB;AAC/BN,EAAAA,cAAc,EAAE;AACdO,IAAAA,QAAQ,EAAE;AADI;AADe,CAAlB,CAAf;;eAMe,wBAAUlC,eAAV,C","sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst TouchableRipple = ({\n  style,\n  background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const { dark, colors } = theme;\n  const disabled = disabledProp || !rest.onPress;\n  const calculatedRippleColor =\n    rippleColor ||\n    color(colors.text)\n      .alpha(dark ? 0.32 : 0.2)\n      .rgb()\n      .string();\n\n  // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n  // https://github.com/facebook/react-native/issues/6480\n  const useForeground =\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_PIE &&\n    borderless;\n\n  if (TouchableRipple.supported) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        disabled={disabled}\n        useForeground={useForeground}\n        background={\n          background != null\n            ? background\n            : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)\n        }\n      >\n        <View style={[borderless && styles.overflowHidden, style]}>\n          {React.Children.only(children)}\n        </View>\n      </TouchableNativeFeedback>\n    );\n  }\n\n  return (\n    <TouchableHighlight\n      {...rest}\n      disabled={disabled}\n      style={[borderless && styles.overflowHidden, style]}\n      underlayColor={\n        underlayColor != null\n          ? underlayColor\n          : color(calculatedRippleColor).fade(0.5).rgb().string()\n      }\n    >\n      {React.Children.only(children)}\n    </TouchableHighlight>\n  );\n};\n\nTouchableRipple.supported =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\nconst styles = StyleSheet.create({\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
+{"version":3,"sources":["TouchableRipple.native.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","theme","forwardedRef","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","Platform","OS","Version","supported","TouchableNativeFeedback","Ripple","styles","overflowHidden","React","Children","only","fade","StyleSheet","create","overflow"],"mappings":";;;;;;;AAAA;;AACA;;AAWA;;AACA;;;;;;;;;;AAEA,MAAMA,wBAAwB,GAAG,EAAjC;AACA,MAAMC,mBAAmB,GAAG,EAA5B;;AAmBA,MAAMC,eAAe,GAAG,QAWX;AAAA,MAXY;AACvBC,IAAAA,KADuB;AAEvBC,IAAAA,UAFuB;AAGvBC,IAAAA,UAAU,GAAG,KAHU;AAIvBC,IAAAA,QAAQ,EAAEC,YAJa;AAKvBC,IAAAA,WALuB;AAMvBC,IAAAA,aANuB;AAOvBC,IAAAA,QAPuB;AAQvBC,IAAAA,KARuB;AASvBC,IAAAA,YATuB;AAUvB,OAAGC;AAVoB,GAWZ;AACX,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBJ,KAAzB;AACA,QAAML,QAAQ,GAAGC,YAAY,IAAI,CAACM,IAAI,CAACG,OAAvC;AACA,QAAMC,qBAAqB,GACzBT,WAAW,IACX,oBAAMO,MAAM,CAACG,IAAb,EACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF,CAHW,CAUX;AACA;;AACA,QAAMC,aAAa,GACjBC,sBAASC,EAAT,KAAgB,SAAhB,IACAD,sBAASE,OAAT,IAAoBxB,mBADpB,IAEAI,UAHF;;AAKA,MAAIH,eAAe,CAACwB,SAApB,EAA+B;AAC7B,wBACE,oBAAC,oCAAD,eACMb,IADN;AAEE,MAAA,GAAG,EAAED,YAFP;AAGE,MAAA,QAAQ,EAAEN,QAHZ;AAIE,MAAA,aAAa,EAAEgB,aAJjB;AAKE,MAAA,UAAU,EACRlB,UAAU,IAAI,IAAd,GACIA,UADJ,GAEIuB,qCAAwBC,MAAxB,CAA+BX,qBAA/B,EAAsDZ,UAAtD;AARR,qBAWE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE,CAACA,UAAU,IAAIwB,MAAM,CAACC,cAAtB,EAAsC3B,KAAtC;AAAb,OACG4B,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBvB,QAApB,CADH,CAXF,CADF;AAiBD;;AAED,sBACE,oBAAC,+BAAD,eACMG,IADN;AAEE,IAAA,GAAG,EAAED,YAFP;AAGE,IAAA,QAAQ,EAAEN,QAHZ;AAIE,IAAA,KAAK,EAAE,CAACD,UAAU,IAAIwB,MAAM,CAACC,cAAtB,EAAsC3B,KAAtC,CAJT;AAKE,IAAA,aAAa,EACXM,aAAa,IAAI,IAAjB,GACIA,aADJ,GAEI,oBAAMQ,qBAAN,EAA6BiB,IAA7B,CAAkC,GAAlC,EAAuCd,GAAvC,GAA6CC,MAA7C;AARR,MAWGU,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBvB,QAApB,CAXH,CADF;AAeD,CA/DD;;AAiEAR,eAAe,CAACwB,SAAhB,GACEH,sBAASC,EAAT,KAAgB,SAAhB,IAA6BD,sBAASE,OAAT,IAAoBzB,wBADnD;;AAGA,MAAM6B,MAAM,GAAGM,wBAAWC,MAAX,CAAkB;AAC/BN,EAAAA,cAAc,EAAE;AACdO,IAAAA,QAAQ,EAAE;AADI;AADe,CAAlB,CAAf;;eAMe,wBAAUnC,eAAV,C","sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: ReactNativePaper.Theme;\n  forwardedRef?: any;\n  nextFocusLeft?: any;\n  nextFocusRight?: any;\n  nextFocusUp?: any;\n  nextFocusDown?: any;\n};\n\nconst TouchableRipple = ({\n  style,\n  background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor,\n  children,\n  theme,\n  forwardedRef,\n  ...rest\n}: Props) => {\n  const { dark, colors } = theme;\n  const disabled = disabledProp || !rest.onPress;\n  const calculatedRippleColor =\n    rippleColor ||\n    color(colors.text)\n      .alpha(dark ? 0.32 : 0.2)\n      .rgb()\n      .string();\n\n  // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n  // https://github.com/facebook/react-native/issues/6480\n  const useForeground =\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_PIE &&\n    borderless;\n\n  if (TouchableRipple.supported) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        ref={forwardedRef}\n        disabled={disabled}\n        useForeground={useForeground}\n        background={\n          background != null\n            ? background\n            : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)\n        }\n      >\n        <View style={[borderless && styles.overflowHidden, style]}>\n          {React.Children.only(children)}\n        </View>\n      </TouchableNativeFeedback>\n    );\n  }\n\n  return (\n    <TouchableHighlight\n      {...rest}\n      ref={forwardedRef}\n      disabled={disabled}\n      style={[borderless && styles.overflowHidden, style]}\n      underlayColor={\n        underlayColor != null\n          ? underlayColor\n          : color(calculatedRippleColor).fade(0.5).rgb().string()\n      }\n    >\n      {React.Children.only(children)}\n    </TouchableHighlight>\n  );\n};\n\nTouchableRipple.supported =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\nconst styles = StyleSheet.create({\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/module/components/Button.js b/node_modules/react-native-paper/lib/module/components/Button.js
index 7f27d48..25ce039 100644
--- a/node_modules/react-native-paper/lib/module/components/Button.js
+++ b/node_modules/react-native-paper/lib/module/components/Button.js
@@ -43,7 +43,7 @@ import { withTheme } from '../core/theming';
  * export default MyComponent;
  * ```
  */
-const Button = _ref => {
+const Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {
   var _StyleSheet$flatten;
 
   let {
@@ -58,6 +58,8 @@ const Button = _ref => {
     uppercase = true,
     accessibilityLabel,
     accessibilityHint,
+    onFocus,
+    onBlur,
     onPress,
     onLongPress,
     style,
@@ -75,6 +77,16 @@ const Button = _ref => {
     elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);
   }, [mode, elevation, disabled]);
 
+  const handleFocus = () => {
+    onFocus && onFocus();
+    handlePressIn();
+  };
+
+  const handleBlur = () => {
+    onBlur && onBlur();
+    handlePressOut();
+  };
+
   const handlePressIn = () => {
     if (mode === 'contained') {
       const {
@@ -170,12 +182,19 @@ const Button = _ref => {
       elevation
     }, buttonStyle, style]
   }), /*#__PURE__*/React.createElement(TouchableRipple, {
+    forwardedRef: ref,
     borderless: true,
     delayPressIn: 0,
     onPress: onPress,
     onLongPress: onLongPress,
     onPressIn: handlePressIn,
     onPressOut: handlePressOut,
+    onFocus: handleFocus,
+    onBlur: handleBlur,
+    nextFocusLeft: rest === null || rest === void 0 ? void 0 : rest.nextFocusLeft,
+    nextFocusRight: rest === null || rest === void 0 ? void 0 : rest.nextFocusRight,
+    nextFocusUp: rest === null || rest === void 0 ? void 0 : rest.nextFocusUp,
+    nextFocusDown: rest === null || rest === void 0 ? void 0 : rest.nextFocusDown,
     accessibilityLabel: accessibilityLabel,
     accessibilityHint: accessibilityHint // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
     ,
@@ -189,7 +208,11 @@ const Button = _ref => {
     disabled: disabled,
     rippleColor: rippleColor,
     style: touchableStyle,
-    testID: testID
+    testID: testID,
+    tvParallaxProperties: {
+      enabled: true,
+      pressMagnification: 1.1
+    }
   }, /*#__PURE__*/React.createElement(View, {
     style: [styles.content, contentStyle]
   }, icon && loading !== true ? /*#__PURE__*/React.createElement(View, {
@@ -207,8 +230,7 @@ const Button = _ref => {
     numberOfLines: 1,
     style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]
   }, children))));
-};
-
+});
 const styles = StyleSheet.create({
   button: {
     minWidth: 64,
diff --git a/node_modules/react-native-paper/lib/module/components/Button.js.map b/node_modules/react-native-paper/lib/module/components/Button.js.map
index a80b9ee..794f610 100644
--- a/node_modules/react-native-paper/lib/module/components/Button.js.map
+++ b/node_modules/react-native-paper/lib/module/components/Button.js.map
@@ -1 +1 @@
-{"version":3,"sources":["Button.tsx"],"names":["React","Animated","View","StyleSheet","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","disabled","compact","mode","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","current","elevation","useRef","Value","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","iconStyle","flexDirection","styles","iconReverse","button","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]}
\ No newline at end of file
+{"version":3,"sources":["Button.tsx"],"names":["React","Animated","View","StyleSheet","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","forwardRef","ref","disabled","compact","mode","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onFocus","onBlur","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","current","elevation","useRef","Value","useEffect","setValue","handleFocus","handlePressIn","handleBlur","handlePressOut","scale","animation","timing","toValue","duration","useNativeDriver","start","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","iconStyle","flexDirection","styles","iconReverse","button","nextFocusLeft","nextFocusRight","nextFocusUp","nextFocusDown","enabled","pressMagnification","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on focus.\n   */\n  onFocus?: any;\n  /**\n   * Function to execute on blur.\n   */\n  onBlur?: any;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  nextFocusLeft?: any;\n  nextFocusRight?: any;\n  nextFocusUp?: any;\n  nextFocusDown?: any;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = React.forwardRef(({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onFocus,\n  onBlur,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props, ref) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handleFocus = () => {\n    onFocus && onFocus();\n    handlePressIn();\n  };\n\n  const handleBlur = () => {\n    onBlur && onBlur();\n    handlePressOut();\n  };\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        forwardedRef={ref}\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n        nextFocusLeft={rest?.nextFocusLeft}\n        nextFocusRight={rest?.nextFocusRight}\n        nextFocusUp={rest?.nextFocusUp}\n        nextFocusDown={rest?.nextFocusDown}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n        tvParallaxProperties={{enabled: true, pressMagnification: 1.1}}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n});\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js
index 6c5f8bb..ff8585a 100644
--- a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js
+++ b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js
@@ -46,6 +46,7 @@ const TouchableRipple = _ref => {
     underlayColor: _underlayColor,
     children,
     theme,
+    forwardedRef,
     ...rest
   } = _ref;
 
@@ -171,7 +172,9 @@ const TouchableRipple = _ref => {
   };
 
   const disabled = disabledProp || !rest.onPress;
-  return /*#__PURE__*/React.createElement(TouchableWithoutFeedback, _extends({}, rest, {
+  return /*#__PURE__*/React.createElement(TouchableWithoutFeedback, _extends({
+    ref: forwardedRef
+  }, rest, {
     onPressIn: handlePressIn,
     onPressOut: handlePressOut,
     disabled: disabled
diff --git a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js.map b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js.map
index 95adc5f..b723886 100644
--- a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js.map
+++ b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js.map
@@ -1 +1 @@
-{"version":3,"sources":["TouchableRipple.tsx"],"names":["React","TouchableWithoutFeedback","View","StyleSheet","Platform","color","withTheme","TouchableRipple","style","background","_background","borderless","disabled","disabledProp","rippleColor","underlayColor","_underlayColor","children","theme","rest","handlePressIn","e","centered","onPressIn","dark","colors","calculatedRippleColor","text","alpha","rgb","string","button","currentTarget","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","changedTouches","touches","nativeEvent","touch","width","height","locationX","pageX","locationY","pageY","size","Math","min","max","container","document","createElement","setAttribute","Object","assign","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","handlePressOut","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","onPress","styles","touchable","Children","only","supported","create","OS","cursor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  Platform,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/touchablenativefeedback#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props\n */\nconst TouchableRipple = ({\n  style,\n  background: _background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor: _underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const handlePressIn = (e: any) => {\n    const { centered, onPressIn } = rest;\n\n    onPressIn?.(e);\n\n    const { dark, colors } = theme;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    const { changedTouches, touches } = e.nativeEvent;\n    const touch = touches?.[0] ?? changedTouches?.[0];\n\n    // If centered or it was pressed using keyboard - enter or space\n    if (centered || !touch) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      touchX = touch.locationX ?? e.pageX;\n      touchY = touch.locationY ?? e.pageY;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  const handlePressOut = (e: any) => {\n    rest.onPressOut?.(e);\n\n    const containers = e.currentTarget.querySelectorAll(\n      '[data-paper-ripple]'\n    ) as HTMLElement[];\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach((container) => {\n          const ripple = container.firstChild as HTMLSpanElement;\n\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  const disabled = disabledProp || !rest.onPress;\n\n  return (\n    <TouchableWithoutFeedback\n      {...rest}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      disabled={disabled}\n    >\n      <View style={[styles.touchable, borderless && styles.borderless, style]}>\n        {React.Children.only(children)}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\n/**\n * Whether ripple effect is supported.\n */\nTouchableRipple.supported = true;\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && { cursor: 'pointer' }),\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
+{"version":3,"sources":["TouchableRipple.tsx"],"names":["React","TouchableWithoutFeedback","View","StyleSheet","Platform","color","withTheme","TouchableRipple","style","background","_background","borderless","disabled","disabledProp","rippleColor","underlayColor","_underlayColor","children","theme","forwardedRef","rest","handlePressIn","e","centered","onPressIn","dark","colors","calculatedRippleColor","text","alpha","rgb","string","button","currentTarget","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","changedTouches","touches","nativeEvent","touch","width","height","locationX","pageX","locationY","pageY","size","Math","min","max","container","document","createElement","setAttribute","Object","assign","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","handlePressOut","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","onPress","styles","touchable","Children","only","supported","create","OS","cursor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  Platform,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/touchablenativefeedback#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  forwardedRef?: any;\n  nextFocusLeft?: any;\n  nextFocusRight?: any;\n  nextFocusUp?: any;\n  nextFocusDown?: any;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props\n */\nconst TouchableRipple = ({\n  style,\n  background: _background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor: _underlayColor,\n  children,\n  theme,\n  forwardedRef,\n  ...rest\n}: Props) => {\n  const handlePressIn = (e: any) => {\n    const { centered, onPressIn } = rest;\n\n    onPressIn?.(e);\n\n    const { dark, colors } = theme;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    const { changedTouches, touches } = e.nativeEvent;\n    const touch = touches?.[0] ?? changedTouches?.[0];\n\n    // If centered or it was pressed using keyboard - enter or space\n    if (centered || !touch) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      touchX = touch.locationX ?? e.pageX;\n      touchY = touch.locationY ?? e.pageY;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  const handlePressOut = (e: any) => {\n    rest.onPressOut?.(e);\n\n    const containers = e.currentTarget.querySelectorAll(\n      '[data-paper-ripple]'\n    ) as HTMLElement[];\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach((container) => {\n          const ripple = container.firstChild as HTMLSpanElement;\n\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  const disabled = disabledProp || !rest.onPress;\n\n  return (\n    <TouchableWithoutFeedback\n      ref={forwardedRef}\n      {...rest}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      disabled={disabled}\n    >\n      <View style={[styles.touchable, borderless && styles.borderless, style]}>\n        {React.Children.only(children)}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\n/**\n * Whether ripple effect is supported.\n */\nTouchableRipple.supported = true;\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && { cursor: 'pointer' }),\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js
index 8fb6143..46a3d2a 100644
--- a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js
+++ b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js
@@ -17,6 +17,7 @@ const TouchableRipple = _ref => {
     underlayColor,
     children,
     theme,
+    forwardedRef,
     ...rest
   } = _ref;
   const {
@@ -31,6 +32,7 @@ const TouchableRipple = _ref => {
 
   if (TouchableRipple.supported) {
     return /*#__PURE__*/React.createElement(TouchableNativeFeedback, _extends({}, rest, {
+      ref: forwardedRef,
       disabled: disabled,
       useForeground: useForeground,
       background: background != null ? background : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)
@@ -40,6 +42,7 @@ const TouchableRipple = _ref => {
   }
 
   return /*#__PURE__*/React.createElement(TouchableHighlight, _extends({}, rest, {
+    ref: forwardedRef,
     disabled: disabled,
     style: [borderless && styles.overflowHidden, style],
     underlayColor: underlayColor != null ? underlayColor : color(calculatedRippleColor).fade(0.5).rgb().string()
diff --git a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js.map b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js.map
index 2ea3c7f..447c40a 100644
--- a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js.map
+++ b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js.map
@@ -1 +1 @@
-{"version":3,"sources":["TouchableRipple.native.tsx"],"names":["React","Platform","TouchableHighlight","TouchableNativeFeedback","View","StyleSheet","color","withTheme","ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","OS","Version","supported","Ripple","styles","overflowHidden","Children","only","fade","create","overflow"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAGEC,QAHF,EAIEC,kBAJF,EAKEC,uBALF,EAOEC,IAPF,EASEC,UATF,QAUO,cAVP;AAWA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,MAAMC,wBAAwB,GAAG,EAAjC;AACA,MAAMC,mBAAmB,GAAG,EAA5B;;AAcA,MAAMC,eAAe,GAAG,QAUX;AAAA,MAVY;AACvBC,IAAAA,KADuB;AAEvBC,IAAAA,UAFuB;AAGvBC,IAAAA,UAAU,GAAG,KAHU;AAIvBC,IAAAA,QAAQ,EAAEC,YAJa;AAKvBC,IAAAA,WALuB;AAMvBC,IAAAA,aANuB;AAOvBC,IAAAA,QAPuB;AAQvBC,IAAAA,KARuB;AASvB,OAAGC;AAToB,GAUZ;AACX,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBH,KAAzB;AACA,QAAML,QAAQ,GAAGC,YAAY,IAAI,CAACK,IAAI,CAACG,OAAvC;AACA,QAAMC,qBAAqB,GACzBR,WAAW,IACXV,KAAK,CAACgB,MAAM,CAACG,IAAR,CAAL,CACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF,CAHW,CAUX;AACA;;AACA,QAAMC,aAAa,GACjB5B,QAAQ,CAAC6B,EAAT,KAAgB,SAAhB,IACA7B,QAAQ,CAAC8B,OAAT,IAAoBtB,mBADpB,IAEAI,UAHF;;AAKA,MAAIH,eAAe,CAACsB,SAApB,EAA+B;AAC7B,wBACE,oBAAC,uBAAD,eACMZ,IADN;AAEE,MAAA,QAAQ,EAAEN,QAFZ;AAGE,MAAA,aAAa,EAAEe,aAHjB;AAIE,MAAA,UAAU,EACRjB,UAAU,IAAI,IAAd,GACIA,UADJ,GAEIT,uBAAuB,CAAC8B,MAAxB,CAA+BT,qBAA/B,EAAsDX,UAAtD;AAPR,qBAUE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAACA,UAAU,IAAIqB,MAAM,CAACC,cAAtB,EAAsCxB,KAAtC;AAAb,OACGX,KAAK,CAACoC,QAAN,CAAeC,IAAf,CAAoBnB,QAApB,CADH,CAVF,CADF;AAgBD;;AAED,sBACE,oBAAC,kBAAD,eACME,IADN;AAEE,IAAA,QAAQ,EAAEN,QAFZ;AAGE,IAAA,KAAK,EAAE,CAACD,UAAU,IAAIqB,MAAM,CAACC,cAAtB,EAAsCxB,KAAtC,CAHT;AAIE,IAAA,aAAa,EACXM,aAAa,IAAI,IAAjB,GACIA,aADJ,GAEIX,KAAK,CAACkB,qBAAD,CAAL,CAA6Bc,IAA7B,CAAkC,GAAlC,EAAuCX,GAAvC,GAA6CC,MAA7C;AAPR,MAUG5B,KAAK,CAACoC,QAAN,CAAeC,IAAf,CAAoBnB,QAApB,CAVH,CADF;AAcD,CA5DD;;AA8DAR,eAAe,CAACsB,SAAhB,GACE/B,QAAQ,CAAC6B,EAAT,KAAgB,SAAhB,IAA6B7B,QAAQ,CAAC8B,OAAT,IAAoBvB,wBADnD;AAGA,MAAM0B,MAAM,GAAG7B,UAAU,CAACkC,MAAX,CAAkB;AAC/BJ,EAAAA,cAAc,EAAE;AACdK,IAAAA,QAAQ,EAAE;AADI;AADe,CAAlB,CAAf;AAMA,eAAejC,SAAS,CAACG,eAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst TouchableRipple = ({\n  style,\n  background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const { dark, colors } = theme;\n  const disabled = disabledProp || !rest.onPress;\n  const calculatedRippleColor =\n    rippleColor ||\n    color(colors.text)\n      .alpha(dark ? 0.32 : 0.2)\n      .rgb()\n      .string();\n\n  // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n  // https://github.com/facebook/react-native/issues/6480\n  const useForeground =\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_PIE &&\n    borderless;\n\n  if (TouchableRipple.supported) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        disabled={disabled}\n        useForeground={useForeground}\n        background={\n          background != null\n            ? background\n            : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)\n        }\n      >\n        <View style={[borderless && styles.overflowHidden, style]}>\n          {React.Children.only(children)}\n        </View>\n      </TouchableNativeFeedback>\n    );\n  }\n\n  return (\n    <TouchableHighlight\n      {...rest}\n      disabled={disabled}\n      style={[borderless && styles.overflowHidden, style]}\n      underlayColor={\n        underlayColor != null\n          ? underlayColor\n          : color(calculatedRippleColor).fade(0.5).rgb().string()\n      }\n    >\n      {React.Children.only(children)}\n    </TouchableHighlight>\n  );\n};\n\nTouchableRipple.supported =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\nconst styles = StyleSheet.create({\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
+{"version":3,"sources":["TouchableRipple.native.tsx"],"names":["React","Platform","TouchableHighlight","TouchableNativeFeedback","View","StyleSheet","color","withTheme","ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","theme","forwardedRef","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","OS","Version","supported","Ripple","styles","overflowHidden","Children","only","fade","create","overflow"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAGEC,QAHF,EAIEC,kBAJF,EAKEC,uBALF,EAOEC,IAPF,EASEC,UATF,QAUO,cAVP;AAWA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,MAAMC,wBAAwB,GAAG,EAAjC;AACA,MAAMC,mBAAmB,GAAG,EAA5B;;AAmBA,MAAMC,eAAe,GAAG,QAWX;AAAA,MAXY;AACvBC,IAAAA,KADuB;AAEvBC,IAAAA,UAFuB;AAGvBC,IAAAA,UAAU,GAAG,KAHU;AAIvBC,IAAAA,QAAQ,EAAEC,YAJa;AAKvBC,IAAAA,WALuB;AAMvBC,IAAAA,aANuB;AAOvBC,IAAAA,QAPuB;AAQvBC,IAAAA,KARuB;AASvBC,IAAAA,YATuB;AAUvB,OAAGC;AAVoB,GAWZ;AACX,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBJ,KAAzB;AACA,QAAML,QAAQ,GAAGC,YAAY,IAAI,CAACM,IAAI,CAACG,OAAvC;AACA,QAAMC,qBAAqB,GACzBT,WAAW,IACXV,KAAK,CAACiB,MAAM,CAACG,IAAR,CAAL,CACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF,CAHW,CAUX;AACA;;AACA,QAAMC,aAAa,GACjB7B,QAAQ,CAAC8B,EAAT,KAAgB,SAAhB,IACA9B,QAAQ,CAAC+B,OAAT,IAAoBvB,mBADpB,IAEAI,UAHF;;AAKA,MAAIH,eAAe,CAACuB,SAApB,EAA+B;AAC7B,wBACE,oBAAC,uBAAD,eACMZ,IADN;AAEE,MAAA,GAAG,EAAED,YAFP;AAGE,MAAA,QAAQ,EAAEN,QAHZ;AAIE,MAAA,aAAa,EAAEgB,aAJjB;AAKE,MAAA,UAAU,EACRlB,UAAU,IAAI,IAAd,GACIA,UADJ,GAEIT,uBAAuB,CAAC+B,MAAxB,CAA+BT,qBAA/B,EAAsDZ,UAAtD;AARR,qBAWE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAACA,UAAU,IAAIsB,MAAM,CAACC,cAAtB,EAAsCzB,KAAtC;AAAb,OACGX,KAAK,CAACqC,QAAN,CAAeC,IAAf,CAAoBpB,QAApB,CADH,CAXF,CADF;AAiBD;;AAED,sBACE,oBAAC,kBAAD,eACMG,IADN;AAEE,IAAA,GAAG,EAAED,YAFP;AAGE,IAAA,QAAQ,EAAEN,QAHZ;AAIE,IAAA,KAAK,EAAE,CAACD,UAAU,IAAIsB,MAAM,CAACC,cAAtB,EAAsCzB,KAAtC,CAJT;AAKE,IAAA,aAAa,EACXM,aAAa,IAAI,IAAjB,GACIA,aADJ,GAEIX,KAAK,CAACmB,qBAAD,CAAL,CAA6Bc,IAA7B,CAAkC,GAAlC,EAAuCX,GAAvC,GAA6CC,MAA7C;AARR,MAWG7B,KAAK,CAACqC,QAAN,CAAeC,IAAf,CAAoBpB,QAApB,CAXH,CADF;AAeD,CA/DD;;AAiEAR,eAAe,CAACuB,SAAhB,GACEhC,QAAQ,CAAC8B,EAAT,KAAgB,SAAhB,IAA6B9B,QAAQ,CAAC+B,OAAT,IAAoBxB,wBADnD;AAGA,MAAM2B,MAAM,GAAG9B,UAAU,CAACmC,MAAX,CAAkB;AAC/BJ,EAAAA,cAAc,EAAE;AACdK,IAAAA,QAAQ,EAAE;AADI;AADe,CAAlB,CAAf;AAMA,eAAelC,SAAS,CAACG,eAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: ReactNativePaper.Theme;\n  forwardedRef?: any;\n  nextFocusLeft?: any;\n  nextFocusRight?: any;\n  nextFocusUp?: any;\n  nextFocusDown?: any;\n};\n\nconst TouchableRipple = ({\n  style,\n  background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor,\n  children,\n  theme,\n  forwardedRef,\n  ...rest\n}: Props) => {\n  const { dark, colors } = theme;\n  const disabled = disabledProp || !rest.onPress;\n  const calculatedRippleColor =\n    rippleColor ||\n    color(colors.text)\n      .alpha(dark ? 0.32 : 0.2)\n      .rgb()\n      .string();\n\n  // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n  // https://github.com/facebook/react-native/issues/6480\n  const useForeground =\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_PIE &&\n    borderless;\n\n  if (TouchableRipple.supported) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        ref={forwardedRef}\n        disabled={disabled}\n        useForeground={useForeground}\n        background={\n          background != null\n            ? background\n            : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)\n        }\n      >\n        <View style={[borderless && styles.overflowHidden, style]}>\n          {React.Children.only(children)}\n        </View>\n      </TouchableNativeFeedback>\n    );\n  }\n\n  return (\n    <TouchableHighlight\n      {...rest}\n      ref={forwardedRef}\n      disabled={disabled}\n      style={[borderless && styles.overflowHidden, style]}\n      underlayColor={\n        underlayColor != null\n          ? underlayColor\n          : color(calculatedRippleColor).fade(0.5).rgb().string()\n      }\n    >\n      {React.Children.only(children)}\n    </TouchableHighlight>\n  );\n};\n\nTouchableRipple.supported =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\nconst styles = StyleSheet.create({\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/typescript/components/Appbar/index.d.ts b/node_modules/react-native-paper/lib/typescript/components/Appbar/index.d.ts
index e7ac254..dd89c53 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Appbar/index.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Appbar/index.d.ts
@@ -66,7 +66,12 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
@@ -80,8 +85,13 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
                 borderless?: boolean | undefined;
                 background?: Object | undefined;
                 centered?: boolean | undefined;
@@ -93,6 +103,11 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
                 children: import("react").ReactNode;
                 style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
                 theme: ReactNativePaper.Theme;
+                forwardedRef?: any;
+                nextFocusLeft?: any;
+                nextFocusRight?: any;
+                nextFocusUp?: any;
+                nextFocusDown?: any;
             }): JSX.Element;
             supported: boolean;
         }, {}>> & {
@@ -106,9 +121,9 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             ref?: import("react").RefObject<import("react-native").TouchableWithoutFeedback> | undefined;
             theme: ReactNativePaper.Theme;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "animated"> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> | Pick<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "animated"> | Pick<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -120,7 +135,12 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
@@ -134,8 +154,13 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
                 borderless?: boolean | undefined;
                 background?: Object | undefined;
                 centered?: boolean | undefined;
@@ -147,6 +172,11 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
                 children: import("react").ReactNode;
                 style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
                 theme: ReactNativePaper.Theme;
+                forwardedRef?: any;
+                nextFocusLeft?: any;
+                nextFocusRight?: any;
+                nextFocusUp?: any;
+                nextFocusDown?: any;
             }): JSX.Element;
             supported: boolean;
         }, {}>> & {
@@ -160,11 +190,11 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             ref?: import("react").RefObject<import("react-native").TouchableWithoutFeedback> | undefined;
             theme: ReactNativePaper.Theme;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "animated"> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         } & {
             children?: import("react").ReactNode;
-        }, "style" | "children" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated">) & {
+        }, "style" | "children" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "animated">) & {
             color?: string | undefined;
             icon: import("../Icon").IconSource;
             size?: number | undefined;
@@ -189,7 +219,12 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
@@ -203,8 +238,13 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
                 borderless?: boolean | undefined;
                 background?: Object | undefined;
                 centered?: boolean | undefined;
@@ -216,6 +256,11 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
                 children: import("react").ReactNode;
                 style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
                 theme: ReactNativePaper.Theme;
+                forwardedRef?: any;
+                nextFocusLeft?: any;
+                nextFocusRight?: any;
+                nextFocusUp?: any;
+                nextFocusDown?: any;
             }): JSX.Element;
             supported: boolean;
         }, {}>> & {
@@ -229,9 +274,9 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             ref?: import("react").RefObject<import("react-native").TouchableWithoutFeedback> | undefined;
             theme: ReactNativePaper.Theme;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "animated"> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "animated"> & {
             color?: string | undefined;
             icon: import("../Icon").IconSource;
             size?: number | undefined;
@@ -240,7 +285,7 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             onPress?: (() => void) | undefined;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             ref?: import("react").RefObject<import("react-native").TouchableWithoutFeedback> | undefined;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> | Pick<Pick<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "animated"> | Pick<Pick<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -252,7 +297,12 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
@@ -266,8 +316,13 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
                 borderless?: boolean | undefined;
                 background?: Object | undefined;
                 centered?: boolean | undefined;
@@ -279,6 +334,11 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
                 children: import("react").ReactNode;
                 style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
                 theme: ReactNativePaper.Theme;
+                forwardedRef?: any;
+                nextFocusLeft?: any;
+                nextFocusRight?: any;
+                nextFocusUp?: any;
+                nextFocusDown?: any;
             }): JSX.Element;
             supported: boolean;
         }, {}>> & {
@@ -292,11 +352,11 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             ref?: import("react").RefObject<import("react-native").TouchableWithoutFeedback> | undefined;
             theme: ReactNativePaper.Theme;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "animated"> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         } & {
             children?: import("react").ReactNode;
-        }, "style" | "children" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+        }, "style" | "children" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "animated"> & {
             color?: string | undefined;
             icon: import("../Icon").IconSource;
             size?: number | undefined;
@@ -305,7 +365,7 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             onPress?: (() => void) | undefined;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             ref?: import("react").RefObject<import("react-native").TouchableWithoutFeedback> | undefined;
-        }, "style" | "children" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated">, "icon"> & {
+        }, "style" | "children" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "animated">, "icon"> & {
             color?: string | undefined;
             size?: number | undefined;
             disabled?: boolean | undefined;
diff --git a/node_modules/react-native-paper/lib/typescript/components/Banner.d.ts b/node_modules/react-native-paper/lib/typescript/components/Banner.d.ts
index 0eb401d..d083092 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Banner.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Banner.d.ts
@@ -89,32 +89,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      */
     actions: ({
         label: string;
-    } & Omit<((Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    } & Omit<(Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -134,6 +109,8 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         uppercase?: boolean | undefined;
         accessibilityLabel?: string | undefined;
         accessibilityHint?: string | undefined;
+        onFocus?: any;
+        onBlur?: any;
         onPress?: (() => void) | undefined;
         onLongPress?: (() => void) | undefined;
         contentStyle?: StyleProp<ViewStyle>;
@@ -141,34 +118,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }) | React.PropsWithChildren<(Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle" | keyof React.RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    }) | (Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -188,6 +144,8 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         uppercase?: boolean | undefined;
         accessibilityLabel?: string | undefined;
         accessibilityHint?: string | undefined;
+        onFocus?: any;
+        onBlur?: any;
         onPress?: (() => void) | undefined;
         onLongPress?: (() => void) | undefined;
         contentStyle?: StyleProp<ViewStyle>;
@@ -195,9 +153,15 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle" | keyof React.RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }>, "children">)[];
+    } & {
+        children?: React.ReactNode;
+    }), "children">)[];
     /**
      * Style of banner's inner content.
      * Use this prop to apply custom width for wide layouts.
@@ -259,32 +223,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      */
     actions: ({
         label: string;
-    } & Omit<((Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    } & Omit<(Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -304,6 +243,8 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         uppercase?: boolean | undefined;
         accessibilityLabel?: string | undefined;
         accessibilityHint?: string | undefined;
+        onFocus?: any;
+        onBlur?: any;
         onPress?: (() => void) | undefined;
         onLongPress?: (() => void) | undefined;
         contentStyle?: StyleProp<ViewStyle>;
@@ -311,34 +252,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }) | React.PropsWithChildren<(Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle" | keyof React.RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    }) | (Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -358,6 +278,8 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         uppercase?: boolean | undefined;
         accessibilityLabel?: string | undefined;
         accessibilityHint?: string | undefined;
+        onFocus?: any;
+        onBlur?: any;
         onPress?: (() => void) | undefined;
         onLongPress?: (() => void) | undefined;
         contentStyle?: StyleProp<ViewStyle>;
@@ -365,9 +287,15 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle" | keyof React.RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }>, "children">)[];
+    } & {
+        children?: React.ReactNode;
+    }), "children">)[];
     /**
      * Style of banner's inner content.
      * Use this prop to apply custom width for wide layouts.
diff --git a/node_modules/react-native-paper/lib/typescript/components/Button.d.ts b/node_modules/react-native-paper/lib/typescript/components/Button.d.ts
index d22c40b..21dd808 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Button.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Button.d.ts
@@ -1,39 +1,142 @@
 import * as React from 'react';
 import { Animated, View, ViewStyle, StyleProp, TextStyle } from 'react-native';
 import { IconSource } from './Icon';
-import Surface from './Surface';
-declare type Props = React.ComponentProps<typeof Surface> & {
+declare const _default: React.ComponentType<Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    children: React.ReactNode;
+    style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
+    theme: ReactNativePaper.Theme;
+}, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
+    theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
+} & {
+    children?: React.ReactNode;
+} & {
+    /**
+     * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.
+     * - `text` - flat button without background or outline (low emphasis)
+     * - `outlined` - button with an outline (medium emphasis)
+     * - `contained` - button with a background color and elevation shadow (high emphasis)
+     */
+    mode?: "text" | "outlined" | "contained" | undefined;
+    /**
+     * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.
+     */
+    dark?: boolean | undefined;
+    /**
+     * Use a compact look, useful for `text` buttons in a row.
+     */
+    compact?: boolean | undefined;
+    /**
+     * Custom text color for flat button, or background color for contained button.
+     */
+    color?: string | undefined;
+    /**
+     * Whether to show a loading indicator.
+     */
+    loading?: boolean | undefined;
+    /**
+     * Icon to display for the `Button`.
+     */
+    icon?: IconSource | undefined;
+    /**
+     * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.
+     */
+    disabled?: boolean | undefined;
+    /**
+     * Label text of the button.
+     */
+    children: React.ReactNode;
+    /**
+     * Make the label text uppercased. Note that this won't work if you pass React elements as children.
+     */
+    uppercase?: boolean | undefined;
+    /**
+     * Accessibility label for the button. This is read by the screen reader when the user taps the button.
+     */
+    accessibilityLabel?: string | undefined;
+    /**
+     * Accessibility hint for the button. This is read by the screen reader when the user taps the button.
+     */
+    accessibilityHint?: string | undefined;
+    /**
+     * Function to execute on focus.
+     */
+    onFocus?: any;
+    /**
+     * Function to execute on blur.
+     */
+    onBlur?: any;
+    /**
+     * Function to execute on press.
+     */
+    onPress?: (() => void) | undefined;
+    /**
+     * Function to execute on long press.
+     */
+    onLongPress?: (() => void) | undefined;
+    /**
+     * Style of button's inner content.
+     * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.
+     */
+    contentStyle?: StyleProp<ViewStyle>;
+    style?: StyleProp<ViewStyle>;
+    /**
+     * Style for the button text.
+     */
+    labelStyle?: StyleProp<TextStyle>;
+    /**
+     * @optional
+     */
+    theme: ReactNativePaper.Theme;
+    /**
+     * testID to be used on tests.
+     */
+    testID?: string | undefined;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle" | keyof React.RefAttributes<unknown>> & {
+    theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    children: React.ReactNode;
+    style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
+    theme: ReactNativePaper.Theme;
+}, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
+    theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
+} & {
+    children?: React.ReactNode;
+} & {
     /**
      * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.
      * - `text` - flat button without background or outline (low emphasis)
      * - `outlined` - button with an outline (medium emphasis)
      * - `contained` - button with a background color and elevation shadow (high emphasis)
      */
-    mode?: 'text' | 'outlined' | 'contained';
+    mode?: "text" | "outlined" | "contained" | undefined;
     /**
      * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.
      */
-    dark?: boolean;
+    dark?: boolean | undefined;
     /**
      * Use a compact look, useful for `text` buttons in a row.
      */
-    compact?: boolean;
+    compact?: boolean | undefined;
     /**
      * Custom text color for flat button, or background color for contained button.
      */
-    color?: string;
+    color?: string | undefined;
     /**
      * Whether to show a loading indicator.
      */
-    loading?: boolean;
+    loading?: boolean | undefined;
     /**
      * Icon to display for the `Button`.
      */
-    icon?: IconSource;
+    icon?: IconSource | undefined;
     /**
      * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.
      */
-    disabled?: boolean;
+    disabled?: boolean | undefined;
     /**
      * Label text of the button.
      */
@@ -41,23 +144,31 @@ declare type Props = React.ComponentProps<typeof Surface> & {
     /**
      * Make the label text uppercased. Note that this won't work if you pass React elements as children.
      */
-    uppercase?: boolean;
+    uppercase?: boolean | undefined;
     /**
      * Accessibility label for the button. This is read by the screen reader when the user taps the button.
      */
-    accessibilityLabel?: string;
+    accessibilityLabel?: string | undefined;
     /**
      * Accessibility hint for the button. This is read by the screen reader when the user taps the button.
      */
-    accessibilityHint?: string;
+    accessibilityHint?: string | undefined;
+    /**
+     * Function to execute on focus.
+     */
+    onFocus?: any;
+    /**
+     * Function to execute on blur.
+     */
+    onBlur?: any;
     /**
      * Function to execute on press.
      */
-    onPress?: () => void;
+    onPress?: (() => void) | undefined;
     /**
      * Function to execute on long press.
      */
-    onLongPress?: () => void;
+    onLongPress?: (() => void) | undefined;
     /**
      * Style of button's inner content.
      * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.
@@ -75,9 +186,12 @@ declare type Props = React.ComponentProps<typeof Surface> & {
     /**
      * testID to be used on tests.
      */
-    testID?: string;
-};
-declare const _default: React.ComponentType<(Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    testID?: string | undefined;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<(Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
     children: React.ReactNode;
     style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
     theme: ReactNativePaper.Theme;
@@ -131,6 +245,14 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
      * Accessibility hint for the button. This is read by the screen reader when the user taps the button.
      */
     accessibilityHint?: string | undefined;
+    /**
+     * Function to execute on focus.
+     */
+    onFocus?: any;
+    /**
+     * Function to execute on blur.
+     */
+    onBlur?: any;
     /**
      * Function to execute on press.
      */
@@ -157,7 +279,11 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
     children: React.ReactNode;
     style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
     theme: ReactNativePaper.Theme;
@@ -213,6 +339,14 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
      * Accessibility hint for the button. This is read by the screen reader when the user taps the button.
      */
     accessibilityHint?: string | undefined;
+    /**
+     * Function to execute on focus.
+     */
+    onFocus?: any;
+    /**
+     * Function to execute on blur.
+     */
+    onBlur?: any;
     /**
      * Function to execute on press.
      */
@@ -239,7 +373,9 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
-    theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Props> & (({ disabled, compact, mode, dark, loading, icon, color: buttonColor, children, uppercase, accessibilityLabel, accessibilityHint, onPress, onLongPress, style, theme, contentStyle, labelStyle, testID, accessible, ...rest }: Props) => JSX.Element), {}>;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle">) & React.RefAttributes<unknown>>, {}>;
 export default _default;
diff --git a/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxAndroid.d.ts b/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxAndroid.d.ts
index 084817e..3ae289d 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxAndroid.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxAndroid.d.ts
@@ -46,7 +46,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined; /**
      * Custom color for unchecked checkbox.
      */
@@ -65,8 +70,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -81,6 +91,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -112,7 +127,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "status" | "uncheckedColor"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined; /**
      * Custom color for unchecked checkbox.
      */
@@ -131,7 +146,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined; /**
      * Custom color for unchecked checkbox.
      */
@@ -150,8 +170,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -166,6 +191,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -217,7 +247,12 @@ declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined; /**
      * Custom color for unchecked checkbox.
      */
@@ -236,8 +271,13 @@ declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -252,6 +292,11 @@ declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -283,7 +328,7 @@ declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "status" | "uncheckedColor"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined; /**
      * Custom color for unchecked checkbox.
      */
@@ -302,7 +347,12 @@ declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined; /**
      * Custom color for unchecked checkbox.
      */
@@ -321,8 +371,13 @@ declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -337,6 +392,11 @@ declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
diff --git a/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxIOS.d.ts b/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxIOS.d.ts
index de1eed6..5dc505f 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxIOS.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxIOS.d.ts
@@ -41,7 +41,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -57,8 +62,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined; /**
@@ -72,6 +82,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -99,7 +114,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "status"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -115,7 +130,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -131,8 +151,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined; /**
@@ -146,6 +171,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -192,7 +222,12 @@ declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<Rea
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -208,8 +243,13 @@ declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<Rea
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined; /**
@@ -223,6 +263,11 @@ declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<Rea
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -250,7 +295,7 @@ declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<Rea
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "status"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -266,7 +311,12 @@ declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<Rea
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -282,8 +332,13 @@ declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<Rea
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined; /**
@@ -297,6 +352,11 @@ declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<Rea
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
diff --git a/node_modules/react-native-paper/lib/typescript/components/Checkbox/index.d.ts b/node_modules/react-native-paper/lib/typescript/components/Checkbox/index.d.ts
index 71a7023..73f2aff 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Checkbox/index.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Checkbox/index.d.ts
@@ -83,7 +83,12 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -97,8 +102,13 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -110,6 +120,11 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }): JSX.Element;
         supported: boolean;
     }, {}>> & {
@@ -120,7 +135,7 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         color?: string | undefined;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
+    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "status" | "uncheckedColor"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -134,7 +149,12 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -148,8 +168,13 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -161,6 +186,11 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }): JSX.Element;
         supported: boolean;
     }, {}>> & {
@@ -184,7 +214,12 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
@@ -198,8 +233,13 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
                 borderless?: boolean | undefined;
                 background?: Object | undefined;
                 centered?: boolean | undefined;
@@ -211,6 +251,11 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
                 children: import("react").ReactNode;
                 style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
                 theme: ReactNativePaper.Theme;
+                forwardedRef?: any;
+                nextFocusLeft?: any;
+                nextFocusRight?: any;
+                nextFocusUp?: any;
+                nextFocusDown?: any;
             }): JSX.Element;
             supported: boolean;
         }, {}>> & {
@@ -236,7 +281,12 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -250,8 +300,13 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -263,6 +318,11 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }): JSX.Element;
         supported: boolean;
     }, {}>> & {
@@ -272,7 +332,7 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         color?: string | undefined;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
+    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "status"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -286,7 +346,12 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -300,8 +365,13 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -313,6 +383,11 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }): JSX.Element;
         supported: boolean;
     }, {}>> & {
@@ -335,7 +410,12 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
@@ -349,8 +429,13 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
                 borderless?: boolean | undefined;
                 background?: Object | undefined;
                 centered?: boolean | undefined;
@@ -362,6 +447,11 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
                 children: import("react").ReactNode;
                 style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
                 theme: ReactNativePaper.Theme;
+                forwardedRef?: any;
+                nextFocusLeft?: any;
+                nextFocusRight?: any;
+                nextFocusUp?: any;
+                nextFocusDown?: any;
             }): JSX.Element;
             supported: boolean;
         }, {}>> & {
diff --git a/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTable.d.ts b/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTable.d.ts
index 963fe21..d258427 100644
--- a/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTable.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTable.d.ts
@@ -324,7 +324,12 @@ declare const DataTable: {
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -338,8 +343,13 @@ declare const DataTable: {
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -351,6 +361,11 @@ declare const DataTable: {
             children: React.ReactNode;
             style?: StyleProp<ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }): JSX.Element;
         supported: boolean;
     }, {}>> & {
@@ -361,7 +376,7 @@ declare const DataTable: {
         pointerEvents?: "box-none" | "none" | "box-only" | "auto" | undefined; /**
          * Content of the `DataTable`.
          */
-    }, "style" | "children" | "pointerEvents" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & {
+    }, "style" | "children" | "pointerEvents" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("../../types").$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -375,7 +390,12 @@ declare const DataTable: {
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -389,8 +409,13 @@ declare const DataTable: {
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -402,6 +427,11 @@ declare const DataTable: {
             children: React.ReactNode;
             style?: StyleProp<ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }): JSX.Element;
         supported: boolean;
     }, {}>> & {
@@ -425,7 +455,12 @@ declare const DataTable: {
             children: React.ReactNode;
             style?: StyleProp<ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
@@ -439,8 +474,13 @@ declare const DataTable: {
             children: React.ReactNode;
             style?: StyleProp<ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
                 borderless?: boolean | undefined;
                 background?: Object | undefined;
                 centered?: boolean | undefined;
@@ -452,6 +492,11 @@ declare const DataTable: {
                 children: React.ReactNode;
                 style?: StyleProp<ViewStyle>;
                 theme: ReactNativePaper.Theme;
+                forwardedRef?: any;
+                nextFocusLeft?: any;
+                nextFocusRight?: any;
+                nextFocusUp?: any;
+                nextFocusDown?: any;
             }): JSX.Element;
             supported: boolean;
         }, {}>> & {
@@ -478,7 +523,12 @@ declare const DataTable: {
             children: React.ReactNode;
             style?: StyleProp<ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
@@ -492,8 +542,13 @@ declare const DataTable: {
             children: React.ReactNode;
             style?: StyleProp<ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
                 borderless?: boolean | undefined;
                 background?: Object | undefined;
                 centered?: boolean | undefined;
@@ -505,6 +560,11 @@ declare const DataTable: {
                 children: React.ReactNode;
                 style?: StyleProp<ViewStyle>;
                 theme: ReactNativePaper.Theme;
+                forwardedRef?: any;
+                nextFocusLeft?: any;
+                nextFocusRight?: any;
+                nextFocusUp?: any;
+                nextFocusDown?: any;
             }): JSX.Element;
             supported: boolean;
         }, {}>> & {
diff --git a/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTableRow.d.ts b/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTableRow.d.ts
index 64add12..ff34d9d 100644
--- a/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTableRow.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTableRow.d.ts
@@ -64,7 +64,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -78,8 +83,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -91,6 +101,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -111,7 +126,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * `pointerEvents` passed to the `View` container, which is wrapping children within `TouchableRipple`.
      */
     pointerEvents?: "box-none" | "none" | "box-only" | "auto" | undefined;
-}, "style" | "children" | "pointerEvents" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & {
+}, "style" | "children" | "pointerEvents" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -125,7 +140,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -139,8 +159,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -152,6 +177,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
diff --git a/node_modules/react-native-paper/lib/typescript/components/IconButton.d.ts b/node_modules/react-native-paper/lib/typescript/components/IconButton.d.ts
index e45e8dc..105125d 100644
--- a/node_modules/react-native-paper/lib/typescript/components/IconButton.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/IconButton.d.ts
@@ -51,7 +51,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<TouchableWithoutFeedback>> & {
     /**
      * Size of the icon.
      */
@@ -68,8 +73,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -81,6 +91,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -118,7 +133,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * @optional
      */
     theme: ReactNativePaper.Theme;
-}, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+}, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "animated"> & {
     /**
      * Size of the icon.
      */
@@ -135,7 +150,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<TouchableWithoutFeedback>> & {
     /**
      * Size of the icon.
      */
@@ -152,8 +172,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -165,6 +190,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
diff --git a/node_modules/react-native-paper/lib/typescript/components/List/ListItem.d.ts b/node_modules/react-native-paper/lib/typescript/components/List/ListItem.d.ts
index 8c70ed7..2b417d1 100644
--- a/node_modules/react-native-paper/lib/typescript/components/List/ListItem.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/List/ListItem.d.ts
@@ -99,7 +99,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -113,8 +118,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -126,6 +136,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -200,7 +215,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)
      */
     descriptionEllipsizeMode?: EllipsizeProp | undefined;
-}, "style" | "title" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "left" | "right" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "description" | "titleStyle" | "descriptionStyle" | "titleNumberOfLines" | "descriptionNumberOfLines" | "titleEllipsizeMode" | "descriptionEllipsizeMode"> & {
+}, "style" | "title" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "left" | "right" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "description" | "titleStyle" | "descriptionStyle" | "titleNumberOfLines" | "descriptionNumberOfLines" | "titleEllipsizeMode" | "descriptionEllipsizeMode"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -214,7 +229,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -228,8 +248,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -241,6 +266,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
diff --git a/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonAndroid.d.ts b/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonAndroid.d.ts
index 0a41ab0..7a40463 100644
--- a/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonAndroid.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonAndroid.d.ts
@@ -47,7 +47,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -61,8 +66,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -74,6 +84,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -109,7 +124,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "status" | "uncheckedColor"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -123,7 +138,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -137,8 +157,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -150,6 +175,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -202,7 +232,12 @@ declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChild
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -216,8 +251,13 @@ declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChild
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -229,6 +269,11 @@ declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChild
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -264,7 +309,7 @@ declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChild
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "status" | "uncheckedColor"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -278,7 +323,12 @@ declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChild
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -292,8 +342,13 @@ declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChild
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -305,6 +360,11 @@ declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChild
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
diff --git a/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonIOS.d.ts b/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonIOS.d.ts
index 93773de..1ab857f 100644
--- a/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonIOS.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonIOS.d.ts
@@ -43,7 +43,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -57,8 +62,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -70,6 +80,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -101,7 +116,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "status"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -115,7 +130,12 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -129,8 +149,13 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -142,6 +167,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -190,7 +220,12 @@ declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -204,8 +239,13 @@ declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -217,6 +257,11 @@ declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
@@ -248,7 +293,7 @@ declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "status"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -262,7 +307,12 @@ declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
@@ -276,8 +326,13 @@ declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -289,6 +344,11 @@ declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<
         children: React.ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }): JSX.Element;
     supported: boolean;
 }, {}>> & {
diff --git a/node_modules/react-native-paper/lib/typescript/components/RadioButton/index.d.ts b/node_modules/react-native-paper/lib/typescript/components/RadioButton/index.d.ts
index e532e96..3e688d4 100644
--- a/node_modules/react-native-paper/lib/typescript/components/RadioButton/index.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/RadioButton/index.d.ts
@@ -22,7 +22,12 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -36,8 +41,13 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -49,6 +59,11 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }): JSX.Element;
         supported: boolean;
     }, {}>> & {
@@ -60,7 +75,7 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         color?: string | undefined;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
+    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "status" | "uncheckedColor"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -74,7 +89,12 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -88,8 +108,13 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -101,6 +126,11 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }): JSX.Element;
         supported: boolean;
     }, {}>> & {
@@ -125,7 +155,12 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
@@ -139,8 +174,13 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
                 borderless?: boolean | undefined;
                 background?: Object | undefined;
                 centered?: boolean | undefined;
@@ -152,6 +192,11 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
                 children: import("react").ReactNode;
                 style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
                 theme: ReactNativePaper.Theme;
+                forwardedRef?: any;
+                nextFocusLeft?: any;
+                nextFocusRight?: any;
+                nextFocusUp?: any;
+                nextFocusDown?: any;
             }): JSX.Element;
             supported: boolean;
         }, {}>> & {
@@ -178,7 +223,12 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -192,8 +242,13 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -205,6 +260,11 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }): JSX.Element;
         supported: boolean;
     }, {}>> & {
@@ -215,7 +275,7 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         color?: string | undefined;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
+    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "status"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -229,7 +289,12 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
@@ -243,8 +308,13 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        forwardedRef?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -256,6 +326,11 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }): JSX.Element;
         supported: boolean;
     }, {}>> & {
@@ -279,7 +354,12 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
@@ -293,8 +373,13 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
+            forwardedRef?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
         }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
                 borderless?: boolean | undefined;
                 background?: Object | undefined;
                 centered?: boolean | undefined;
@@ -306,6 +391,11 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
                 children: import("react").ReactNode;
                 style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
                 theme: ReactNativePaper.Theme;
+                forwardedRef?: any;
+                nextFocusLeft?: any;
+                nextFocusRight?: any;
+                nextFocusUp?: any;
+                nextFocusDown?: any;
             }): JSX.Element;
             supported: boolean;
         }, {}>> & {
diff --git a/node_modules/react-native-paper/lib/typescript/components/Snackbar.d.ts b/node_modules/react-native-paper/lib/typescript/components/Snackbar.d.ts
index dd0d7bb..6d46a08 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Snackbar.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Snackbar.d.ts
@@ -54,32 +54,7 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
      * - `label` - Label of the action button
      * - `onPress` - Callback that is called when action button is pressed.
      */
-    action?: (Omit<((Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: import("./Icon").IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    action?: (Omit<(Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -99,6 +74,8 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
         uppercase?: boolean | undefined;
         accessibilityLabel?: string | undefined;
         accessibilityHint?: string | undefined;
+        onFocus?: any;
+        onBlur?: any;
         onPress?: (() => void) | undefined;
         onLongPress?: (() => void) | undefined;
         contentStyle?: StyleProp<ViewStyle>;
@@ -106,34 +83,13 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }) | React.PropsWithChildren<(Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle" | keyof React.RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: import("./Icon").IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    }) | (Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -153,6 +109,8 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
         uppercase?: boolean | undefined;
         accessibilityLabel?: string | undefined;
         accessibilityHint?: string | undefined;
+        onFocus?: any;
+        onBlur?: any;
         onPress?: (() => void) | undefined;
         onLongPress?: (() => void) | undefined;
         contentStyle?: StyleProp<ViewStyle>;
@@ -160,9 +118,15 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle" | keyof React.RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }>, "children"> & {
+    } & {
+        children?: React.ReactNode;
+    }), "children"> & {
         label: string;
     }) | undefined;
     /**
@@ -205,32 +169,7 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
      * - `label` - Label of the action button
      * - `onPress` - Callback that is called when action button is pressed.
      */
-    action?: (Omit<((Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: import("./Icon").IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    action?: (Omit<(Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -250,6 +189,8 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
         uppercase?: boolean | undefined;
         accessibilityLabel?: string | undefined;
         accessibilityHint?: string | undefined;
+        onFocus?: any;
+        onBlur?: any;
         onPress?: (() => void) | undefined;
         onLongPress?: (() => void) | undefined;
         contentStyle?: StyleProp<ViewStyle>;
@@ -257,34 +198,13 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }) | React.PropsWithChildren<(Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle" | keyof React.RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: import("./Icon").IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    }) | (Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -304,6 +224,8 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
         uppercase?: boolean | undefined;
         accessibilityLabel?: string | undefined;
         accessibilityHint?: string | undefined;
+        onFocus?: any;
+        onBlur?: any;
         onPress?: (() => void) | undefined;
         onLongPress?: (() => void) | undefined;
         contentStyle?: StyleProp<ViewStyle>;
@@ -311,9 +233,15 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | "compact" | "loading" | "contentStyle" | keyof React.RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }>, "children"> & {
+    } & {
+        children?: React.ReactNode;
+    }), "children"> & {
         label: string;
     }) | undefined;
     /**
diff --git a/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.d.ts b/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.d.ts
index 6740ef4..4ef19c5 100644
--- a/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.d.ts
@@ -43,6 +43,11 @@ declare type Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback
      * @optional
      */
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 };
 declare const _default: React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
     /**
@@ -87,7 +92,12 @@ declare const _default: React.ComponentType<Pick<import("react-native").Touchabl
      * @optional
      */
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<TouchableWithoutFeedback>> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "centered" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown" | keyof React.RefAttributes<TouchableWithoutFeedback>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
     /**
@@ -132,8 +142,13 @@ declare const _default: React.ComponentType<Pick<import("react-native").Touchabl
      * @optional
      */
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: Props): JSX.Element;
+    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, forwardedRef, ...rest }: Props): JSX.Element;
     /**
      * Whether ripple effect is supported.
      */
diff --git a/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.native.d.ts b/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.native.d.ts
index c3f56b3..eff8887 100644
--- a/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.native.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.native.d.ts
@@ -10,6 +10,11 @@ declare type Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 };
 declare const _default: React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & {
     borderless?: boolean | undefined;
@@ -21,7 +26,12 @@ declare const _default: React.ComponentType<Pick<import("react-native").Touchabl
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor"> & {
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "forwardedRef" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "nextFocusDown"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & {
     borderless?: boolean | undefined;
@@ -33,8 +43,13 @@ declare const _default: React.ComponentType<Pick<import("react-native").Touchabl
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
+    forwardedRef?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
 }> & {
-    ({ style, background, borderless, disabled: disabledProp, rippleColor, underlayColor, children, theme, ...rest }: Props): JSX.Element;
+    ({ style, background, borderless, disabled: disabledProp, rippleColor, underlayColor, children, theme, forwardedRef, ...rest }: Props): JSX.Element;
     supported: boolean;
 }, {}>;
 export default _default;
diff --git a/node_modules/react-native-paper/src/.npmignore b/node_modules/react-native-paper/src/.npmignore
new file mode 100644
index 0000000..c912533
--- /dev/null
+++ b/node_modules/react-native-paper/src/.npmignore
@@ -0,0 +1 @@
+__tests__
diff --git a/node_modules/react-native-paper/src/babel/__tests__/index.js b/node_modules/react-native-paper/src/babel/__tests__/index.js
new file mode 100644
index 0000000..0e59a4e
--- /dev/null
+++ b/node_modules/react-native-paper/src/babel/__tests__/index.js
@@ -0,0 +1,21 @@
+const path = require('path');
+const { spawnSync } = require('child_process');
+const { create } = require('babel-test');
+const { toMatchFile } = require('jest-file-snapshot');
+
+expect.extend({ toMatchFile });
+
+spawnSync('node', [
+  path.resolve(__dirname, '../../../scripts/generate-mappings.js'),
+]);
+
+const { fixtures } = create({
+  plugins: [
+    [
+      require.resolve('../index'),
+      { mappings: require.resolve('../../../lib/mappings.json') },
+    ],
+  ],
+});
+
+fixtures('generate mappings', path.join(__dirname, '..', '__fixtures__'));
diff --git a/node_modules/react-native-paper/src/components/Button.tsx b/node_modules/react-native-paper/src/components/Button.tsx
index 5f839ef..450a750 100644
--- a/node_modules/react-native-paper/src/components/Button.tsx
+++ b/node_modules/react-native-paper/src/components/Button.tsx
@@ -65,6 +65,14 @@ type Props = React.ComponentProps<typeof Surface> & {
    * Accessibility hint for the button. This is read by the screen reader when the user taps the button.
    */
   accessibilityHint?: string;
+  /**
+   * Function to execute on focus.
+   */
+  onFocus?: any;
+  /**
+   * Function to execute on blur.
+   */
+  onBlur?: any;
   /**
    * Function to execute on press.
    */
@@ -91,6 +99,10 @@ type Props = React.ComponentProps<typeof Surface> & {
    * testID to be used on tests.
    */
   testID?: string;
+  nextFocusLeft?: any;
+  nextFocusRight?: any;
+  nextFocusUp?: any;
+  nextFocusDown?: any;
 };
 
 /**
@@ -125,7 +137,7 @@ type Props = React.ComponentProps<typeof Surface> & {
  * export default MyComponent;
  * ```
  */
-const Button = ({
+const Button = React.forwardRef(({
   disabled,
   compact,
   mode = 'text',
@@ -137,6 +149,8 @@ const Button = ({
   uppercase = true,
   accessibilityLabel,
   accessibilityHint,
+  onFocus,
+  onBlur,
   onPress,
   onLongPress,
   style,
@@ -146,7 +160,7 @@ const Button = ({
   testID,
   accessible,
   ...rest
-}: Props) => {
+}: Props, ref) => {
   const { current: elevation } = React.useRef<Animated.Value>(
     new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)
   );
@@ -154,6 +168,16 @@ const Button = ({
     elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);
   }, [mode, elevation, disabled]);
 
+  const handleFocus = () => {
+    onFocus && onFocus();
+    handlePressIn();
+  };
+
+  const handleBlur = () => {
+    onBlur && onBlur();
+    handlePressOut();
+  };
+
   const handlePressIn = () => {
     if (mode === 'contained') {
       const { scale } = theme.animation;
@@ -269,12 +293,19 @@ const Button = ({
       ]}
     >
       <TouchableRipple
+        forwardedRef={ref}
         borderless
         delayPressIn={0}
         onPress={onPress}
         onLongPress={onLongPress}
         onPressIn={handlePressIn}
         onPressOut={handlePressOut}
+        onFocus={handleFocus}
+        onBlur={handleBlur}
+        nextFocusLeft={rest?.nextFocusLeft}
+        nextFocusRight={rest?.nextFocusRight}
+        nextFocusUp={rest?.nextFocusUp}
+        nextFocusDown={rest?.nextFocusDown}
         accessibilityLabel={accessibilityLabel}
         accessibilityHint={accessibilityHint}
         // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
@@ -287,6 +318,7 @@ const Button = ({
         rippleColor={rippleColor}
         style={touchableStyle}
         testID={testID}
+        tvParallaxProperties={{enabled: true, pressMagnification: 1.1}}
       >
         <View style={[styles.content, contentStyle]}>
           {icon && loading !== true ? (
@@ -331,7 +363,7 @@ const Button = ({
       </TouchableRipple>
     </Surface>
   );
-};
+});
 
 const styles = StyleSheet.create({
   button: {
diff --git a/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.native.tsx b/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.native.tsx
index 2342881..94d6c5f 100644
--- a/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.native.tsx
+++ b/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.native.tsx
@@ -26,6 +26,11 @@ type Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {
   children: React.ReactNode;
   style?: StyleProp<ViewStyle>;
   theme: ReactNativePaper.Theme;
+  forwardedRef?: any;
+  nextFocusLeft?: any;
+  nextFocusRight?: any;
+  nextFocusUp?: any;
+  nextFocusDown?: any;
 };
 
 const TouchableRipple = ({
@@ -37,6 +42,7 @@ const TouchableRipple = ({
   underlayColor,
   children,
   theme,
+  forwardedRef,
   ...rest
 }: Props) => {
   const { dark, colors } = theme;
@@ -59,6 +65,7 @@ const TouchableRipple = ({
     return (
       <TouchableNativeFeedback
         {...rest}
+        ref={forwardedRef}
         disabled={disabled}
         useForeground={useForeground}
         background={
@@ -77,6 +84,7 @@ const TouchableRipple = ({
   return (
     <TouchableHighlight
       {...rest}
+      ref={forwardedRef}
       disabled={disabled}
       style={[borderless && styles.overflowHidden, style]}
       underlayColor={
diff --git a/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.tsx b/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.tsx
index 8e2ac70..f0a28dd 100644
--- a/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.tsx
+++ b/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.tsx
@@ -54,6 +54,11 @@ type Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {
    * @optional
    */
   theme: ReactNativePaper.Theme;
+  forwardedRef?: any;
+  nextFocusLeft?: any;
+  nextFocusRight?: any;
+  nextFocusUp?: any;
+  nextFocusDown?: any;
 };
 
 /**
@@ -96,6 +101,7 @@ const TouchableRipple = ({
   underlayColor: _underlayColor,
   children,
   theme,
+  forwardedRef,
   ...rest
 }: Props) => {
   const handlePressIn = (e: any) => {
@@ -233,6 +239,7 @@ const TouchableRipple = ({
 
   return (
     <TouchableWithoutFeedback
+      ref={forwardedRef}
       {...rest}
       onPressIn={handlePressIn}
       onPressOut={handlePressOut}
diff --git a/node_modules/react-native-paper/src/components/__tests__/ActivityIndicator.test.js b/node_modules/react-native-paper/src/components/__tests__/ActivityIndicator.test.js
new file mode 100644
index 0000000..e90aeb9
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/ActivityIndicator.test.js
@@ -0,0 +1,29 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import ActivityIndicator from '../ActivityIndicator.tsx';
+
+it('renders indicator', () => {
+  const tree = renderer.create(<ActivityIndicator animating />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders hidden indicator', () => {
+  const tree = renderer
+    .create(<ActivityIndicator animating={false} hidesWhenStopped />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders large indicator', () => {
+  const tree = renderer.create(<ActivityIndicator size="large" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders colored indicator', () => {
+  const tree = renderer.create(<ActivityIndicator color="#FF0000" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/AnimatedFAB.test.js b/node_modules/react-native-paper/src/components/__tests__/AnimatedFAB.test.js
new file mode 100644
index 0000000..9dd39ce
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/AnimatedFAB.test.js
@@ -0,0 +1,37 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import AnimatedFAB from '../FAB/AnimatedFAB';
+
+it('renders animated fab', () => {
+  const tree = renderer
+    .create(<AnimatedFAB onPress={() => {}} icon="plus" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders animated fab with label on the right by default', () => {
+  const tree = renderer
+    .create(
+      <AnimatedFAB label="text" extended onPress={() => {}} icon="plus" />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders animated fab with label on the left', () => {
+  const tree = renderer
+    .create(
+      <AnimatedFAB
+        label="text"
+        extended
+        animateFrom="left"
+        onPress={() => {}}
+        icon="plus"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Appbar/Appbar.test.js b/node_modules/react-native-paper/src/components/__tests__/Appbar/Appbar.test.js
new file mode 100644
index 0000000..8f980c6
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Appbar/Appbar.test.js
@@ -0,0 +1,32 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import Appbar from '../../Appbar';
+import Searchbar from '../../Searchbar';
+
+describe('Appbar', () => {
+  it('does not pass any additional props to Searchbar', () => {
+    const tree = renderer
+      .create(
+        <Appbar>
+          <Searchbar placeholder="Search" />
+        </Appbar>
+      )
+      .toJSON();
+
+    expect(tree).toMatchSnapshot();
+  });
+
+  it('passes additional props to AppbarBackAction, AppbarContent and AppbarAction', () => {
+    const tree = renderer
+      .create(
+        <Appbar>
+          <Appbar.BackAction onPress={() => {}} />
+          <Appbar.Content title="Examples" />
+          <Appbar.Action icon="menu" onPress={() => {}} />
+        </Appbar>
+      )
+      .toJSON();
+
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Appbar/__snapshots__/Appbar.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/Appbar/__snapshots__/Appbar.test.js.snap
new file mode 100644
index 0000000..d895911
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Appbar/__snapshots__/Appbar.test.js.snap
@@ -0,0 +1,523 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Appbar does not pass any additional props to Searchbar 1`] = `
+<View
+  style={
+    Object {
+      "alignItems": "center",
+      "backgroundColor": "#6200ee",
+      "elevation": 4,
+      "flexDirection": "row",
+      "height": 56,
+      "paddingHorizontal": 4,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 3,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 4,
+    }
+  }
+>
+  <View
+    style={
+      Object {
+        "alignItems": "center",
+        "backgroundColor": "#ffffff",
+        "borderRadius": 4,
+        "elevation": 4,
+        "flexDirection": "row",
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+      }
+    }
+  >
+    <View
+      accessibilityLabel="search"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            undefined,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <TextInput
+      accessibilityRole="search"
+      accessibilityTraits="search"
+      allowFontScaling={true}
+      keyboardAppearance="light"
+      placeholder="Search"
+      placeholderTextColor="rgba(0, 0, 0, 0.54)"
+      rejectResponderTermination={true}
+      returnKeyType="search"
+      selectionColor="#6200ee"
+      style={
+        Array [
+          Object {
+            "alignSelf": "stretch",
+            "flex": 1,
+            "fontSize": 18,
+            "minWidth": 0,
+            "paddingLeft": 8,
+            "textAlign": "left",
+          },
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          undefined,
+        ]
+      }
+      underlineColorAndroid="transparent"
+    />
+    <View
+      accessibilityLabel="clear"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": true,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            Object {
+              "opacity": 0.32,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(255, 255, 255, 0)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`Appbar passes additional props to AppbarBackAction, AppbarContent and AppbarAction 1`] = `
+<View
+  style={
+    Object {
+      "alignItems": "center",
+      "backgroundColor": "#6200ee",
+      "elevation": 4,
+      "flexDirection": "row",
+      "height": 56,
+      "paddingHorizontal": 4,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 3,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 4,
+    }
+  }
+>
+  <View
+    accessibilityLabel="Back"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    hitSlop={
+      Object {
+        "bottom": 6,
+        "left": 6,
+        "right": 6,
+        "top": 6,
+      }
+    }
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+            "margin": 6,
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "width": 36,
+          },
+          undefined,
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View>
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <View
+            style={
+              Array [
+                Object {
+                  "alignItems": "center",
+                  "justifyContent": "center",
+                },
+                Object {
+                  "height": 24,
+                  "transform": Array [
+                    Object {
+                      "scaleX": 1,
+                    },
+                  ],
+                  "width": 24,
+                },
+              ]
+            }
+          >
+            <Image
+              source={
+                Object {
+                  "testUri": "../../../src/assets/back-chevron.png",
+                }
+              }
+              style={
+                Array [
+                  Object {
+                    "resizeMode": "contain",
+                  },
+                  Object {
+                    "height": 21,
+                    "tintColor": "#ffffff",
+                    "width": 21,
+                  },
+                ]
+              }
+            />
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "flex": 1,
+          "paddingHorizontal": 12,
+        },
+        Array [
+          Object {
+            "marginLeft": 8,
+          },
+          Object {
+            "alignItems": "center",
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <Text
+      accessibilityRole="header"
+      accessibilityTraits="header"
+      accessible={true}
+      numberOfLines={1}
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "color": "#ffffff",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "fontSize": 17,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Examples
+    </Text>
+  </View>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    hitSlop={
+      Object {
+        "bottom": 6,
+        "left": 6,
+        "right": 6,
+        "top": 6,
+      }
+    }
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+            "margin": 6,
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "width": 36,
+          },
+          undefined,
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View>
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "#ffffff",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/Avatar.test.js b/node_modules/react-native-paper/src/components/__tests__/Avatar.test.js
new file mode 100644
index 0000000..774bacd
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Avatar.test.js
@@ -0,0 +1,107 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import { fireEvent, render } from 'react-native-testing-library';
+import * as Avatar from '../Avatar/Avatar.tsx';
+import { red500 } from '../../styles/colors';
+
+const styles = StyleSheet.create({
+  bgColor: {
+    backgroundColor: red500,
+  },
+});
+
+it('renders avatar with text', () => {
+  const tree = renderer.create(<Avatar.Text label="XD" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders avatar with text and custom size', () => {
+  const tree = renderer.create(<Avatar.Text size={96} label="XD" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders avatar with text and custom background color', () => {
+  const tree = renderer
+    .create(<Avatar.Text style={styles.bgColor} label="XD" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders avatar with text and custom colors', () => {
+  const tree = renderer
+    .create(<Avatar.Text color="#FFFFFF" label="XD" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders avatar with icon', () => {
+  const tree = renderer.create(<Avatar.Icon icon="information" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders avatar with icon and custom background color', () => {
+  const tree = renderer
+    .create(<Avatar.Icon style={styles.bgColor} icon="information" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders avatar with image', () => {
+  const tree = renderer
+    .create(<Avatar.Image source={{ src: 'avatar.png' }} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+describe('AvatarImage listener', () => {
+  const onListenerMock = jest.fn();
+  const { getByTestId } = render(
+    <Avatar.Image
+      testID={'avatar-image'}
+      onError={onListenerMock}
+      onLayout={onListenerMock}
+      onLoad={onListenerMock}
+      onLoadEnd={onListenerMock}
+      onLoadStart={onListenerMock}
+      onProgress={onListenerMock}
+    />
+  );
+
+  it('onError should be called', () => {
+    fireEvent(getByTestId('avatar-image'), 'onError');
+    expect(onListenerMock).toHaveBeenCalled();
+  });
+
+  it('onLayout should be called', () => {
+    fireEvent(getByTestId('avatar-image'), 'onLayout');
+    expect(onListenerMock).toHaveBeenCalled();
+  });
+
+  it('onLoad should be called', () => {
+    fireEvent(getByTestId('avatar-image'), 'onLoad');
+    expect(onListenerMock).toHaveBeenCalled();
+  });
+
+  it('onLoadEnd should be called', () => {
+    fireEvent(getByTestId('avatar-image'), 'onLoadEnd');
+    expect(onListenerMock).toHaveBeenCalled();
+  });
+
+  it('onLoadStart should be called', () => {
+    fireEvent(getByTestId('avatar-image'), 'onLoadStart');
+    expect(onListenerMock).toHaveBeenCalled();
+  });
+
+  it('onProgress should be called', () => {
+    fireEvent(getByTestId('avatar-image'), 'onProgress');
+    expect(onListenerMock).toHaveBeenCalled();
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Badge.test.js b/node_modules/react-native-paper/src/components/__tests__/Badge.test.js
new file mode 100644
index 0000000..7c2ec7a
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Badge.test.js
@@ -0,0 +1,42 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import Badge from '../Badge.tsx';
+import { red500 } from '../../styles/colors.tsx';
+
+it('renders badge', () => {
+  const tree = renderer.create(<Badge />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders badge with content', () => {
+  const tree = renderer.create(<Badge>3</Badge>).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders badge in different size', () => {
+  const tree = renderer.create(<Badge size={12}>3</Badge>).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders badge as hidden', () => {
+  const tree = renderer
+    .create(
+      <Badge visible={false} size={12}>
+        3
+      </Badge>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders badge in different color', () => {
+  const tree = renderer
+    .create(<Badge style={{ backgroundColor: red500 }}>3</Badge>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Banner.test.js b/node_modules/react-native-paper/src/components/__tests__/Banner.test.js
new file mode 100644
index 0000000..66746bc
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Banner.test.js
@@ -0,0 +1,115 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import { Image } from 'react-native';
+import Banner from '../Banner.tsx';
+
+it('renders hidden banner, without action buttons and without image', () => {
+  const tree = renderer
+    .create(
+      <Banner visible={false} actions={[]}>
+        Two line text string with two actions. One to two lines is preferable on
+        mobile.
+      </Banner>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders visible banner, without action buttons and without image', () => {
+  const tree = renderer
+    .create(
+      <Banner visible actions={[]}>
+        Two line text string with two actions. One to two lines is preferable on
+        mobile.
+      </Banner>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders visible banner, with action buttons and without image', () => {
+  const tree = renderer
+    .create(
+      <Banner
+        visible
+        actions={[
+          { label: 'first', onPress: () => {} },
+          { label: 'second', onPress: () => {} },
+        ]}
+      >
+        Two line text string with two actions. One to two lines is preferable on
+        mobile.
+      </Banner>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders visible banner, without action buttons and with image', () => {
+  const tree = renderer
+    .create(
+      <Banner
+        visible
+        image={({ size }) => (
+          <Image
+            source={{ uri: 'https://callstack.com/images/team/Satya.png' }}
+            style={{ width: size, height: size }}
+          />
+        )}
+        actions={[]}
+      >
+        Two line text string with two actions. One to two lines is preferable on
+        mobile.
+      </Banner>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders visible banner, with action buttons and with image', () => {
+  const tree = renderer
+    .create(
+      <Banner
+        visible
+        image={({ size }) => (
+          <Image
+            source={{ uri: 'https://callstack.com/images/team/Satya.png' }}
+            style={{ width: size, height: size }}
+          />
+        )}
+        actions={[{ label: 'first', onPress: () => {} }]}
+      >
+        Two line text string with two actions. One to two lines is preferable on
+        mobile.
+      </Banner>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('render visible banner, with custom theme', () => {
+  const tree = renderer
+    .create(
+      <Banner
+        visible
+        theme={{
+          colors: {
+            text: '#00f',
+            surface: '#ccc',
+            primary: '#043',
+          },
+        }}
+        actions={[{ label: 'first', onPress: () => {} }]}
+      >
+        Custom theme
+      </Banner>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/BottomNavigation.test.js b/node_modules/react-native-paper/src/components/__tests__/BottomNavigation.test.js
new file mode 100644
index 0000000..fe25ff0
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/BottomNavigation.test.js
@@ -0,0 +1,214 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import { render } from 'react-native-testing-library';
+import renderer from 'react-test-renderer';
+import BottomNavigation from '../BottomNavigation/BottomNavigation.tsx';
+import BottomNavigationRouteScreen from '../BottomNavigation/BottomNavigationRouteScreen.tsx';
+import { red300 } from '../../styles/colors';
+
+const styles = StyleSheet.create({
+  bgColor: {
+    color: red300,
+  },
+});
+
+// Make sure any animation finishes before checking the snapshot results
+jest.mock('react-native', () => {
+  const RN = jest.requireActual('react-native');
+
+  RN.Animated.timing = (value, config) => ({
+    start: (callback) => {
+      value.setValue(config.toValue);
+      callback && callback({ finished: true });
+    },
+  });
+
+  return RN;
+});
+
+const icons = ['magnify', 'camera', 'inbox', 'heart', 'shopping-music'];
+
+const createState = (index, length) => ({
+  index,
+  routes: Array.from({ length }, (_, i) => ({
+    key: `key-${i}`,
+    icon: icons[i],
+    title: `Route: ${i}`,
+  })),
+});
+
+it('renders shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting
+        navigationState={createState(0, 5)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders non-shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting={false}
+        navigationState={createState(0, 3)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders custom icon and label in shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting
+        navigationState={createState(0, 5)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+        renderIcon={({ route, color }) => (
+          <icon color={color}>{route.icon}</icon>
+        )}
+        renderLabel={({ route, color }) => (
+          <text color={color}>{route.label}</text>
+        )}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders custom icon and label in non-shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting={false}
+        navigationState={createState(0, 3)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+        renderIcon={({ route, color }) => (
+          <icon color={color}>{route.icon}</icon>
+        )}
+        renderLabel={({ route, color }) => (
+          <text color={color}>{route.label}</text>
+        )}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders custom icon and label with custom colors in shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting
+        navigationState={createState(0, 3)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+        activeColor="#FBF7DB"
+        inactiveColor="#853D4B"
+        barStyle={styles.bgColor}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders custom icon and label with custom colors in non-shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting={false}
+        navigationState={createState(0, 3)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+        activeColor="#FBF7DB"
+        inactiveColor="#853D4B"
+        barStyle={styles.bgColor}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('hides labels in shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting
+        labeled={false}
+        navigationState={createState(0, 3)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('hides labels in non-shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting={false}
+        labeled={false}
+        navigationState={createState(0, 3)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('should have appropriate display style according to the visibility', () => {
+  const { getByTestId, rerender } = render(
+    <BottomNavigationRouteScreen visibility={1} index={0} />
+  );
+
+  const wrapper = getByTestId('RouteScreen: 0');
+
+  expect(wrapper.props.style).toEqual(
+    expect.arrayContaining([expect.objectContaining({ display: 'flex' })])
+  );
+
+  rerender(<BottomNavigationRouteScreen visibility={0} index={0} />);
+
+  expect(wrapper.props.style).toEqual(
+    expect.arrayContaining([expect.objectContaining({ display: 'none' })])
+  );
+});
+
+it('should have labelMaxFontSizeMultiplier passed to label', () => {
+  const labelMaxFontSizeMultiplier = 2;
+  const { getAllByText } = render(
+    <BottomNavigation
+      shifting={false}
+      labeled={true}
+      labelMaxFontSizeMultiplier={labelMaxFontSizeMultiplier}
+      navigationState={createState(0, 3)}
+      onIndexChange={jest.fn()}
+      renderScene={({ route }) => route.title}
+    />
+  );
+
+  const label = getAllByText('Route: 0')[0];
+
+  expect(label.props.maxFontSizeMultiplier).toBe(labelMaxFontSizeMultiplier);
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Button.test.js b/node_modules/react-native-paper/src/components/__tests__/Button.test.js
new file mode 100644
index 0000000..dc7e4cc
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Button.test.js
@@ -0,0 +1,115 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import Button from '../Button.tsx';
+import { pink500 } from '../../styles/colors.tsx';
+
+const styles = StyleSheet.create({
+  flexing: {
+    flexDirection: 'row-reverse',
+  },
+});
+
+it('renders text button by default', () => {
+  const tree = renderer.create(<Button>Text Button</Button>).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders text button with mode', () => {
+  const tree = renderer
+    .create(<Button mode="text">Text Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders outlined button with mode', () => {
+  const tree = renderer
+    .create(<Button mode="outlined">Outlined Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders contained contained with mode', () => {
+  const tree = renderer
+    .create(<Button mode="contained">Contained Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders button with icon', () => {
+  const tree = renderer
+    .create(<Button icon="camera">Icon Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders button with icon in reverse order', () => {
+  const tree = renderer
+    .create(
+      <Button icon="chevron-right" contentStyle={styles.flexing}>
+        Right Icon
+      </Button>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders loading button', () => {
+  const tree = renderer
+    .create(<Button loading>Loading Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders disabled button', () => {
+  const tree = renderer
+    .create(<Button disabled>Disabled Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders button with color', () => {
+  const tree = renderer
+    .create(<Button color={pink500}>Custom Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders button with custom testID', () => {
+  const tree = renderer
+    .create(<Button testID={'custom:testID'}>Button with custom testID</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders button with an accessibility label', () => {
+  const tree = renderer
+    .create(
+      <Button accessibilityLabel={'label'}>
+        Button with accessibility label
+      </Button>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders button with an accessibility hint', () => {
+  const tree = renderer
+    .create(
+      <Button accessibilityHint={'hint'}>Button with accessibility hint</Button>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Card/Card.test.js b/node_modules/react-native-paper/src/components/__tests__/Card/Card.test.js
new file mode 100644
index 0000000..6e7e71a
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Card/Card.test.js
@@ -0,0 +1,26 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import { render } from 'react-native-testing-library';
+import Card from '../../Card/Card';
+
+describe('Card', () => {
+  it('renders an outlined card', () => {
+    const tree = renderer.create(<Card mode="outlined" />).toJSON();
+
+    expect(tree).toMatchSnapshot();
+  });
+
+  it('renders with a custom theme', () => {
+    const { getByA11yLabel } = render(
+      <Card
+        mode="outlined"
+        accessibilityLabel="card"
+        theme={{ colors: { surface: '#0000FF' } }}
+      />
+    );
+
+    expect(getByA11yLabel('card').props.style.backgroundColor).toEqual(
+      '#0000FF'
+    );
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Card/__snapshots__/Card.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/Card/__snapshots__/Card.test.js.snap
new file mode 100644
index 0000000..999596f
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Card/__snapshots__/Card.test.js.snap
@@ -0,0 +1,33 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Card renders an outlined card 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "borderColor": "rgba(0, 0, 0, 0.12)",
+      "borderRadius": 4,
+      "borderWidth": 1,
+      "elevation": 0,
+    }
+  }
+>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Object {
+        "flexGrow": 1,
+        "flexShrink": 1,
+      }
+    }
+  />
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/Checkbox/Checkbox.test.js b/node_modules/react-native-paper/src/components/__tests__/Checkbox/Checkbox.test.js
new file mode 100644
index 0000000..12b4e27
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Checkbox/Checkbox.test.js
@@ -0,0 +1,59 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import Checkbox from '../../Checkbox';
+
+it('renders checked Checkbox with onPress', () => {
+  const tree = renderer
+    .create(<Checkbox status="checked" onPress={() => {}} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders unchecked Checkbox with onPress', () => {
+  const tree = renderer
+    .create(<Checkbox status="unchecked" onPress={() => {}} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders indeterminate Checkbox', () => {
+  const tree = renderer
+    .create(<Checkbox status="indeterminate" onPress={() => {}} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders checked Checkbox with color', () => {
+  const tree = renderer
+    .create(<Checkbox status="checked" color="red" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders unchecked Checkbox with color', () => {
+  const tree = renderer
+    .create(<Checkbox status="checked" color="red" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders indeterminate Checkbox with color', () => {
+  const tree = renderer
+    .create(<Checkbox status="indeterminate" color="red" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders Checkbox with custom testID', () => {
+  const tree = renderer
+    .create(<Checkbox status="checked" testID={'custom:testID'} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Checkbox/CheckboxItem.test.js b/node_modules/react-native-paper/src/components/__tests__/Checkbox/CheckboxItem.test.js
new file mode 100644
index 0000000..88b6328
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Checkbox/CheckboxItem.test.js
@@ -0,0 +1,89 @@
+import * as React from 'react';
+import { Platform } from 'react-native';
+import renderer from 'react-test-renderer';
+import { render } from 'react-native-testing-library';
+import Checkbox from '../../Checkbox';
+
+it('renders unchecked', () => {
+  const tree = renderer
+    .create(<Checkbox.Item status="unchecked" label="Unchecked Button" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('can render the iOS checkbox on different platforms', () => {
+  Platform.OS = 'android';
+  const tree = renderer
+    .create(
+      <Checkbox.Item status="unchecked" label="iOS Checkbox" mode="ios" />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('can render the Android checkbox on different platforms', () => {
+  Platform.OS = 'ios';
+  const tree = renderer
+    .create(
+      <Checkbox.Item status="unchecked" label="iOS Checkbox" mode="android" />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('can render leading checkbox control', () => {
+  Platform.OS = 'ios';
+  const tree = renderer
+    .create(
+      <Checkbox.Item
+        label="Default with leading control"
+        status={'unchecked'}
+        mode="ios"
+        position="leading"
+      />
+    )
+    .toJSON();
+  expect(tree).toMatchSnapshot();
+});
+
+it('should have `accessibilityState={ checked: true }` when `status="checked"`', () => {
+  const { getByA11yState } = render(
+    <Checkbox.Item status="checked" label="Checked Button" />
+  );
+
+  const element = getByA11yState({ checked: true });
+  expect(element).toBeTruthy();
+});
+
+it('should have `accessibilityState={ checked: false }` when `status="unchecked"', () => {
+  const { getByA11yState } = render(
+    <Checkbox.Item status="unchecked" label="Unchecked Button" />
+  );
+
+  const element = getByA11yState({ checked: false });
+  expect(element).toBeTruthy();
+});
+
+it('should have `accessibilityState={ checked: false }` when `status="indeterminate"', () => {
+  const { getByA11yState } = render(
+    <Checkbox.Item status="indeterminate" label="Indeterminate Button" />
+  );
+
+  const element = getByA11yState({ checked: false });
+  expect(element).toBeTruthy();
+});
+
+it('disables the row when the prop disabled is true', () => {
+  const { getByA11yLabel } = render(
+    <Checkbox.Item accessibilityLabel="some checkbox" disabled />
+  );
+
+  const touchable = getByA11yLabel('some checkbox');
+
+  expect(touchable.props).toMatchObject({
+    accessibilityState: { disabled: true },
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Checkbox/__snapshots__/Checkbox.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/Checkbox/__snapshots__/Checkbox.test.js.snap
new file mode 100644
index 0000000..ca4d57a
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Checkbox/__snapshots__/Checkbox.test.js.snap
@@ -0,0 +1,436 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders Checkbox with custom testID 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": true,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+  testID="custom:testID"
+>
+  <View
+    style={
+      Object {
+        "opacity": 1,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders checked Checkbox with color 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": true,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 1,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "red",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders checked Checkbox with onPress 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": true,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 1,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders indeterminate Checkbox 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 1,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders indeterminate Checkbox with color 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 1,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "red",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders unchecked Checkbox with color 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": true,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 1,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "red",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders unchecked Checkbox with onPress 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 0,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/Checkbox/__snapshots__/CheckboxItem.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/Checkbox/__snapshots__/CheckboxItem.test.js.snap
new file mode 100644
index 0000000..e5b3832
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Checkbox/__snapshots__/CheckboxItem.test.js.snap
@@ -0,0 +1,567 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`can render leading checkbox control 1`] = `
+<View
+  accessibilityLabel="Default with leading control"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    importantForAccessibility="no-hide-descendants"
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="checkbox"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "padding": 6,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "opacity": 0,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#03dac4",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "right",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Default with leading control
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`can render the Android checkbox on different platforms 1`] = `
+<View
+  accessibilityLabel="iOS Checkbox"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    importantForAccessibility="no-hide-descendants"
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "left",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      iOS Checkbox
+    </Text>
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="checkbox"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "padding": 6,
+            "width": 36,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "transform": Array [
+              Object {
+                "scale": 1,
+              },
+            ],
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+        <View
+          style={
+            Array [
+              Object {
+                "bottom": 0,
+                "left": 0,
+                "position": "absolute",
+                "right": 0,
+                "top": 0,
+              },
+              Object {
+                "alignItems": "center",
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <View
+            style={
+              Object {
+                "borderColor": "rgba(0, 0, 0, 0.54)",
+                "borderWidth": 0,
+                "height": 14,
+                "width": 14,
+              }
+            }
+          />
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`can render the iOS checkbox on different platforms 1`] = `
+<View
+  accessibilityLabel="iOS Checkbox"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    importantForAccessibility="no-hide-descendants"
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "left",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      iOS Checkbox
+    </Text>
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="checkbox"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "padding": 6,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "opacity": 0,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#03dac4",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders unchecked 1`] = `
+<View
+  accessibilityLabel="Unchecked Button"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    importantForAccessibility="no-hide-descendants"
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "left",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Unchecked Button
+    </Text>
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="checkbox"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "padding": 6,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "opacity": 0,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#03dac4",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/Chip.test.js b/node_modules/react-native-paper/src/components/__tests__/Chip.test.js
new file mode 100644
index 0000000..584dedd
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Chip.test.js
@@ -0,0 +1,61 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import Chip from '../Chip.tsx';
+
+it('renders chip with onPress', () => {
+  const tree = renderer
+    .create(<Chip onPress={() => {}}>Example Chip</Chip>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders chip with icon', () => {
+  const tree = renderer
+    .create(<Chip icon="information">Example Chip</Chip>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders chip with close button', () => {
+  const tree = renderer
+    .create(
+      <Chip icon="information" onClose={() => {}}>
+        Example Chip
+      </Chip>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders chip with custom close button', () => {
+  const tree = renderer
+    .create(
+      <Chip icon="information" onClose={() => {}} closeIcon="arrow-down">
+        Example Chip
+      </Chip>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders outlined disabled chip', () => {
+  const tree = renderer
+    .create(
+      <Chip mode="outlined" disabled>
+        Example Chip
+      </Chip>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders selected chip', () => {
+  const tree = renderer.create(<Chip selected>Example Chip</Chip>).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/DataTable.test.js b/node_modules/react-native-paper/src/components/__tests__/DataTable.test.js
new file mode 100644
index 0000000..010739a
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/DataTable.test.js
@@ -0,0 +1,143 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import { render } from 'react-native-testing-library';
+import DataTable from '../DataTable/DataTable.tsx';
+
+it('renders data table header', () => {
+  const tree = renderer
+    .create(
+      <DataTable.Header>
+        <DataTable.Title>Dessert</DataTable.Title>
+        <DataTable.Title>Calories</DataTable.Title>
+      </DataTable.Header>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders data table title with sort icon', () => {
+  const tree = renderer
+    .create(
+      <DataTable.Title sortDirection="descending">Dessert</DataTable.Title>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders right aligned data table title', () => {
+  const tree = renderer
+    .create(<DataTable.Title numeric>Calories</DataTable.Title>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders data table title with press handler', () => {
+  const tree = renderer
+    .create(
+      <DataTable.Title sortDirection="descending" onPress={() => {}}>
+        Dessert
+      </DataTable.Title>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders data table cell', () => {
+  const tree = renderer
+    .create(<DataTable.Cell>Cupcake</DataTable.Cell>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders right aligned data table cell', () => {
+  const tree = renderer
+    .create(<DataTable.Cell numeric>356</DataTable.Cell>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders data table pagination', () => {
+  const tree = renderer
+    .create(
+      <DataTable.Pagination
+        page={3}
+        numberOfPages={15}
+        onPageChange={() => {}}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders data table pagination with label', () => {
+  const tree = renderer
+    .create(
+      <DataTable.Pagination
+        page={3}
+        numberOfPages={15}
+        onPageChange={() => {}}
+        label="11-20 of 150"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders data table pagination with fast-forward buttons', () => {
+  const { getByA11yLabel, toJSON } = render(
+    <DataTable.Pagination
+      page={3}
+      numberOfPages={15}
+      onPageChange={() => {}}
+      label="11-20 of 150"
+      showFastPaginationControls
+    />
+  );
+
+  expect(() => getByA11yLabel('page-first')).not.toThrow();
+  expect(() => getByA11yLabel('page-last')).not.toThrow();
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('renders data table pagination without options select', () => {
+  const { getByA11yLabel } = render(
+    <DataTable.Pagination
+      page={3}
+      numberOfPages={15}
+      onPageChange={() => {}}
+      label="11-20 of 150"
+      showFastPaginationControls
+    />
+  );
+
+  expect(() => getByA11yLabel('Options Select')).toThrow();
+});
+
+it('renders data table pagination with options select', () => {
+  const { getByA11yLabel, toJSON } = render(
+    <DataTable.Pagination
+      page={3}
+      numberOfPages={15}
+      onPageChange={() => {}}
+      label="11-20 of 150"
+      showFastPaginationControls
+      numberOfItemsPerPageList={[2, 4, 6]}
+      numberOfItemsPerPage={2}
+      onItemsPerPageChange={() => {}}
+      selectPageDropdownLabel={'Rows per page'}
+    />
+  );
+
+  expect(() => getByA11yLabel('Options Select')).not.toThrow();
+  expect(() => getByA11yLabel('selectPageDropdownLabel')).not.toThrow();
+
+  expect(toJSON()).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Drawer/DrawerSection.test.js b/node_modules/react-native-paper/src/components/__tests__/Drawer/DrawerSection.test.js
new file mode 100644
index 0000000..a61e531
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Drawer/DrawerSection.test.js
@@ -0,0 +1,18 @@
+import React from 'react';
+import { View } from 'react-native';
+import renderer from 'react-test-renderer';
+import DrawerSection from '../../Drawer/DrawerSection.tsx';
+
+describe('DrawerSection', () => {
+  it('renders properly', () => {
+    const tree = renderer
+      .create(
+        <DrawerSection>
+          <View />
+        </DrawerSection>
+      )
+      .toJSON();
+
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Drawer/__snapshots__/DrawerSection.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/Drawer/__snapshots__/DrawerSection.test.js.snap
new file mode 100644
index 0000000..98bb911
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Drawer/__snapshots__/DrawerSection.test.js.snap
@@ -0,0 +1,30 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`DrawerSection renders properly 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "marginBottom": 4,
+      },
+      undefined,
+    ]
+  }
+>
+  <View />
+  <View
+    style={
+      Array [
+        Object {
+          "backgroundColor": "rgba(0, 0, 0, 0.12)",
+          "height": 0.5,
+        },
+        undefined,
+        Object {
+          "marginTop": 4,
+        },
+      ]
+    }
+  />
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/DrawerItem.test.js b/node_modules/react-native-paper/src/components/__tests__/DrawerItem.test.js
new file mode 100644
index 0000000..99ec51f
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/DrawerItem.test.js
@@ -0,0 +1,27 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import DrawerItem from '../Drawer/DrawerItem.tsx';
+
+it('renders basic DrawerItem', () => {
+  const tree = renderer
+    .create(<DrawerItem onPress={() => {}} label="Example item" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders DrawerItem with icon', () => {
+  const tree = renderer
+    .create(<DrawerItem icon="information" label="Example item" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders active DrawerItem', () => {
+  const tree = renderer
+    .create(<DrawerItem icon="information" active label="Example item" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/FAB.test.js b/node_modules/react-native-paper/src/components/__tests__/FAB.test.js
new file mode 100644
index 0000000..58d3f3a
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/FAB.test.js
@@ -0,0 +1,68 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import FAB from '../FAB';
+
+it('renders normal FAB', () => {
+  const tree = renderer.create(<FAB onPress={() => {}} icon="plus" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders small FAB', () => {
+  const tree = renderer
+    .create(<FAB small onPress={() => {}} icon="plus" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders extended FAB', () => {
+  const tree = renderer
+    .create(<FAB onPress={() => {}} icon="plus" label="Add items" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders loading FAB', () => {
+  const tree = renderer
+    .create(<FAB onPress={() => {}} icon="plus" loading={true} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders disabled FAB', () => {
+  const tree = renderer
+    .create(<FAB onPress={() => {}} icon="plus" disabled />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders custom color for the icon and label of the FAB', () => {
+  const tree = renderer
+    .create(<FAB onPress={() => {}} icon="plus" color="#AA0114" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders not visible FAB', () => {
+  const { update, toJSON } = renderer.create(
+    <FAB onPress={() => {}} icon="plus" />
+  );
+  update(<FAB onPress={() => {}} icon="plus" visible={false} />);
+
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('renders visible FAB', () => {
+  const { update, toJSON } = renderer.create(
+    <FAB onPress={() => {}} icon="plus" visible={false} />
+  );
+
+  update(<FAB onPress={() => {}} icon="plus" visible={true} />);
+
+  expect(toJSON()).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/IconButton.test.js b/node_modules/react-native-paper/src/components/__tests__/IconButton.test.js
new file mode 100644
index 0000000..b1ae823
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/IconButton.test.js
@@ -0,0 +1,36 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import IconButton from '../IconButton.tsx';
+import { pink500 } from '../../styles/colors.tsx';
+
+it('renders icon button by default', () => {
+  const tree = renderer.create(<IconButton icon="camera" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders icon button with color', () => {
+  const tree = renderer
+    .create(<IconButton icon="camera" color={pink500} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders icon button with size', () => {
+  const tree = renderer.create(<IconButton icon="camera" size={30} />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders disabled icon button', () => {
+  const tree = renderer.create(<IconButton icon="camera" disabled />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders icon change animated', () => {
+  const tree = renderer.create(<IconButton icon="camera" animated />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/ListAccordion.test.js b/node_modules/react-native-paper/src/components/__tests__/ListAccordion.test.js
new file mode 100644
index 0000000..c72e396
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/ListAccordion.test.js
@@ -0,0 +1,90 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import ListAccordion from '../List/ListAccordion.tsx';
+import ListItem from '../List/ListItem.tsx';
+import ListIcon from '../List/ListIcon.tsx';
+import { red500 } from '../../styles/colors';
+
+const styles = StyleSheet.create({
+  coloring: {
+    color: red500,
+  },
+});
+
+it('renders list accordion with children', () => {
+  const tree = renderer
+    .create(
+      <ListAccordion
+        left={(props) => <ListIcon {...props} icon="folder" />}
+        title="Expandable list item"
+      >
+        <ListItem title="First Item" />
+      </ListAccordion>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders multiline list accordion', () => {
+  const tree = renderer
+    .create(
+      <ListAccordion
+        title="Expandable list item"
+        description="Describes the expandable list item"
+      >
+        <ListItem title="List item 1" />
+      </ListAccordion>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list accordion with left items', () => {
+  const tree = renderer
+    .create(
+      <ListAccordion
+        left={(props) => <ListIcon {...props} icon="star" />}
+        title="Accordion item 1"
+      >
+        <ListItem
+          left={(props) => <ListIcon {...props} icon="thumb-up" />}
+          title="List item 1"
+        />
+      </ListAccordion>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders expanded accordion', () => {
+  const tree = renderer
+    .create(
+      <ListAccordion title="Accordion item 1" expanded>
+        <ListItem title="List item 1" />
+      </ListAccordion>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list accordion with custom title and description styles', () => {
+  const tree = renderer
+    .create(
+      <ListAccordion
+        title="Accordion item 1"
+        description="Describes the expandable list item"
+        titleStyle={styles.coloring}
+        descriptionStyle={styles.coloring}
+      >
+        <ListItem title="List item 1" />
+      </ListAccordion>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/ListItem.test.js b/node_modules/react-native-paper/src/components/__tests__/ListItem.test.js
new file mode 100644
index 0000000..e924336
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/ListItem.test.js
@@ -0,0 +1,122 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import { Text, View } from 'react-native';
+import ListItem from '../List/ListItem.tsx';
+import ListIcon from '../List/ListIcon.tsx';
+import Chip from '../Chip';
+import { red500 } from '../../styles/colors';
+
+const styles = StyleSheet.create({
+  title: {
+    fontSize: 20,
+  },
+  description: {
+    color: red500,
+  },
+});
+
+it('renders list item with title and description', () => {
+  const tree = renderer
+    .create(
+      <ListItem title="First Item" description="Description for first item" />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list item with left item', () => {
+  const tree = renderer
+    .create(
+      <ListItem
+        title="First Item"
+        left={(props) => <ListIcon {...props} icon="folder" />}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list item with right item', () => {
+  const tree = renderer
+    .create(<ListItem title="First Item" right={() => <Text>GG</Text>} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list item with left and right items', () => {
+  const tree = renderer
+    .create(
+      <ListItem
+        title="First Item"
+        description="Item description"
+        left={() => <Text>GG</Text>}
+        right={(props) => <ListIcon {...props} icon="folder" />}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list item with custom title and description styles', () => {
+  const tree = renderer
+    .create(
+      <ListItem
+        title="First Item"
+        description="Item description"
+        titleStyle={styles.title}
+        descriptionStyle={styles.description}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list item with custom description', () => {
+  const tree = renderer
+    .create(
+      <ListItem
+        title="List Item with custom description"
+        description={({ ellipsizeMode, color: descriptionColor, fontSize }) => (
+          <View>
+            <Text
+              numberOfLines={2}
+              ellipsizeMode={ellipsizeMode}
+              style={{ color: descriptionColor, fontSize }}
+            >
+              React Native Paper is a high-quality, standard-compliant Design
+              Design library that has you covered in all major use-cases.
+            </Text>
+            <View>
+              <Chip icon="file-pdf" onPress={() => {}}>
+                DOCS.pdf
+              </Chip>
+            </View>
+          </View>
+        )}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders with a description with typeof number', () => {
+  const tree = renderer
+    .create(
+      <ListItem
+        title="First Item"
+        description={123}
+        titleStyle={styles.title}
+        descriptionStyle={styles.description}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/ListSection.test.js b/node_modules/react-native-paper/src/components/__tests__/ListSection.test.js
new file mode 100644
index 0000000..e2cc833
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/ListSection.test.js
@@ -0,0 +1,72 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import ListSection from '../List/ListSection.tsx';
+import ListItem from '../List/ListItem.tsx';
+import ListIcon from '../List/ListIcon.tsx';
+import ListSubheader from '../List/ListSubheader.tsx';
+import { red500 } from '../../styles/colors';
+
+const styles = StyleSheet.create({
+  itemColor: {
+    color: red500,
+  },
+});
+
+it('renders list section without subheader', () => {
+  const tree = renderer
+    .create(
+      <ListSection>
+        <ListItem
+          title="First Item"
+          left={(props) => <ListIcon {...props} icon="folder" />}
+        />
+        <ListItem
+          title="Second Item"
+          left={(props) => <ListIcon {...props} icon="folder" />}
+        />
+      </ListSection>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list section with subheader', () => {
+  const tree = renderer
+    .create(
+      <ListSection>
+        <ListSubheader>Some title</ListSubheader>
+        <ListItem
+          title="First Item"
+          left={(props) => <ListIcon {...props} icon="folder" />}
+        />
+        <ListItem
+          title="Second Item"
+          left={(props) => <ListIcon {...props} icon="folder" />}
+        />
+      </ListSection>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list section with custom title style', () => {
+  const tree = renderer
+    .create(
+      <ListSection title="Some title" titleStyle={styles.itemColor}>
+        <ListItem
+          title="First Item"
+          left={(props) => <ListIcon {...props} icon="folder" />}
+        />
+        <ListItem
+          title="Second Item"
+          left={(props) => <ListIcon {...props} icon="folder" />}
+        />
+      </ListSection>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Menu.test.js b/node_modules/react-native-paper/src/components/__tests__/Menu.test.js
new file mode 100644
index 0000000..f264ae0
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Menu.test.js
@@ -0,0 +1,64 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import Menu from '../Menu/Menu.tsx';
+import Button from '../Button.tsx';
+
+const styles = StyleSheet.create({
+  contentStyle: {
+    borderTopLeftRadius: 0,
+    borderTopRightRadius: 0,
+  },
+});
+
+it('renders visible menu', () => {
+  const tree = renderer
+    .create(
+      <Menu
+        visible
+        onDismiss={jest.fn()}
+        anchor={<Button mode="outlined">Open menu</Button>}
+      >
+        <Menu.Item onPress={jest.fn()} title="Undo" />
+        <Menu.Item onPress={jest.fn()} title="Redo" />
+      </Menu>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders not visible menu', () => {
+  const tree = renderer
+    .create(
+      <Menu
+        visible={false}
+        onDismiss={jest.fn()}
+        anchor={<Button mode="outlined">Open menu</Button>}
+      >
+        <Menu.Item onPress={jest.fn()} title="Undo" />
+        <Menu.Item onPress={jest.fn()} title="Redo" />
+      </Menu>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders menu with content styles', () => {
+  const tree = renderer
+    .create(
+      <Menu
+        visible
+        onDismiss={jest.fn()}
+        anchor={<Button mode="outlined">Open menu</Button>}
+        contentStyle={styles.contentStyle}
+      >
+        <Menu.Item onPress={jest.fn()} title="Undo" />
+        <Menu.Item onPress={jest.fn()} title="Redo" />
+      </Menu>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Portal.test.js b/node_modules/react-native-paper/src/components/__tests__/Portal.test.js
new file mode 100644
index 0000000..b1f067e
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Portal.test.js
@@ -0,0 +1,21 @@
+import * as React from 'react';
+import { render, waitForElement } from 'react-native-testing-library';
+import { Text } from 'react-native';
+import Portal from '../Portal/Portal.tsx';
+
+jest.useRealTimers();
+
+it('renders portal with siblings', async () => {
+  const { toJSON, getByTestId } = render(
+    <Portal.Host>
+      <Text>Outside content</Text>
+      <Portal>
+        <Text testID="content">Portal content</Text>
+      </Portal>
+    </Portal.Host>
+  );
+
+  await waitForElement(() => getByTestId('content'));
+
+  expect(toJSON()).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/ProgressBar.test.js b/node_modules/react-native-paper/src/components/__tests__/ProgressBar.test.js
new file mode 100644
index 0000000..eabe9cb
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/ProgressBar.test.js
@@ -0,0 +1,48 @@
+import * as React from 'react';
+import { View } from 'react-native';
+import { act } from 'react-native-testing-library';
+import renderer from 'react-test-renderer';
+import ProgressBar from '../ProgressBar.tsx';
+
+const layoutEvent = {
+  nativeEvent: {
+    layout: {
+      width: 100,
+    },
+  },
+};
+
+it('renders progress bar with specific progress', () => {
+  const tree = renderer.create(<ProgressBar progress={0.2} />);
+  act(() => {
+    tree.root.findByType(View).props.onLayout(layoutEvent);
+  });
+
+  expect(tree.toJSON()).toMatchSnapshot();
+});
+
+it('renders hidden progress bar', () => {
+  const tree = renderer.create(<ProgressBar progress={0.2} visible={false} />);
+  act(() => {
+    tree.root.findByType(View).props.onLayout(layoutEvent);
+  });
+
+  expect(tree.toJSON()).toMatchSnapshot();
+});
+
+it('renders colored progress bar', () => {
+  const tree = renderer.create(<ProgressBar progress={0.2} color="red" />);
+  act(() => {
+    tree.root.findByType(View).props.onLayout(layoutEvent);
+  });
+
+  expect(tree.toJSON()).toMatchSnapshot();
+});
+
+it('renders indeterminate progress bar', () => {
+  const tree = renderer.create(<ProgressBar indeterminate />);
+  act(() => {
+    tree.root.findByType(View).props.onLayout(layoutEvent);
+  });
+  expect(tree.toJSON()).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButton.test.js b/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButton.test.js
new file mode 100644
index 0000000..bd7f435
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButton.test.js
@@ -0,0 +1,72 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import { RadioButtonContext } from '../../RadioButton/RadioButtonGroup';
+import RadioButton from '../../RadioButton';
+
+describe('RadioButton', () => {
+  afterEach(() => jest.resetModules());
+
+  describe('on default platform', () => {
+    beforeAll(() => {
+      jest.mock('react-native', () => {
+        const RN = jest.requireActual('react-native');
+
+        RN.Platform = () => ({
+          select: (objs) => objs.default,
+        });
+
+        return RN;
+      });
+    });
+
+    it('renders properly', () => {
+      const tree = renderer.create(<RadioButton value="first" />).toJSON();
+
+      expect(tree).toMatchSnapshot();
+    });
+  });
+
+  describe('on ios platform', () => {
+    beforeAll(() => {
+      jest.mock('react-native', () => {
+        const RN = jest.requireActual('react-native');
+
+        RN.Platform = () => ({
+          select: (objs) => objs.ios,
+        });
+
+        return RN;
+      });
+    });
+
+    it('renders properly', () => {
+      const tree = renderer.create(<RadioButton value="first" />).toJSON();
+
+      expect(tree).toMatchSnapshot();
+    });
+  });
+
+  describe('when RadioButton is wrapped by RadioButtonContext.Provider', () => {
+    it('renders properly', () => {
+      const tree = renderer
+        .create(
+          <RadioButtonContext.Provider value="first" onValueChange={() => {}}>
+            <RadioButton value="first" />
+          </RadioButtonContext.Provider>
+        )
+        .toJSON();
+
+      expect(tree).toMatchSnapshot();
+    });
+  });
+
+  describe('RadioButton with custom testID', () => {
+    it('renders properly', () => {
+      const tree = renderer
+        .create(<RadioButton value="first" testID={'custom:testID'} />)
+        .toJSON();
+
+      expect(tree).toMatchSnapshot();
+    });
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButtonGroup.test.js b/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButtonGroup.test.js
new file mode 100644
index 0000000..b204f43
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButtonGroup.test.js
@@ -0,0 +1,17 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import RadioButton from '../../RadioButton';
+
+describe('RadioButtonGroup', () => {
+  it('renders properly', () => {
+    const tree = renderer
+      .create(
+        <RadioButton.Group value="first" onValueChange={() => {}}>
+          <RadioButton value="first" />
+        </RadioButton.Group>
+      )
+      .toJSON();
+
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButtonItem.test.js b/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButtonItem.test.js
new file mode 100644
index 0000000..e1e4263
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButtonItem.test.js
@@ -0,0 +1,66 @@
+import * as React from 'react';
+import { Platform } from 'react-native';
+import renderer from 'react-test-renderer';
+import RadioButton from '../../RadioButton';
+
+it('renders unchecked', () => {
+  const tree = renderer
+    .create(
+      <RadioButton.Item
+        status="unchecked"
+        label="Unchecked Button"
+        value="unchecked"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('can render the iOS radio button on different platforms', () => {
+  Platform.OS = 'android';
+  const tree = renderer
+    .create(
+      <RadioButton.Item
+        status="unchecked"
+        label="iOS Radio button"
+        mode="ios"
+        value="ios"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('can render the Android radio button on different platforms', () => {
+  Platform.OS = 'ios';
+  const tree = renderer
+    .create(
+      <RadioButton.Item
+        status="unchecked"
+        label="iOS Checkbox"
+        mode="android"
+        value="android"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('can render leading radio button control', () => {
+  Platform.OS = 'ios';
+  const tree = renderer
+    .create(
+      <RadioButton.Item
+        label="Default with leading control"
+        status={'unchecked'}
+        value="iOS"
+        position="leading"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButton.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButton.test.js.snap
new file mode 100644
index 0000000..cbd500b
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButton.test.js.snap
@@ -0,0 +1,250 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`RadioButton RadioButton with custom testID renders properly 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="radio"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+  testID="custom:testID"
+>
+  <View
+    style={
+      Object {
+        "opacity": 0,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`RadioButton on default platform renders properly 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="radio"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 0,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`RadioButton on ios platform renders properly 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="radio"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 0,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`RadioButton when RadioButton is wrapped by RadioButtonContext.Provider renders properly 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="radio"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 0,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButtonGroup.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButtonGroup.test.js.snap
new file mode 100644
index 0000000..dcfb1ad
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButtonGroup.test.js.snap
@@ -0,0 +1,67 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`RadioButtonGroup renders properly 1`] = `
+<View
+  accessibilityRole="radiogroup"
+>
+  <View
+    accessibilityLiveRegion="polite"
+    accessibilityRole="radio"
+    accessibilityState={
+      Object {
+        "checked": true,
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "padding": 6,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "opacity": 1,
+        }
+      }
+    >
+      <Text
+        accessibilityElementsHidden={true}
+        allowFontScaling={false}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "#03dac4",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButtonItem.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButtonItem.test.js.snap
new file mode 100644
index 0000000..3980e16
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButtonItem.test.js.snap
@@ -0,0 +1,480 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`can render leading radio button control 1`] = `
+<View
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="radio"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "padding": 6,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "opacity": 0,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#03dac4",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "right",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Default with leading control
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`can render the Android radio button on different platforms 1`] = `
+<View
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "left",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      iOS Checkbox
+    </Text>
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="radio"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "borderColor": "rgba(0, 0, 0, 0.54)",
+            "borderRadius": 10,
+            "borderWidth": 2,
+            "height": 20,
+            "margin": 8,
+            "width": 20,
+          }
+        }
+      />
+    </View>
+  </View>
+</View>
+`;
+
+exports[`can render the iOS radio button on different platforms 1`] = `
+<View
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "left",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      iOS Radio button
+    </Text>
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="radio"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "padding": 6,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "opacity": 0,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#03dac4",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders unchecked 1`] = `
+<View
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "left",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Unchecked Button
+    </Text>
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="radio"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "padding": 6,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "opacity": 0,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#03dac4",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/Searchbar.test.js b/node_modules/react-native-paper/src/components/__tests__/Searchbar.test.js
new file mode 100644
index 0000000..1d17e51
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Searchbar.test.js
@@ -0,0 +1,17 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import Searchbar from '../Searchbar.tsx';
+
+it('renders with placeholder', () => {
+  const tree = renderer.create(<Searchbar placeholder="Search" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders with text', () => {
+  const tree = renderer
+    .create(<Searchbar placeholder="Search" value="query" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Snackbar.test.js b/node_modules/react-native-paper/src/components/__tests__/Snackbar.test.js
new file mode 100644
index 0000000..0b66ac5
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Snackbar.test.js
@@ -0,0 +1,70 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import { Text } from 'react-native';
+import Snackbar from '../Snackbar.tsx';
+
+// Make sure any animation finishes before checking the snapshot results
+jest.mock('react-native', () => {
+  const RN = jest.requireActual('react-native');
+
+  RN.Animated.timing = (value, config) => ({
+    start: (callback) => {
+      value.setValue(config.toValue);
+      callback && callback({ finished: true });
+    },
+  });
+
+  return RN;
+});
+
+it('renders snackbar with content', () => {
+  const tree = renderer
+    .create(
+      <Snackbar visible onDismiss={jest.fn()}>
+        Snackbar content
+      </Snackbar>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders not visible snackbar with content wrapper but no actual content', () => {
+  const tree = renderer
+    .create(
+      <Snackbar visible={false} onDismiss={jest.fn()}>
+        Snackbar content
+      </Snackbar>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders snackbar with Text as a child', () => {
+  const tree = renderer
+    .create(
+      <Snackbar visible onDismiss={jest.fn()}>
+        <Text>Snackbar content</Text>
+      </Snackbar>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders snackbar with action button', () => {
+  const tree = renderer
+    .create(
+      <Snackbar
+        visible
+        onDismiss={() => {}}
+        action={{ label: 'Undo', onPress: jest.fn() }}
+      >
+        Snackbar content
+      </Snackbar>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Switch.test.js b/node_modules/react-native-paper/src/components/__tests__/Switch.test.js
new file mode 100644
index 0000000..92910cd
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Switch.test.js
@@ -0,0 +1,28 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import Switch from '../Switch.tsx';
+import { pink500 } from '../../styles/colors.tsx';
+
+it('renders on switch', () => {
+  const tree = renderer.create(<Switch value />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders off switch', () => {
+  const tree = renderer.create(<Switch value={false} />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders disabled switch', () => {
+  const tree = renderer.create(<Switch disabled value />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders switch with color', () => {
+  const tree = renderer.create(<Switch value color={pink500} />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/TextInput.test.js b/node_modules/react-native-paper/src/components/__tests__/TextInput.test.js
new file mode 100644
index 0000000..a1b04c6
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/TextInput.test.js
@@ -0,0 +1,230 @@
+import * as React from 'react';
+import { StyleSheet, Text, Platform } from 'react-native';
+import { fireEvent, render } from 'react-native-testing-library';
+import TextInput from '../TextInput/TextInput';
+import { red500 } from '../../styles/colors';
+
+const style = StyleSheet.create({
+  inputStyle: {
+    color: red500,
+  },
+  centered: {
+    textAlign: 'center',
+  },
+  height: {
+    height: 100,
+  },
+});
+
+const affixTextValue = '/100';
+it('correctly renders left-side icon adornment, and right-side affix adornment', () => {
+  const { getByText, getByTestId, toJSON } = render(
+    <TextInput
+      label="Flat input"
+      placeholder="Type something"
+      value={'Some test value'}
+      onChangeText={(text) => this.setState({ text })}
+      left={
+        <TextInput.Icon
+          name="heart"
+          onPress={() => {
+            console.log('!@# press left');
+          }}
+        />
+      }
+      right={
+        <TextInput.Affix text={affixTextValue} textStyle={style.inputStyle} />
+      }
+    />
+  );
+  expect(() => getByText(affixTextValue)).not.toThrow();
+  expect(() => getByTestId('left-icon-adornment')).not.toThrow();
+  expect(() => getByTestId('right-affix-adornment')).not.toThrow();
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('correctly renders left-side icon adornment, and right-side affix adornment ', () => {
+  const { getByText, getByTestId, toJSON } = render(
+    <TextInput
+      label="Flat input"
+      placeholder="Type something"
+      value={'Some test value'}
+      onChangeText={(text) => this.setState({ text })}
+      left={
+        <TextInput.Affix text={affixTextValue} textStyle={style.inputStyle} />
+      }
+      right={
+        <TextInput.Icon
+          name="heart"
+          onPress={() => {
+            console.log('!@# press left');
+          }}
+        />
+      }
+    />
+  );
+  expect(() => getByText(affixTextValue)).not.toThrow();
+  expect(() => getByTestId('right-icon-adornment')).not.toThrow();
+  expect(() => getByTestId('left-affix-adornment')).not.toThrow();
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('correctly applies default textAlign based on default RTL', () => {
+  const { toJSON } = render(
+    <TextInput
+      label="Flat input"
+      placeholder="Type something"
+      value={'Some test value'}
+    />
+  );
+
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('correctly applies textAlign center', () => {
+  const { toJSON } = render(
+    <TextInput
+      label="Flat input"
+      placeholder="Type something"
+      value={'Some test value'}
+      style={style.centered}
+    />
+  );
+
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('correctly applies height to multiline Outline TextInput', () => {
+  const { toJSON } = render(
+    <TextInput
+      mode="outlined"
+      label="Outline Input"
+      placeholder="Type Something"
+      value={'Some test value'}
+      style={style.height}
+      multiline
+    />
+  );
+
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('correctly applies error state Outline TextInput', () => {
+  const { getByTestId } = render(
+    <TextInput
+      mode="outlined"
+      label="Outline Input with error"
+      placeholder="Type Something"
+      value={'Some test value'}
+      error
+    />
+  );
+
+  const outline = getByTestId('text-input-outline');
+  expect(outline.props.style).toEqual(
+    expect.arrayContaining([expect.objectContaining({ borderWidth: 1 })])
+  );
+});
+
+it('correctly applies focused state Outline TextInput', () => {
+  const { getByTestId } = render(
+    <TextInput
+      mode="outlined"
+      label="Outline Input with error"
+      placeholder="Type Something"
+      value={'Some test value'}
+      error
+    />
+  );
+
+  const outline = getByTestId('text-input-outline');
+  expect(outline.props.style).toEqual(
+    expect.arrayContaining([expect.objectContaining({ borderWidth: 1 })])
+  );
+
+  fireEvent(getByTestId('text-input-outlined'), 'focus');
+
+  expect(outline.props.style).toEqual(
+    expect.arrayContaining([expect.objectContaining({ borderWidth: 2 })])
+  );
+});
+
+it('contains patch spacing for flat input when ios and multiline', () => {
+  Platform.OS = 'ios';
+  const { getByTestId } = render(
+    <TextInput
+      label="Flat input"
+      multiline
+      placeholder="Type something"
+      value={'Some test value'}
+      onChangeText={(text) => this.setState({ text })}
+    />
+  );
+  expect(() => getByTestId('patch-container')).not.toThrow();
+});
+
+it('correctly applies a component as the text label', () => {
+  const { toJSON } = render(
+    <TextInput
+      label={<Text style={style.inputStyle}>Flat input</Text>}
+      placeholder="Type something"
+      value={'Some test value'}
+    />
+  );
+
+  expect(toJSON()).toMatchSnapshot();
+});
+
+describe('maxFontSizeMultiplier', () => {
+  const createInput = (type, maxFontSizeMultiplier) => {
+    return (
+      <TextInput mode={type} maxFontSizeMultiplier={maxFontSizeMultiplier} />
+    );
+  };
+
+  it('should have default value in flat input', () => {
+    const { getByTestId } = render(createInput('flat'));
+
+    expect(getByTestId('text-input-flat').props.maxFontSizeMultiplier).toBe(
+      1.5
+    );
+  });
+
+  it('should have default value in outlined input', () => {
+    const { getByTestId } = render(createInput('outlined'));
+
+    expect(getByTestId('text-input-outlined').props.maxFontSizeMultiplier).toBe(
+      1.5
+    );
+  });
+
+  it('should have correct passed value in flat input', () => {
+    const { getByTestId } = render(createInput('flat', 2));
+
+    expect(getByTestId('text-input-flat').props.maxFontSizeMultiplier).toBe(2);
+  });
+
+  it('should have correct passed value in outlined input', () => {
+    const { getByTestId } = render(createInput('outlined', 2));
+
+    expect(getByTestId('text-input-outlined').props.maxFontSizeMultiplier).toBe(
+      2
+    );
+  });
+
+  it('should have passed null value in flat input', () => {
+    const { getByTestId } = render(createInput('flat', null));
+
+    expect(getByTestId('text-input-flat').props.maxFontSizeMultiplier).toBe(
+      null
+    );
+  });
+
+  it('should have passed null value in outlined input', () => {
+    const { getByTestId } = render(createInput('outlined', null));
+
+    expect(getByTestId('text-input-outlined').props.maxFontSizeMultiplier).toBe(
+      null
+    );
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/ToggleButton.test.js b/node_modules/react-native-paper/src/components/__tests__/ToggleButton.test.js
new file mode 100644
index 0000000..5506006
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/ToggleButton.test.js
@@ -0,0 +1,42 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import ToggleButton from '../ToggleButton';
+
+it('renders toggle button', () => {
+  const tree = renderer
+    .create(<ToggleButton status="checked" onPress={() => {}} icon="heart" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders disabled toggle button', () => {
+  const tree = renderer
+    .create(
+      <ToggleButton
+        disabled
+        value="toggle"
+        status="checked"
+        onValueChange={() => {}}
+        icon="heart"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders unchecked toggle button', () => {
+  const tree = renderer
+    .create(
+      <ToggleButton
+        disabled
+        status="unchecked"
+        onValueChange={() => {}}
+        icon="heart"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Typography/Caption.test.js b/node_modules/react-native-paper/src/components/__tests__/Typography/Caption.test.js
new file mode 100644
index 0000000..2dbe99c
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Typography/Caption.test.js
@@ -0,0 +1,26 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import Caption from '../../Typography/Caption.tsx';
+import { red500 } from '../../../styles/colors';
+
+const style = StyleSheet.create({
+  caption: {
+    fontSize: 20,
+    color: red500,
+  },
+});
+
+it('renders caption with children as content', () => {
+  const tree = renderer.create(<Caption>Caption content</Caption>).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders caption applying style', () => {
+  const tree = renderer
+    .create(<Caption style={style.caption}>Big and red caption</Caption>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Typography/__snapshots__/Caption.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/Typography/__snapshots__/Caption.test.js.snap
new file mode 100644
index 0000000..b5b98dd
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Typography/__snapshots__/Caption.test.js.snap
@@ -0,0 +1,82 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders caption applying style 1`] = `
+<Text
+  style={
+    Array [
+      Object {
+        "color": "#000000",
+        "fontFamily": "System",
+        "fontWeight": "400",
+      },
+      Object {
+        "textAlign": "left",
+      },
+      Array [
+        Object {
+          "textAlign": "left",
+        },
+        Object {
+          "color": "rgba(0, 0, 0, 0.54)",
+          "fontFamily": "System",
+          "fontWeight": "400",
+          "writingDirection": "ltr",
+        },
+        Array [
+          Object {
+            "fontSize": 12,
+            "letterSpacing": 0.4,
+            "lineHeight": 20,
+            "marginVertical": 2,
+          },
+          Object {
+            "color": "#f44336",
+            "fontSize": 20,
+          },
+        ],
+      ],
+    ]
+  }
+>
+  Big and red caption
+</Text>
+`;
+
+exports[`renders caption with children as content 1`] = `
+<Text
+  style={
+    Array [
+      Object {
+        "color": "#000000",
+        "fontFamily": "System",
+        "fontWeight": "400",
+      },
+      Object {
+        "textAlign": "left",
+      },
+      Array [
+        Object {
+          "textAlign": "left",
+        },
+        Object {
+          "color": "rgba(0, 0, 0, 0.54)",
+          "fontFamily": "System",
+          "fontWeight": "400",
+          "writingDirection": "ltr",
+        },
+        Array [
+          Object {
+            "fontSize": 12,
+            "letterSpacing": 0.4,
+            "lineHeight": 20,
+            "marginVertical": 2,
+          },
+          undefined,
+        ],
+      ],
+    ]
+  }
+>
+  Caption content
+</Text>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ActivityIndicator.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ActivityIndicator.test.js.snap
new file mode 100644
index 0000000..9cccb93
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ActivityIndicator.test.js.snap
@@ -0,0 +1,761 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders colored indicator 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": true,
+    }
+  }
+  accessible={true}
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    collapsable={false}
+    style={
+      Object {
+        "height": 24,
+        "opacity": 1,
+        "width": 24,
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 24,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 24,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 12,
+              "overflow": "hidden",
+              "width": 24,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 24,
+                "transform": Array [
+                  Object {
+                    "translateY": 0,
+                  },
+                  Object {
+                    "rotate": "-165deg",
+                  },
+                ],
+                "width": 24,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 12,
+                  "overflow": "hidden",
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#FF0000",
+                    "borderRadius": 12,
+                    "borderWidth": 2.4,
+                    "height": 24,
+                    "width": 24,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 24,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 24,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 12,
+              "overflow": "hidden",
+              "top": 12,
+              "width": 24,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 24,
+                "transform": Array [
+                  Object {
+                    "translateY": -12,
+                  },
+                  Object {
+                    "rotate": "345deg",
+                  },
+                ],
+                "width": 24,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 12,
+                  "overflow": "hidden",
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#FF0000",
+                    "borderRadius": 12,
+                    "borderWidth": 2.4,
+                    "height": 24,
+                    "width": 24,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders hidden indicator 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": false,
+    }
+  }
+  accessible={true}
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    collapsable={false}
+    style={
+      Object {
+        "height": 24,
+        "opacity": 0,
+        "width": 24,
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 24,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 24,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 12,
+              "overflow": "hidden",
+              "width": 24,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 24,
+                "transform": Array [
+                  Object {
+                    "translateY": 0,
+                  },
+                  Object {
+                    "rotate": "-165deg",
+                  },
+                ],
+                "width": 24,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 12,
+                  "overflow": "hidden",
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#6200ee",
+                    "borderRadius": 12,
+                    "borderWidth": 2.4,
+                    "height": 24,
+                    "width": 24,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 24,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 24,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 12,
+              "overflow": "hidden",
+              "top": 12,
+              "width": 24,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 24,
+                "transform": Array [
+                  Object {
+                    "translateY": -12,
+                  },
+                  Object {
+                    "rotate": "345deg",
+                  },
+                ],
+                "width": 24,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 12,
+                  "overflow": "hidden",
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#6200ee",
+                    "borderRadius": 12,
+                    "borderWidth": 2.4,
+                    "height": 24,
+                    "width": 24,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders indicator 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": true,
+    }
+  }
+  accessible={true}
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    collapsable={false}
+    style={
+      Object {
+        "height": 24,
+        "opacity": 1,
+        "width": 24,
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 24,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 24,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 12,
+              "overflow": "hidden",
+              "width": 24,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 24,
+                "transform": Array [
+                  Object {
+                    "translateY": 0,
+                  },
+                  Object {
+                    "rotate": "-165deg",
+                  },
+                ],
+                "width": 24,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 12,
+                  "overflow": "hidden",
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#6200ee",
+                    "borderRadius": 12,
+                    "borderWidth": 2.4,
+                    "height": 24,
+                    "width": 24,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 24,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 24,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 12,
+              "overflow": "hidden",
+              "top": 12,
+              "width": 24,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 24,
+                "transform": Array [
+                  Object {
+                    "translateY": -12,
+                  },
+                  Object {
+                    "rotate": "345deg",
+                  },
+                ],
+                "width": 24,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 12,
+                  "overflow": "hidden",
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#6200ee",
+                    "borderRadius": 12,
+                    "borderWidth": 2.4,
+                    "height": 24,
+                    "width": 24,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders large indicator 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": true,
+    }
+  }
+  accessible={true}
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    collapsable={false}
+    style={
+      Object {
+        "height": 48,
+        "opacity": 1,
+        "width": 48,
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 48,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 48,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 24,
+              "overflow": "hidden",
+              "width": 48,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 48,
+                "transform": Array [
+                  Object {
+                    "translateY": 0,
+                  },
+                  Object {
+                    "rotate": "-165deg",
+                  },
+                ],
+                "width": 48,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 24,
+                  "overflow": "hidden",
+                  "width": 48,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#6200ee",
+                    "borderRadius": 24,
+                    "borderWidth": 4.8,
+                    "height": 48,
+                    "width": 48,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 48,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 48,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 24,
+              "overflow": "hidden",
+              "top": 24,
+              "width": 48,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 48,
+                "transform": Array [
+                  Object {
+                    "translateY": -24,
+                  },
+                  Object {
+                    "rotate": "345deg",
+                  },
+                ],
+                "width": 48,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 24,
+                  "overflow": "hidden",
+                  "width": 48,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#6200ee",
+                    "borderRadius": 24,
+                    "borderWidth": 4.8,
+                    "height": 48,
+                    "width": 48,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/AnimatedFAB.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/AnimatedFAB.test.js.snap
new file mode 100644
index 0000000..fa3bf66
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/AnimatedFAB.test.js.snap
@@ -0,0 +1,706 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders animated fab 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "position": "absolute",
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    style={
+      Object {
+        "borderRadius": 28,
+        "height": 56,
+        "transform": Array [
+          Object {
+            "scaleY": 1,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "elevation": 0,
+          },
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "borderRadius": 28,
+            "bottom": 0,
+            "elevation": 6,
+            "left": 0,
+            "opacity": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "width": 84,
+          }
+        }
+      />
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "borderRadius": 28,
+            "bottom": 0,
+            "elevation": 6,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "transform": Array [
+              Object {
+                "translateX": 28,
+              },
+            ],
+            "width": 56,
+          }
+        }
+      />
+    </View>
+    <View
+      pointerEvents="box-none"
+      style={
+        Object {
+          "borderRadius": 28,
+          "flexDirection": "row",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "backgroundColor": "#03dac4",
+            "borderRadius": 28,
+            "height": 56,
+            "left": 28,
+            "right": undefined,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+            ],
+            "width": 84,
+          }
+        }
+      >
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "disabled": undefined,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Array [
+              Object {
+                "overflow": "hidden",
+              },
+              Object {
+                "borderRadius": 28,
+              },
+            ]
+          }
+        >
+          <View
+            style={
+              Array [
+                Object {
+                  "borderRadius": 28,
+                  "height": 56,
+                },
+                Object {
+                  "width": 84,
+                },
+              ]
+            }
+          />
+        </View>
+      </View>
+    </View>
+  </View>
+  <View
+    pointerEvents="none"
+    style={
+      Object {
+        "alignItems": "center",
+        "height": 56,
+        "justifyContent": "center",
+        "left": 28,
+        "position": "absolute",
+        "right": undefined,
+        "transform": Array [
+          Object {
+            "translateX": 0,
+          },
+        ],
+        "width": 56,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "rgba(0, 0, 0, .54)",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+  <View
+    pointerEvents="none"
+  >
+    <Text
+      ellipsizeMode="tail"
+      numberOfLines={1}
+      onTextLayout={[Function]}
+      style={
+        Object {
+          "color": "rgba(0, 0, 0, .54)",
+          "fontFamily": "System",
+          "fontWeight": "500",
+          "minWidth": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 28,
+          "textAlign": "left",
+          "textTransform": "uppercase",
+          "top": -28,
+          "transform": Array [
+            Object {
+              "translateX": 56,
+            },
+          ],
+          "writingDirection": "ltr",
+        }
+      }
+    />
+  </View>
+</View>
+`;
+
+exports[`renders animated fab with label on the left 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "position": "absolute",
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    style={
+      Object {
+        "borderRadius": 28,
+        "height": 56,
+        "transform": Array [
+          Object {
+            "scaleY": 1,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "elevation": 0,
+          },
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "borderRadius": 28,
+            "bottom": 0,
+            "elevation": 6,
+            "left": 0,
+            "opacity": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "width": 84,
+          }
+        }
+      />
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "borderRadius": 28,
+            "bottom": 0,
+            "elevation": 6,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+            ],
+            "width": 56,
+          }
+        }
+      />
+    </View>
+    <View
+      pointerEvents="box-none"
+      style={
+        Object {
+          "borderRadius": 28,
+          "flexDirection": "row",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "backgroundColor": "#03dac4",
+            "borderRadius": 28,
+            "height": 56,
+            "left": -28,
+            "right": undefined,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+            ],
+            "width": 84,
+          }
+        }
+      >
+        <View
+          accessibilityLabel="text"
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "disabled": undefined,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Array [
+              Object {
+                "overflow": "hidden",
+              },
+              Object {
+                "borderRadius": 28,
+              },
+            ]
+          }
+        >
+          <View
+            style={
+              Array [
+                Object {
+                  "borderRadius": 28,
+                  "height": 56,
+                },
+                Object {
+                  "width": 84,
+                },
+              ]
+            }
+          />
+        </View>
+      </View>
+    </View>
+  </View>
+  <View
+    pointerEvents="none"
+    style={
+      Object {
+        "alignItems": "center",
+        "height": 56,
+        "justifyContent": "center",
+        "left": -28,
+        "position": "absolute",
+        "right": undefined,
+        "transform": Array [
+          Object {
+            "translateX": 28,
+          },
+        ],
+        "width": 56,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "rgba(0, 0, 0, .54)",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+  <View
+    pointerEvents="none"
+  >
+    <Text
+      ellipsizeMode="tail"
+      numberOfLines={1}
+      onTextLayout={[Function]}
+      style={
+        Object {
+          "color": "rgba(0, 0, 0, .54)",
+          "fontFamily": "System",
+          "fontWeight": "500",
+          "left": 28,
+          "minWidth": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "textAlign": "left",
+          "textTransform": "uppercase",
+          "top": -28,
+          "transform": Array [
+            Object {
+              "translateX": 56,
+            },
+          ],
+          "writingDirection": "ltr",
+        }
+      }
+    >
+      text
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders animated fab with label on the right by default 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "position": "absolute",
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    style={
+      Object {
+        "borderRadius": 28,
+        "height": 56,
+        "transform": Array [
+          Object {
+            "scaleY": 1,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "elevation": 0,
+          },
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "borderRadius": 28,
+            "bottom": 0,
+            "elevation": 6,
+            "left": 0,
+            "opacity": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "width": 84,
+          }
+        }
+      />
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "borderRadius": 28,
+            "bottom": 0,
+            "elevation": 6,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "transform": Array [
+              Object {
+                "translateX": 28,
+              },
+            ],
+            "width": 56,
+          }
+        }
+      />
+    </View>
+    <View
+      pointerEvents="box-none"
+      style={
+        Object {
+          "borderRadius": 28,
+          "flexDirection": "row",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "backgroundColor": "#03dac4",
+            "borderRadius": 28,
+            "height": 56,
+            "left": 28,
+            "right": undefined,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+            ],
+            "width": 84,
+          }
+        }
+      >
+        <View
+          accessibilityLabel="text"
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "disabled": undefined,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Array [
+              Object {
+                "overflow": "hidden",
+              },
+              Object {
+                "borderRadius": 28,
+              },
+            ]
+          }
+        >
+          <View
+            style={
+              Array [
+                Object {
+                  "borderRadius": 28,
+                  "height": 56,
+                },
+                Object {
+                  "width": 84,
+                },
+              ]
+            }
+          />
+        </View>
+      </View>
+    </View>
+  </View>
+  <View
+    pointerEvents="none"
+    style={
+      Object {
+        "alignItems": "center",
+        "height": 56,
+        "justifyContent": "center",
+        "left": 28,
+        "position": "absolute",
+        "right": undefined,
+        "transform": Array [
+          Object {
+            "translateX": 0,
+          },
+        ],
+        "width": 56,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "rgba(0, 0, 0, .54)",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+  <View
+    pointerEvents="none"
+  >
+    <Text
+      ellipsizeMode="tail"
+      numberOfLines={1}
+      onTextLayout={[Function]}
+      style={
+        Object {
+          "color": "rgba(0, 0, 0, .54)",
+          "fontFamily": "System",
+          "fontWeight": "500",
+          "minWidth": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 28,
+          "textAlign": "left",
+          "textTransform": "uppercase",
+          "top": -28,
+          "transform": Array [
+            Object {
+              "translateX": 56,
+            },
+          ],
+          "writingDirection": "ltr",
+        }
+      }
+    >
+      text
+    </Text>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Avatar.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Avatar.test.js.snap
new file mode 100644
index 0000000..f4dfa2c
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Avatar.test.js.snap
@@ -0,0 +1,312 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders avatar with icon 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#6200ee",
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      },
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      Object {},
+    ]
+  }
+>
+  <Text
+    accessibilityElementsHidden={true}
+    importantForAccessibility="no-hide-descendants"
+    pointerEvents="none"
+    selectable={false}
+    style={
+      Array [
+        Object {
+          "backgroundColor": "transparent",
+        },
+        Object {
+          "color": "#ffffff",
+          "fontSize": 38.4,
+        },
+      ]
+    }
+  >
+    □
+  </Text>
+</View>
+`;
+
+exports[`renders avatar with icon and custom background color 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#f44336",
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      },
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      Object {},
+    ]
+  }
+>
+  <Text
+    accessibilityElementsHidden={true}
+    importantForAccessibility="no-hide-descendants"
+    pointerEvents="none"
+    selectable={false}
+    style={
+      Array [
+        Object {
+          "backgroundColor": "transparent",
+        },
+        Object {
+          "color": "#ffffff",
+          "fontSize": 38.4,
+        },
+      ]
+    }
+  >
+    □
+  </Text>
+</View>
+`;
+
+exports[`renders avatar with image 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#6200ee",
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      },
+      undefined,
+    ]
+  }
+>
+  <Image
+    source={
+      Object {
+        "src": "avatar.png",
+      }
+    }
+    style={
+      Object {
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      }
+    }
+  />
+</View>
+`;
+
+exports[`renders avatar with text 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#6200ee",
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      },
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      Object {},
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "textAlign": "center",
+            "textAlignVertical": "center",
+          },
+          Object {
+            "color": "#ffffff",
+            "fontSize": 32,
+            "lineHeight": 64,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    XD
+  </Text>
+</View>
+`;
+
+exports[`renders avatar with text and custom background color 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#f44336",
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      },
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      Object {},
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "textAlign": "center",
+            "textAlignVertical": "center",
+          },
+          Object {
+            "color": "#ffffff",
+            "fontSize": 32,
+            "lineHeight": 64,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    XD
+  </Text>
+</View>
+`;
+
+exports[`renders avatar with text and custom colors 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#6200ee",
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      },
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      Object {},
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "textAlign": "center",
+            "textAlignVertical": "center",
+          },
+          Object {
+            "color": "#FFFFFF",
+            "fontSize": 32,
+            "lineHeight": 64,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    XD
+  </Text>
+</View>
+`;
+
+exports[`renders avatar with text and custom size 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#6200ee",
+        "borderRadius": 48,
+        "height": 96,
+        "width": 96,
+      },
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      Object {},
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "textAlign": "center",
+            "textAlignVertical": "center",
+          },
+          Object {
+            "color": "#ffffff",
+            "fontSize": 48,
+            "lineHeight": 96,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    XD
+  </Text>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Badge.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Badge.test.js.snap
new file mode 100644
index 0000000..2b97939
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Badge.test.js.snap
@@ -0,0 +1,134 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders badge 1`] = `
+<Text
+  numberOfLines={1}
+  style={
+    Object {
+      "alignSelf": "flex-end",
+      "backgroundColor": "#f50057",
+      "borderRadius": 10,
+      "color": "#ffffff",
+      "fontFamily": "System",
+      "fontSize": 10,
+      "fontWeight": "400",
+      "height": 20,
+      "lineHeight": 20,
+      "minWidth": 20,
+      "opacity": 1,
+      "overflow": "hidden",
+      "paddingHorizontal": 4,
+      "textAlign": "center",
+      "textAlignVertical": "center",
+    }
+  }
+/>
+`;
+
+exports[`renders badge as hidden 1`] = `
+<Text
+  numberOfLines={1}
+  style={
+    Object {
+      "alignSelf": "flex-end",
+      "backgroundColor": "#f50057",
+      "borderRadius": 6,
+      "color": "#ffffff",
+      "fontFamily": "System",
+      "fontSize": 6,
+      "fontWeight": "400",
+      "height": 12,
+      "lineHeight": 12,
+      "minWidth": 12,
+      "opacity": 0,
+      "overflow": "hidden",
+      "paddingHorizontal": 4,
+      "textAlign": "center",
+      "textAlignVertical": "center",
+    }
+  }
+>
+  3
+</Text>
+`;
+
+exports[`renders badge in different color 1`] = `
+<Text
+  numberOfLines={1}
+  style={
+    Object {
+      "alignSelf": "flex-end",
+      "backgroundColor": "#f44336",
+      "borderRadius": 10,
+      "color": "#ffffff",
+      "fontFamily": "System",
+      "fontSize": 10,
+      "fontWeight": "400",
+      "height": 20,
+      "lineHeight": 20,
+      "minWidth": 20,
+      "opacity": 1,
+      "overflow": "hidden",
+      "paddingHorizontal": 4,
+      "textAlign": "center",
+      "textAlignVertical": "center",
+    }
+  }
+>
+  3
+</Text>
+`;
+
+exports[`renders badge in different size 1`] = `
+<Text
+  numberOfLines={1}
+  style={
+    Object {
+      "alignSelf": "flex-end",
+      "backgroundColor": "#f50057",
+      "borderRadius": 6,
+      "color": "#ffffff",
+      "fontFamily": "System",
+      "fontSize": 6,
+      "fontWeight": "400",
+      "height": 12,
+      "lineHeight": 12,
+      "minWidth": 12,
+      "opacity": 1,
+      "overflow": "hidden",
+      "paddingHorizontal": 4,
+      "textAlign": "center",
+      "textAlignVertical": "center",
+    }
+  }
+>
+  3
+</Text>
+`;
+
+exports[`renders badge with content 1`] = `
+<Text
+  numberOfLines={1}
+  style={
+    Object {
+      "alignSelf": "flex-end",
+      "backgroundColor": "#f50057",
+      "borderRadius": 10,
+      "color": "#ffffff",
+      "fontFamily": "System",
+      "fontSize": 10,
+      "fontWeight": "400",
+      "height": 20,
+      "lineHeight": 20,
+      "minWidth": 20,
+      "opacity": 1,
+      "overflow": "hidden",
+      "paddingHorizontal": 4,
+      "textAlign": "center",
+      "textAlignVertical": "center",
+    }
+  }
+>
+  3
+</Text>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Banner.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Banner.test.js.snap
new file mode 100644
index 0000000..3212915
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Banner.test.js.snap
@@ -0,0 +1,996 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`render visible banner, with custom theme 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ccc",
+      "elevation": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 0.75,
+    }
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "alignSelf": "center",
+          "maxWidth": 960,
+          "overflow": "hidden",
+          "width": "100%",
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "height": 0,
+        }
+      }
+    />
+    <View
+      onLayout={[Function]}
+      style={Object {}}
+    >
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-start",
+            "marginBottom": 0,
+            "marginHorizontal": 8,
+            "marginTop": 16,
+          }
+        }
+      >
+        <Text
+          accessibilityLiveRegion="polite"
+          accessibilityRole="alert"
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "flex": 1,
+                  "margin": 8,
+                },
+                Object {
+                  "color": "#00f",
+                },
+              ],
+            ]
+          }
+        >
+          Custom theme
+        </Text>
+      </View>
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-end",
+            "margin": 4,
+          }
+        }
+      >
+        <View
+          style={
+            Object {
+              "backgroundColor": "transparent",
+              "borderColor": "transparent",
+              "borderRadius": 4,
+              "borderStyle": "solid",
+              "borderWidth": 0,
+              "elevation": 0,
+              "margin": 4,
+              "minWidth": "auto",
+              "shadowColor": "#000000",
+              "shadowOffset": Object {
+                "height": 0,
+                "width": 0,
+              },
+              "shadowOpacity": 0,
+              "shadowRadius": 0,
+            }
+          }
+        >
+          <View
+            accessibilityRole="button"
+            accessibilityState={
+              Object {
+                "disabled": undefined,
+              }
+            }
+            accessible={true}
+            focusable={true}
+            onClick={[Function]}
+            onResponderGrant={[Function]}
+            onResponderMove={[Function]}
+            onResponderRelease={[Function]}
+            onResponderTerminate={[Function]}
+            onResponderTerminationRequest={[Function]}
+            onStartShouldSetResponder={[Function]}
+            style={
+              Array [
+                Object {
+                  "overflow": "hidden",
+                },
+                Object {
+                  "borderRadius": 4,
+                },
+              ]
+            }
+          >
+            <View
+              style={
+                Array [
+                  Object {
+                    "alignItems": "center",
+                    "flexDirection": "row",
+                    "justifyContent": "center",
+                  },
+                  undefined,
+                ]
+              }
+            >
+              <Text
+                numberOfLines={1}
+                selectable={false}
+                style={
+                  Array [
+                    Object {
+                      "color": "#000000",
+                      "fontFamily": "System",
+                      "fontWeight": "400",
+                    },
+                    Object {
+                      "textAlign": "left",
+                    },
+                    Array [
+                      Object {
+                        "letterSpacing": 1,
+                        "marginHorizontal": 16,
+                        "marginVertical": 9,
+                        "textAlign": "center",
+                      },
+                      Object {
+                        "marginHorizontal": 8,
+                      },
+                      Object {
+                        "textTransform": "uppercase",
+                      },
+                      Object {
+                        "color": "#043",
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      Object {
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      undefined,
+                    ],
+                  ]
+                }
+              >
+                first
+              </Text>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders hidden banner, without action buttons and without image 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "elevation": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 0.75,
+    }
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "alignSelf": "center",
+          "maxWidth": 960,
+          "overflow": "hidden",
+          "width": "100%",
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "height": 0,
+        }
+      }
+    />
+    <View
+      onLayout={[Function]}
+      style={
+        Object {
+          "opacity": 0,
+          "position": "absolute",
+          "top": 0,
+          "transform": Array [
+            Object {
+              "translateY": -0,
+            },
+          ],
+          "width": "100%",
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-start",
+            "marginBottom": 0,
+            "marginHorizontal": 8,
+            "marginTop": 16,
+          }
+        }
+      >
+        <Text
+          accessibilityLiveRegion="none"
+          accessibilityRole="alert"
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "flex": 1,
+                  "margin": 8,
+                },
+                Object {
+                  "color": "#000000",
+                },
+              ],
+            ]
+          }
+        >
+          Two line text string with two actions. One to two lines is preferable on mobile.
+        </Text>
+      </View>
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-end",
+            "margin": 4,
+          }
+        }
+      />
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders visible banner, with action buttons and with image 1`] = `
+<View
+  image={[Function]}
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "elevation": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 0.75,
+    }
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "alignSelf": "center",
+          "maxWidth": 960,
+          "overflow": "hidden",
+          "width": "100%",
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "height": 0,
+        }
+      }
+    />
+    <View
+      onLayout={[Function]}
+      style={Object {}}
+    >
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-start",
+            "marginBottom": 0,
+            "marginHorizontal": 8,
+            "marginTop": 16,
+          }
+        }
+      >
+        <Text
+          accessibilityLiveRegion="polite"
+          accessibilityRole="alert"
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "flex": 1,
+                  "margin": 8,
+                },
+                Object {
+                  "color": "#000000",
+                },
+              ],
+            ]
+          }
+        >
+          Two line text string with two actions. One to two lines is preferable on mobile.
+        </Text>
+      </View>
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-end",
+            "margin": 4,
+          }
+        }
+      >
+        <View
+          style={
+            Object {
+              "backgroundColor": "transparent",
+              "borderColor": "transparent",
+              "borderRadius": 4,
+              "borderStyle": "solid",
+              "borderWidth": 0,
+              "elevation": 0,
+              "margin": 4,
+              "minWidth": "auto",
+              "shadowColor": "#000000",
+              "shadowOffset": Object {
+                "height": 0,
+                "width": 0,
+              },
+              "shadowOpacity": 0,
+              "shadowRadius": 0,
+            }
+          }
+        >
+          <View
+            accessibilityRole="button"
+            accessibilityState={
+              Object {
+                "disabled": undefined,
+              }
+            }
+            accessible={true}
+            focusable={true}
+            onClick={[Function]}
+            onResponderGrant={[Function]}
+            onResponderMove={[Function]}
+            onResponderRelease={[Function]}
+            onResponderTerminate={[Function]}
+            onResponderTerminationRequest={[Function]}
+            onStartShouldSetResponder={[Function]}
+            style={
+              Array [
+                Object {
+                  "overflow": "hidden",
+                },
+                Object {
+                  "borderRadius": 4,
+                },
+              ]
+            }
+          >
+            <View
+              style={
+                Array [
+                  Object {
+                    "alignItems": "center",
+                    "flexDirection": "row",
+                    "justifyContent": "center",
+                  },
+                  undefined,
+                ]
+              }
+            >
+              <Text
+                numberOfLines={1}
+                selectable={false}
+                style={
+                  Array [
+                    Object {
+                      "color": "#000000",
+                      "fontFamily": "System",
+                      "fontWeight": "400",
+                    },
+                    Object {
+                      "textAlign": "left",
+                    },
+                    Array [
+                      Object {
+                        "letterSpacing": 1,
+                        "marginHorizontal": 16,
+                        "marginVertical": 9,
+                        "textAlign": "center",
+                      },
+                      Object {
+                        "marginHorizontal": 8,
+                      },
+                      Object {
+                        "textTransform": "uppercase",
+                      },
+                      Object {
+                        "color": "#6200ee",
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      Object {
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      undefined,
+                    ],
+                  ]
+                }
+              >
+                first
+              </Text>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders visible banner, with action buttons and without image 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "elevation": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 0.75,
+    }
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "alignSelf": "center",
+          "maxWidth": 960,
+          "overflow": "hidden",
+          "width": "100%",
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "height": 0,
+        }
+      }
+    />
+    <View
+      onLayout={[Function]}
+      style={Object {}}
+    >
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-start",
+            "marginBottom": 0,
+            "marginHorizontal": 8,
+            "marginTop": 16,
+          }
+        }
+      >
+        <Text
+          accessibilityLiveRegion="polite"
+          accessibilityRole="alert"
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "flex": 1,
+                  "margin": 8,
+                },
+                Object {
+                  "color": "#000000",
+                },
+              ],
+            ]
+          }
+        >
+          Two line text string with two actions. One to two lines is preferable on mobile.
+        </Text>
+      </View>
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-end",
+            "margin": 4,
+          }
+        }
+      >
+        <View
+          style={
+            Object {
+              "backgroundColor": "transparent",
+              "borderColor": "transparent",
+              "borderRadius": 4,
+              "borderStyle": "solid",
+              "borderWidth": 0,
+              "elevation": 0,
+              "margin": 4,
+              "minWidth": "auto",
+              "shadowColor": "#000000",
+              "shadowOffset": Object {
+                "height": 0,
+                "width": 0,
+              },
+              "shadowOpacity": 0,
+              "shadowRadius": 0,
+            }
+          }
+        >
+          <View
+            accessibilityRole="button"
+            accessibilityState={
+              Object {
+                "disabled": undefined,
+              }
+            }
+            accessible={true}
+            focusable={true}
+            onClick={[Function]}
+            onResponderGrant={[Function]}
+            onResponderMove={[Function]}
+            onResponderRelease={[Function]}
+            onResponderTerminate={[Function]}
+            onResponderTerminationRequest={[Function]}
+            onStartShouldSetResponder={[Function]}
+            style={
+              Array [
+                Object {
+                  "overflow": "hidden",
+                },
+                Object {
+                  "borderRadius": 4,
+                },
+              ]
+            }
+          >
+            <View
+              style={
+                Array [
+                  Object {
+                    "alignItems": "center",
+                    "flexDirection": "row",
+                    "justifyContent": "center",
+                  },
+                  undefined,
+                ]
+              }
+            >
+              <Text
+                numberOfLines={1}
+                selectable={false}
+                style={
+                  Array [
+                    Object {
+                      "color": "#000000",
+                      "fontFamily": "System",
+                      "fontWeight": "400",
+                    },
+                    Object {
+                      "textAlign": "left",
+                    },
+                    Array [
+                      Object {
+                        "letterSpacing": 1,
+                        "marginHorizontal": 16,
+                        "marginVertical": 9,
+                        "textAlign": "center",
+                      },
+                      Object {
+                        "marginHorizontal": 8,
+                      },
+                      Object {
+                        "textTransform": "uppercase",
+                      },
+                      Object {
+                        "color": "#6200ee",
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      Object {
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      undefined,
+                    ],
+                  ]
+                }
+              >
+                first
+              </Text>
+            </View>
+          </View>
+        </View>
+        <View
+          style={
+            Object {
+              "backgroundColor": "transparent",
+              "borderColor": "transparent",
+              "borderRadius": 4,
+              "borderStyle": "solid",
+              "borderWidth": 0,
+              "elevation": 0,
+              "margin": 4,
+              "minWidth": "auto",
+              "shadowColor": "#000000",
+              "shadowOffset": Object {
+                "height": 0,
+                "width": 0,
+              },
+              "shadowOpacity": 0,
+              "shadowRadius": 0,
+            }
+          }
+        >
+          <View
+            accessibilityRole="button"
+            accessibilityState={
+              Object {
+                "disabled": undefined,
+              }
+            }
+            accessible={true}
+            focusable={true}
+            onClick={[Function]}
+            onResponderGrant={[Function]}
+            onResponderMove={[Function]}
+            onResponderRelease={[Function]}
+            onResponderTerminate={[Function]}
+            onResponderTerminationRequest={[Function]}
+            onStartShouldSetResponder={[Function]}
+            style={
+              Array [
+                Object {
+                  "overflow": "hidden",
+                },
+                Object {
+                  "borderRadius": 4,
+                },
+              ]
+            }
+          >
+            <View
+              style={
+                Array [
+                  Object {
+                    "alignItems": "center",
+                    "flexDirection": "row",
+                    "justifyContent": "center",
+                  },
+                  undefined,
+                ]
+              }
+            >
+              <Text
+                numberOfLines={1}
+                selectable={false}
+                style={
+                  Array [
+                    Object {
+                      "color": "#000000",
+                      "fontFamily": "System",
+                      "fontWeight": "400",
+                    },
+                    Object {
+                      "textAlign": "left",
+                    },
+                    Array [
+                      Object {
+                        "letterSpacing": 1,
+                        "marginHorizontal": 16,
+                        "marginVertical": 9,
+                        "textAlign": "center",
+                      },
+                      Object {
+                        "marginHorizontal": 8,
+                      },
+                      Object {
+                        "textTransform": "uppercase",
+                      },
+                      Object {
+                        "color": "#6200ee",
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      Object {
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      undefined,
+                    ],
+                  ]
+                }
+              >
+                second
+              </Text>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders visible banner, without action buttons and with image 1`] = `
+<View
+  image={[Function]}
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "elevation": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 0.75,
+    }
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "alignSelf": "center",
+          "maxWidth": 960,
+          "overflow": "hidden",
+          "width": "100%",
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "height": 0,
+        }
+      }
+    />
+    <View
+      onLayout={[Function]}
+      style={Object {}}
+    >
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-start",
+            "marginBottom": 0,
+            "marginHorizontal": 8,
+            "marginTop": 16,
+          }
+        }
+      >
+        <Text
+          accessibilityLiveRegion="polite"
+          accessibilityRole="alert"
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "flex": 1,
+                  "margin": 8,
+                },
+                Object {
+                  "color": "#000000",
+                },
+              ],
+            ]
+          }
+        >
+          Two line text string with two actions. One to two lines is preferable on mobile.
+        </Text>
+      </View>
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-end",
+            "margin": 4,
+          }
+        }
+      />
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders visible banner, without action buttons and without image 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "elevation": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 0.75,
+    }
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "alignSelf": "center",
+          "maxWidth": 960,
+          "overflow": "hidden",
+          "width": "100%",
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "height": 0,
+        }
+      }
+    />
+    <View
+      onLayout={[Function]}
+      style={Object {}}
+    >
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-start",
+            "marginBottom": 0,
+            "marginHorizontal": 8,
+            "marginTop": 16,
+          }
+        }
+      >
+        <Text
+          accessibilityLiveRegion="polite"
+          accessibilityRole="alert"
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "flex": 1,
+                  "margin": 8,
+                },
+                Object {
+                  "color": "#000000",
+                },
+              ],
+            ]
+          }
+        >
+          Two line text string with two actions. One to two lines is preferable on mobile.
+        </Text>
+      </View>
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-end",
+            "margin": 4,
+          }
+        }
+      />
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/BottomNavigation.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/BottomNavigation.test.js.snap
new file mode 100644
index 0000000..6900b73
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/BottomNavigation.test.js.snap
@@ -0,0 +1,6281 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`hides labels in non-shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "#6200ee",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 504,
+            },
+          ]
+        }
+      >
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                }
+              }
+            />
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                }
+              }
+            />
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                }
+              }
+            />
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`hides labels in shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "rgba(98, 0, 238, 1)",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 504,
+            },
+          ]
+        }
+      >
+        <View
+          pointerEvents="none"
+          style={
+            Object {
+              "backgroundColor": undefined,
+              "borderRadius": 0,
+              "height": 0,
+              "left": 0,
+              "opacity": 0,
+              "position": "absolute",
+              "top": 28,
+              "transform": Array [
+                Object {
+                  "scale": 0.008,
+                },
+              ],
+              "width": 0,
+            }
+          }
+        />
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                }
+              }
+            />
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                }
+              }
+            />
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                }
+              }
+            />
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders custom icon and label in non-shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "#6200ee",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 504,
+            },
+          ]
+        }
+      >
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  magnify
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  magnify
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="rgba(255, 255, 255, 0.5)"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  camera
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  camera
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="rgba(255, 255, 255, 0.5)"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  inbox
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  inbox
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="rgba(255, 255, 255, 0.5)"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders custom icon and label in shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "rgba(98, 0, 238, 1)",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 480,
+            },
+          ]
+        }
+      >
+        <View
+          pointerEvents="none"
+          style={
+            Object {
+              "backgroundColor": undefined,
+              "borderRadius": 0,
+              "height": 0,
+              "left": 0,
+              "opacity": 0,
+              "position": "absolute",
+              "top": 28,
+              "transform": Array [
+                Object {
+                  "scale": 0.008,
+                },
+              ],
+              "width": 0,
+            }
+          }
+        />
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  magnify
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  magnify
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  camera
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  camera
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  inbox
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  inbox
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  heart
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  heart
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  shopping-music
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  shopping-music
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders custom icon and label with custom colors in non-shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "color": "#e57373",
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "#6200ee",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 504,
+            },
+          ]
+        }
+      >
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#FBF7DB",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#853D4B",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#FBF7DB",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 0
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#853D4B",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 0
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#FBF7DB",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#853D4B",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#FBF7DB",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 1
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#853D4B",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 1
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#FBF7DB",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#853D4B",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#FBF7DB",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 2
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#853D4B",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 2
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders custom icon and label with custom colors in shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "color": "#e57373",
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "rgba(98, 0, 238, 1)",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 504,
+            },
+          ]
+        }
+      >
+        <View
+          pointerEvents="none"
+          style={
+            Object {
+              "backgroundColor": undefined,
+              "borderRadius": 0,
+              "height": 0,
+              "left": 0,
+              "opacity": 0,
+              "position": "absolute",
+              "top": 28,
+              "transform": Array [
+                Object {
+                  "scale": 0.008,
+                },
+              ],
+              "width": 0,
+            }
+          }
+        />
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#FBF7DB",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#853D4B",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#FBF7DB",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 0
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#FBF7DB",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#853D4B",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#FBF7DB",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 1
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#FBF7DB",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#853D4B",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#FBF7DB",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 2
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders non-shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "#6200ee",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 504,
+            },
+          ]
+        }
+      >
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 0
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "rgba(255, 255, 255, 0.5)",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 0
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 1
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "rgba(255, 255, 255, 0.5)",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 1
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 2
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "rgba(255, 255, 255, 0.5)",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 2
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "rgba(98, 0, 238, 1)",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 480,
+            },
+          ]
+        }
+      >
+        <View
+          pointerEvents="none"
+          style={
+            Object {
+              "backgroundColor": undefined,
+              "borderRadius": 0,
+              "height": 0,
+              "left": 0,
+              "opacity": 0,
+              "position": "absolute",
+              "top": 28,
+              "transform": Array [
+                Object {
+                  "scale": 0.008,
+                },
+              ],
+              "width": 0,
+            }
+          }
+        />
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 0
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 1
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 2
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 3
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 4
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Button.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Button.test.js.snap
new file mode 100644
index 0000000..4b68a16
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Button.test.js.snap
@@ -0,0 +1,1512 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders button with an accessibility hint 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityHint="hint"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Button with accessibility hint
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders button with an accessibility label 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityLabel="label"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Button with accessibility label
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders button with color 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#e91e63",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Custom Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders button with custom testID 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+    testID="custom:testID"
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Button with custom testID
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders button with icon 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "marginLeft": 12,
+            "marginRight": -4,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontSize": 16,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Icon Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders button with icon in reverse order 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "flexDirection": "row-reverse",
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "marginLeft": -4,
+            "marginRight": 12,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontSize": 16,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Right Icon
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders contained contained with mode 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#6200ee",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 2,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.75,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 1.5,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#ffffff",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Contained Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders disabled button 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": true,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.32)",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Disabled Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders loading button 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <View
+        accessibilityRole="progressbar"
+        accessibilityState={
+          Object {
+            "busy": true,
+          }
+        }
+        accessible={true}
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "marginLeft": 12,
+              "marginRight": -4,
+            },
+          ]
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 16,
+              "opacity": 1,
+              "width": 16,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "alignItems": "center",
+                "bottom": 0,
+                "justifyContent": "center",
+                "left": 0,
+                "position": "absolute",
+                "right": 0,
+                "top": 0,
+              }
+            }
+          >
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "transform": Array [
+                    Object {
+                      "rotate": "45deg",
+                    },
+                  ],
+                  "width": 16,
+                }
+              }
+            >
+              <View
+                collapsable={false}
+                style={
+                  Object {
+                    "height": 8,
+                    "overflow": "hidden",
+                    "width": 16,
+                  }
+                }
+              >
+                <View
+                  style={
+                    Object {
+                      "height": 16,
+                      "transform": Array [
+                        Object {
+                          "translateY": 0,
+                        },
+                        Object {
+                          "rotate": "-165deg",
+                        },
+                      ],
+                      "width": 16,
+                    }
+                  }
+                >
+                  <View
+                    collapsable={false}
+                    style={
+                      Object {
+                        "height": 8,
+                        "overflow": "hidden",
+                        "width": 16,
+                      }
+                    }
+                  >
+                    <View
+                      style={
+                        Object {
+                          "borderColor": "#6200ee",
+                          "borderRadius": 8,
+                          "borderWidth": 1.6,
+                          "height": 16,
+                          "width": 16,
+                        }
+                      }
+                    />
+                  </View>
+                </View>
+              </View>
+            </View>
+          </View>
+          <View
+            style={
+              Object {
+                "alignItems": "center",
+                "bottom": 0,
+                "justifyContent": "center",
+                "left": 0,
+                "position": "absolute",
+                "right": 0,
+                "top": 0,
+              }
+            }
+          >
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "transform": Array [
+                    Object {
+                      "rotate": "45deg",
+                    },
+                  ],
+                  "width": 16,
+                }
+              }
+            >
+              <View
+                collapsable={false}
+                style={
+                  Object {
+                    "height": 8,
+                    "overflow": "hidden",
+                    "top": 8,
+                    "width": 16,
+                  }
+                }
+              >
+                <View
+                  style={
+                    Object {
+                      "height": 16,
+                      "transform": Array [
+                        Object {
+                          "translateY": -8,
+                        },
+                        Object {
+                          "rotate": "345deg",
+                        },
+                      ],
+                      "width": 16,
+                    }
+                  }
+                >
+                  <View
+                    collapsable={false}
+                    style={
+                      Object {
+                        "height": 8,
+                        "overflow": "hidden",
+                        "width": 16,
+                      }
+                    }
+                  >
+                    <View
+                      style={
+                        Object {
+                          "borderColor": "#6200ee",
+                          "borderRadius": 8,
+                          "borderWidth": 1.6,
+                          "height": 16,
+                          "width": 16,
+                        }
+                      }
+                    />
+                  </View>
+                </View>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Loading Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders outlined button with mode 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "rgba(0, 0, 0, 0.29)",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Outlined Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders text button by default 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Text Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders text button with mode 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Text Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Chip.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Chip.test.js.snap
new file mode 100644
index 0000000..0d114ba
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Chip.test.js.snap
@@ -0,0 +1,849 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders chip with close button 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ebebeb",
+      "borderColor": "#ebebeb",
+      "borderRadius": 16,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "flexDirection": "column",
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": false,
+        "selected": false,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "borderRadius": 16,
+          },
+          Object {
+            "flexGrow": 1,
+          },
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "flexGrow": 1,
+            "paddingLeft": 4,
+            "position": "relative",
+          },
+          Object {
+            "paddingRight": 32,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignSelf": "center",
+              "padding": 4,
+            },
+            null,
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 18,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "lineHeight": 24,
+                "marginVertical": 4,
+                "minHeight": 24,
+                "textAlignVertical": "center",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+                "fontFamily": "System",
+                "fontWeight": "400",
+                "marginLeft": 4,
+                "marginRight": 0,
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Example Chip
+      </Text>
+    </View>
+  </View>
+  <View
+    style={
+      Object {
+        "alignItems": "center",
+        "height": "100%",
+        "justifyContent": "center",
+        "position": "absolute",
+        "right": 0,
+      }
+    }
+  >
+    <View
+      accessibilityLabel="Close"
+      accessibilityRole="button"
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "alignSelf": "center",
+            "padding": 4,
+          },
+          Object {
+            "marginRight": 4,
+          },
+        ]
+      }
+    >
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 16,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders chip with custom close button 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ebebeb",
+      "borderColor": "#ebebeb",
+      "borderRadius": 16,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "flexDirection": "column",
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": false,
+        "selected": false,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "borderRadius": 16,
+          },
+          Object {
+            "flexGrow": 1,
+          },
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "flexGrow": 1,
+            "paddingLeft": 4,
+            "position": "relative",
+          },
+          Object {
+            "paddingRight": 32,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignSelf": "center",
+              "padding": 4,
+            },
+            null,
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 18,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "lineHeight": 24,
+                "marginVertical": 4,
+                "minHeight": 24,
+                "textAlignVertical": "center",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+                "fontFamily": "System",
+                "fontWeight": "400",
+                "marginLeft": 4,
+                "marginRight": 0,
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Example Chip
+      </Text>
+    </View>
+  </View>
+  <View
+    style={
+      Object {
+        "alignItems": "center",
+        "height": "100%",
+        "justifyContent": "center",
+        "position": "absolute",
+        "right": 0,
+      }
+    }
+  >
+    <View
+      accessibilityLabel="Close"
+      accessibilityRole="button"
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "alignSelf": "center",
+            "padding": 4,
+          },
+          Object {
+            "marginRight": 4,
+          },
+        ]
+      }
+    >
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 16,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders chip with icon 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ebebeb",
+      "borderColor": "#ebebeb",
+      "borderRadius": 16,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "flexDirection": "column",
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": false,
+        "selected": false,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "borderRadius": 16,
+          },
+          Object {
+            "flexGrow": 1,
+          },
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "flexGrow": 1,
+            "paddingLeft": 4,
+            "position": "relative",
+          },
+          Object {
+            "paddingRight": 4,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignSelf": "center",
+              "padding": 4,
+            },
+            null,
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 18,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "lineHeight": 24,
+                "marginVertical": 4,
+                "minHeight": 24,
+                "textAlignVertical": "center",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+                "fontFamily": "System",
+                "fontWeight": "400",
+                "marginLeft": 4,
+                "marginRight": 8,
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Example Chip
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders chip with onPress 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ebebeb",
+      "borderColor": "#ebebeb",
+      "borderRadius": 16,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "flexDirection": "column",
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": false,
+        "selected": false,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "borderRadius": 16,
+          },
+          Object {
+            "flexGrow": 1,
+          },
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "flexGrow": 1,
+            "paddingLeft": 4,
+            "position": "relative",
+          },
+          Object {
+            "paddingRight": 4,
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "lineHeight": 24,
+                "marginVertical": 4,
+                "minHeight": 24,
+                "textAlignVertical": "center",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+                "fontFamily": "System",
+                "fontWeight": "400",
+                "marginLeft": 8,
+                "marginRight": 8,
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Example Chip
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders outlined disabled chip 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "borderColor": "rgba(0, 0, 0, 0.29)",
+      "borderRadius": 16,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "flexDirection": "column",
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": true,
+        "selected": false,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "borderRadius": 16,
+          },
+          Object {
+            "flexGrow": 1,
+          },
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "flexGrow": 1,
+            "paddingLeft": 4,
+            "position": "relative",
+          },
+          Object {
+            "paddingRight": 4,
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "lineHeight": 24,
+                "marginVertical": 4,
+                "minHeight": 24,
+                "textAlignVertical": "center",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.26)",
+                "fontFamily": "System",
+                "fontWeight": "400",
+                "marginLeft": 8,
+                "marginRight": 8,
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Example Chip
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders selected chip 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "rgb(188, 188, 188)",
+      "borderColor": "#ebebeb",
+      "borderRadius": 16,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "flexDirection": "column",
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": false,
+        "selected": true,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "borderRadius": 16,
+          },
+          Object {
+            "flexGrow": 1,
+          },
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "flexGrow": 1,
+            "paddingLeft": 4,
+            "position": "relative",
+          },
+          Object {
+            "paddingRight": 4,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignSelf": "center",
+              "padding": 4,
+            },
+            null,
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 18,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "lineHeight": 24,
+                "marginVertical": 4,
+                "minHeight": 24,
+                "textAlignVertical": "center",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+                "fontFamily": "System",
+                "fontWeight": "400",
+                "marginLeft": 4,
+                "marginRight": 8,
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Example Chip
+      </Text>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/DataTable.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/DataTable.test.js.snap
new file mode 100644
index 0000000..9e7626d
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/DataTable.test.js.snap
@@ -0,0 +1,1709 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders data table cell 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "alignItems": "center",
+          "flex": 1,
+          "flexDirection": "row",
+        },
+        undefined,
+        undefined,
+      ],
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        undefined,
+      ]
+    }
+  >
+    Cupcake
+  </Text>
+</View>
+`;
+
+exports[`renders data table header 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "borderBottomWidth": 1,
+        "flexDirection": "row",
+        "height": 48,
+        "paddingHorizontal": 16,
+      },
+      Object {
+        "borderBottomColor": "rgba(0, 0, 0, 0.12)",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "alignContent": "center",
+          "flex": 1,
+          "flexDirection": "row",
+          "paddingVertical": 12,
+        },
+        undefined,
+        undefined,
+      ]
+    }
+  >
+    <Text
+      numberOfLines={1}
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "fontSize": 12,
+              "fontWeight": "500",
+              "lineHeight": 24,
+            },
+            Object {
+              "maxHeight": 24,
+            },
+            Object {},
+            Object {
+              "color": "rgba(0, 0, 0, 0.6)",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Dessert
+    </Text>
+  </View>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "alignContent": "center",
+          "flex": 1,
+          "flexDirection": "row",
+          "paddingVertical": 12,
+        },
+        undefined,
+        undefined,
+      ]
+    }
+  >
+    <Text
+      numberOfLines={1}
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "fontSize": 12,
+              "fontWeight": "500",
+              "lineHeight": 24,
+            },
+            Object {
+              "maxHeight": 24,
+            },
+            Object {},
+            Object {
+              "color": "rgba(0, 0, 0, 0.6)",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Calories
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders data table pagination 1`] = `
+<View
+  accessibilityLabel="pagination-container"
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "flexDirection": "row",
+        "flexWrap": "wrap",
+        "justifyContent": "flex-end",
+        "paddingLeft": 16,
+      },
+      undefined,
+    ]
+  }
+>
+  <Text
+    accessibilityLabel="label"
+    numberOfLines={3}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "fontSize": 12,
+            "marginRight": 16,
+          },
+          Object {
+            "color": "rgba(0, 0, 0, 0.6)",
+          },
+        ],
+      ]
+    }
+  />
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      accessibilityLabel="chevron-left"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="chevron-right"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders data table pagination with fast-forward buttons 1`] = `
+<View
+  accessibilityLabel="pagination-container"
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "flexDirection": "row",
+        "flexWrap": "wrap",
+        "justifyContent": "flex-end",
+        "paddingLeft": 16,
+      },
+      undefined,
+    ]
+  }
+>
+  <Text
+    accessibilityLabel="label"
+    numberOfLines={3}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "fontSize": 12,
+            "marginRight": 16,
+          },
+          Object {
+            "color": "rgba(0, 0, 0, 0.6)",
+          },
+        ],
+      ]
+    }
+  >
+    11-20 of 150
+  </Text>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      accessibilityLabel="page-first"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="chevron-left"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="chevron-right"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="page-last"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders data table pagination with label 1`] = `
+<View
+  accessibilityLabel="pagination-container"
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "flexDirection": "row",
+        "flexWrap": "wrap",
+        "justifyContent": "flex-end",
+        "paddingLeft": 16,
+      },
+      undefined,
+    ]
+  }
+>
+  <Text
+    accessibilityLabel="label"
+    numberOfLines={3}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "fontSize": 12,
+            "marginRight": 16,
+          },
+          Object {
+            "color": "rgba(0, 0, 0, 0.6)",
+          },
+        ],
+      ]
+    }
+  >
+    11-20 of 150
+  </Text>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      accessibilityLabel="chevron-left"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="chevron-right"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders data table pagination with options select 1`] = `
+<View
+  accessibilityLabel="pagination-container"
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "flexDirection": "row",
+        "flexWrap": "wrap",
+        "justifyContent": "flex-end",
+        "paddingLeft": 16,
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    accessibilityLabel="Options Select"
+    style={
+      Object {
+        "alignItems": "center",
+        "flexDirection": "row",
+        "marginVertical": 6,
+      }
+    }
+  >
+    <Text
+      accessibilityLabel="selectPageDropdownLabel"
+      numberOfLines={3}
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "fontSize": 12,
+              "marginRight": 16,
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.6)",
+            },
+          ],
+        ]
+      }
+    >
+      Rows per page
+    </Text>
+    <View
+      collapsable={false}
+    >
+      <View
+        style={
+          Object {
+            "backgroundColor": "transparent",
+            "borderColor": "rgba(0, 0, 0, 0.29)",
+            "borderRadius": 4,
+            "borderStyle": "solid",
+            "borderWidth": 0.5,
+            "elevation": 0,
+            "marginRight": 16,
+            "minWidth": 64,
+            "shadowColor": "#000000",
+            "shadowOffset": Object {
+              "height": 0,
+              "width": 0,
+            },
+            "shadowOpacity": 0,
+            "shadowRadius": 0,
+            "textAlign": "center",
+          }
+        }
+      >
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "disabled": undefined,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Array [
+              Object {
+                "overflow": "hidden",
+              },
+              Object {
+                "borderRadius": 4,
+              },
+            ]
+          }
+        >
+          <View
+            style={
+              Array [
+                Object {
+                  "alignItems": "center",
+                  "flexDirection": "row",
+                  "justifyContent": "center",
+                },
+                Object {
+                  "flexDirection": "row-reverse",
+                },
+              ]
+            }
+          >
+            <View
+              style={
+                Object {
+                  "marginLeft": -4,
+                  "marginRight": 12,
+                }
+              }
+            >
+              <Text
+                accessibilityElementsHidden={true}
+                importantForAccessibility="no-hide-descendants"
+                pointerEvents="none"
+                selectable={false}
+                style={
+                  Array [
+                    Object {
+                      "backgroundColor": "transparent",
+                    },
+                    Object {
+                      "color": "#6200ee",
+                      "fontSize": 16,
+                    },
+                  ]
+                }
+              >
+                □
+              </Text>
+            </View>
+            <Text
+              numberOfLines={1}
+              selectable={false}
+              style={
+                Array [
+                  Object {
+                    "color": "#000000",
+                    "fontFamily": "System",
+                    "fontWeight": "400",
+                  },
+                  Object {
+                    "textAlign": "left",
+                  },
+                  Array [
+                    Object {
+                      "letterSpacing": 1,
+                      "marginHorizontal": 16,
+                      "marginVertical": 9,
+                      "textAlign": "center",
+                    },
+                    undefined,
+                    Object {
+                      "textTransform": "uppercase",
+                    },
+                    Object {
+                      "color": "#6200ee",
+                      "fontFamily": "System",
+                      "fontWeight": "500",
+                    },
+                    Object {
+                      "fontFamily": "System",
+                      "fontWeight": "500",
+                    },
+                    undefined,
+                  ],
+                ]
+              }
+            >
+              2
+            </Text>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+  <Text
+    accessibilityLabel="label"
+    numberOfLines={3}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "fontSize": 12,
+            "marginRight": 16,
+          },
+          Object {
+            "color": "rgba(0, 0, 0, 0.6)",
+          },
+        ],
+      ]
+    }
+  >
+    11-20 of 150
+  </Text>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      accessibilityLabel="page-first"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="chevron-left"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="chevron-right"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="page-last"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders data table title with press handler 1`] = `
+<View
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "alignContent": "center",
+        "flex": 1,
+        "flexDirection": "row",
+        "paddingVertical": 12,
+      },
+      undefined,
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "height": 24,
+        "justifyContent": "center",
+        "transform": Array [
+          Object {
+            "rotate": "180deg",
+          },
+        ],
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 16,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "fontSize": 12,
+            "fontWeight": "500",
+            "lineHeight": 24,
+          },
+          Object {
+            "maxHeight": 24,
+          },
+          Object {},
+          Object {
+            "marginLeft": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    Dessert
+  </Text>
+</View>
+`;
+
+exports[`renders data table title with sort icon 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "alignContent": "center",
+        "flex": 1,
+        "flexDirection": "row",
+        "paddingVertical": 12,
+      },
+      undefined,
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "height": 24,
+        "justifyContent": "center",
+        "transform": Array [
+          Object {
+            "rotate": "180deg",
+          },
+        ],
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 16,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "fontSize": 12,
+            "fontWeight": "500",
+            "lineHeight": 24,
+          },
+          Object {
+            "maxHeight": 24,
+          },
+          Object {},
+          Object {
+            "marginLeft": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    Dessert
+  </Text>
+</View>
+`;
+
+exports[`renders right aligned data table cell 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "alignItems": "center",
+          "flex": 1,
+          "flexDirection": "row",
+        },
+        Object {
+          "justifyContent": "flex-end",
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        undefined,
+      ]
+    }
+  >
+    356
+  </Text>
+</View>
+`;
+
+exports[`renders right aligned data table title 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "alignContent": "center",
+        "flex": 1,
+        "flexDirection": "row",
+        "paddingVertical": 12,
+      },
+      Object {
+        "justifyContent": "flex-end",
+      },
+      undefined,
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "fontSize": 12,
+            "fontWeight": "500",
+            "lineHeight": 24,
+          },
+          Object {
+            "maxHeight": 24,
+          },
+          Object {},
+          Object {
+            "color": "rgba(0, 0, 0, 0.6)",
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    Calories
+  </Text>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/DrawerItem.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/DrawerItem.test.js.snap
new file mode 100644
index 0000000..6f37a35
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/DrawerItem.test.js.snap
@@ -0,0 +1,309 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders DrawerItem with icon 1`] = `
+<View>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "selected": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "marginHorizontal": 10,
+            "marginVertical": 4,
+          },
+          Object {
+            "backgroundColor": "transparent",
+            "borderRadius": 4,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "padding": 8,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "alignItems": "center",
+            "flex": 1,
+            "flexDirection": "row",
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.68)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "marginRight": 32,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.68)",
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                  "marginLeft": 32,
+                },
+              ],
+            ]
+          }
+        >
+          Example item
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders active DrawerItem 1`] = `
+<View>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "selected": true,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "marginHorizontal": 10,
+            "marginVertical": 4,
+          },
+          Object {
+            "backgroundColor": "rgba(98, 0, 238, 0.12)",
+            "borderRadius": 4,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "padding": 8,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "alignItems": "center",
+            "flex": 1,
+            "flexDirection": "row",
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "marginRight": 32,
+                },
+                Object {
+                  "color": "#6200ee",
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                  "marginLeft": 32,
+                },
+              ],
+            ]
+          }
+        >
+          Example item
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders basic DrawerItem 1`] = `
+<View>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "selected": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "marginHorizontal": 10,
+            "marginVertical": 4,
+          },
+          Object {
+            "backgroundColor": "transparent",
+            "borderRadius": 4,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "padding": 8,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "alignItems": "center",
+            "flex": 1,
+            "flexDirection": "row",
+          }
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "marginRight": 32,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.68)",
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                  "marginLeft": 0,
+                },
+              ],
+            ]
+          }
+        >
+          Example item
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/FAB.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/FAB.test.js.snap
new file mode 100644
index 0000000..e73d27e
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/FAB.test.js.snap
@@ -0,0 +1,1152 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders custom color for the icon and label of the FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 56,
+            "width": 56,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "#AA0114",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders disabled FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "rgba(0, 0, 0, 0.12)",
+      "borderRadius": 28,
+      "elevation": 0,
+      "opacity": 1,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": true,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 56,
+            "width": 56,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.32)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders extended FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityLabel="Add items"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 48,
+            "paddingHorizontal": 16,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, .54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+      <Text
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "marginHorizontal": 8,
+              },
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, .54)",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+            ],
+          ]
+        }
+      >
+        Add items
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders loading FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 56,
+            "width": 56,
+          },
+        ]
+      }
+    >
+      <View
+        accessibilityRole="progressbar"
+        accessibilityState={
+          Object {
+            "busy": true,
+          }
+        }
+        accessible={true}
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            undefined,
+          ]
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 18,
+              "opacity": 1,
+              "width": 18,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "alignItems": "center",
+                "bottom": 0,
+                "justifyContent": "center",
+                "left": 0,
+                "position": "absolute",
+                "right": 0,
+                "top": 0,
+              }
+            }
+          >
+            <View
+              style={
+                Object {
+                  "height": 18,
+                  "transform": Array [
+                    Object {
+                      "rotate": "45deg",
+                    },
+                  ],
+                  "width": 18,
+                }
+              }
+            >
+              <View
+                collapsable={false}
+                style={
+                  Object {
+                    "height": 9,
+                    "overflow": "hidden",
+                    "width": 18,
+                  }
+                }
+              >
+                <View
+                  style={
+                    Object {
+                      "height": 18,
+                      "transform": Array [
+                        Object {
+                          "translateY": 0,
+                        },
+                        Object {
+                          "rotate": "-165deg",
+                        },
+                      ],
+                      "width": 18,
+                    }
+                  }
+                >
+                  <View
+                    collapsable={false}
+                    style={
+                      Object {
+                        "height": 9,
+                        "overflow": "hidden",
+                        "width": 18,
+                      }
+                    }
+                  >
+                    <View
+                      style={
+                        Object {
+                          "borderColor": "rgba(0, 0, 0, .54)",
+                          "borderRadius": 9,
+                          "borderWidth": 1.8,
+                          "height": 18,
+                          "width": 18,
+                        }
+                      }
+                    />
+                  </View>
+                </View>
+              </View>
+            </View>
+          </View>
+          <View
+            style={
+              Object {
+                "alignItems": "center",
+                "bottom": 0,
+                "justifyContent": "center",
+                "left": 0,
+                "position": "absolute",
+                "right": 0,
+                "top": 0,
+              }
+            }
+          >
+            <View
+              style={
+                Object {
+                  "height": 18,
+                  "transform": Array [
+                    Object {
+                      "rotate": "45deg",
+                    },
+                  ],
+                  "width": 18,
+                }
+              }
+            >
+              <View
+                collapsable={false}
+                style={
+                  Object {
+                    "height": 9,
+                    "overflow": "hidden",
+                    "top": 9,
+                    "width": 18,
+                  }
+                }
+              >
+                <View
+                  style={
+                    Object {
+                      "height": 18,
+                      "transform": Array [
+                        Object {
+                          "translateY": -9,
+                        },
+                        Object {
+                          "rotate": "345deg",
+                        },
+                      ],
+                      "width": 18,
+                    }
+                  }
+                >
+                  <View
+                    collapsable={false}
+                    style={
+                      Object {
+                        "height": 9,
+                        "overflow": "hidden",
+                        "width": 18,
+                      }
+                    }
+                  >
+                    <View
+                      style={
+                        Object {
+                          "borderColor": "rgba(0, 0, 0, .54)",
+                          "borderRadius": 9,
+                          "borderWidth": 1.8,
+                          "height": 18,
+                          "width": 18,
+                        }
+                      }
+                    />
+                  </View>
+                </View>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders normal FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 56,
+            "width": 56,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, .54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders not visible FAB 1`] = `
+<View
+  pointerEvents="none"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 56,
+            "width": 56,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, .54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders small FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 40,
+            "width": 40,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, .54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders visible FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 0,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 0,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 56,
+            "width": 56,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, .54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/IconButton.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/IconButton.test.js.snap
new file mode 100644
index 0000000..0176ad3
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/IconButton.test.js.snap
@@ -0,0 +1,396 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders disabled icon button 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": true,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        Object {
+          "opacity": 0.32,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders icon button by default 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        undefined,
+        undefined,
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders icon button with color 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        undefined,
+        undefined,
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#e91e63",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders icon button with size 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 22.5,
+          "height": 45,
+          "width": 45,
+        },
+        undefined,
+        undefined,
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 30,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders icon change animated 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        undefined,
+        undefined,
+      ],
+    ]
+  }
+>
+  <View>
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 24,
+            "width": 24,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "transform": Array [
+              Object {
+                "rotate": "0deg",
+              },
+            ],
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListAccordion.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListAccordion.test.js.snap
new file mode 100644
index 0000000..2838959
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListAccordion.test.js.snap
@@ -0,0 +1,835 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders expanded accordion 1`] = `
+<View>
+  <View
+    style={
+      Object {
+        "backgroundColor": "#f6f6f6",
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "expanded": true,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "padding": 8,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+          }
+        }
+      >
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "flex": 1,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            numberOfLines={1}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 16,
+                  },
+                  Object {
+                    "color": "#6200ee",
+                  },
+                  undefined,
+                ],
+              ]
+            }
+          >
+            Accordion item 1
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              undefined,
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          List item 1
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list accordion with children 1`] = `
+<View>
+  <View
+    style={
+      Object {
+        "backgroundColor": "#f6f6f6",
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "expanded": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "padding": 8,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+          }
+        }
+      >
+        <View
+          pointerEvents="box-none"
+          style={
+            Array [
+              Object {
+                "alignItems": "center",
+                "height": 40,
+                "justifyContent": "center",
+                "margin": 8,
+                "width": 40,
+              },
+              undefined,
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "flex": 1,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            numberOfLines={1}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 16,
+                  },
+                  Object {
+                    "color": "rgba(0, 0, 0, 0.87)",
+                  },
+                  undefined,
+                ],
+              ]
+            }
+          >
+            Expandable list item
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              undefined,
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list accordion with custom title and description styles 1`] = `
+<View>
+  <View
+    style={
+      Object {
+        "backgroundColor": "#f6f6f6",
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "expanded": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "padding": 8,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+          }
+        }
+      >
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "flex": 1,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            numberOfLines={1}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 16,
+                  },
+                  Object {
+                    "color": "rgba(0, 0, 0, 0.87)",
+                  },
+                  Object {
+                    "color": "#f44336",
+                  },
+                ],
+              ]
+            }
+          >
+            Accordion item 1
+          </Text>
+          <Text
+            numberOfLines={2}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 14,
+                  },
+                  Object {
+                    "color": "rgba(0, 0, 0, 0.54)",
+                  },
+                  Object {
+                    "color": "#f44336",
+                  },
+                ],
+              ]
+            }
+          >
+            Describes the expandable list item
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "alignItems": "center",
+                "height": 40,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list accordion with left items 1`] = `
+<View>
+  <View
+    style={
+      Object {
+        "backgroundColor": "#f6f6f6",
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "expanded": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "padding": 8,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+          }
+        }
+      >
+        <View
+          pointerEvents="box-none"
+          style={
+            Array [
+              Object {
+                "alignItems": "center",
+                "height": 40,
+                "justifyContent": "center",
+                "margin": 8,
+                "width": 40,
+              },
+              undefined,
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "flex": 1,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            numberOfLines={1}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 16,
+                  },
+                  Object {
+                    "color": "rgba(0, 0, 0, 0.87)",
+                  },
+                  undefined,
+                ],
+              ]
+            }
+          >
+            Accordion item 1
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              undefined,
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders multiline list accordion 1`] = `
+<View>
+  <View
+    style={
+      Object {
+        "backgroundColor": "#f6f6f6",
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "expanded": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "padding": 8,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+          }
+        }
+      >
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "flex": 1,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            numberOfLines={1}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 16,
+                  },
+                  Object {
+                    "color": "rgba(0, 0, 0, 0.87)",
+                  },
+                  undefined,
+                ],
+              ]
+            }
+          >
+            Expandable list item
+          </Text>
+          <Text
+            numberOfLines={2}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 14,
+                  },
+                  Object {
+                    "color": "rgba(0, 0, 0, 0.54)",
+                  },
+                  undefined,
+                ],
+              ]
+            }
+          >
+            Describes the expandable list item
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "alignItems": "center",
+                "height": 40,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListItem.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListItem.test.js.snap
new file mode 100644
index 0000000..9695c3d
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListItem.test.js.snap
@@ -0,0 +1,876 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders list item with custom description 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        List Item with custom description
+      </Text>
+      <View>
+        <Text
+          numberOfLines={2}
+          style={
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 14,
+            }
+          }
+        >
+          React Native Paper is a high-quality, standard-compliant Design Design library that has you covered in all major use-cases.
+        </Text>
+        <View>
+          <View
+            style={
+              Object {
+                "backgroundColor": "#ebebeb",
+                "borderColor": "#ebebeb",
+                "borderRadius": 16,
+                "borderStyle": "solid",
+                "borderWidth": 0.5,
+                "elevation": 0,
+                "flexDirection": "column",
+              }
+            }
+          >
+            <View
+              accessibilityRole="button"
+              accessibilityState={
+                Object {
+                  "disabled": false,
+                  "selected": false,
+                }
+              }
+              accessible={true}
+              focusable={true}
+              onClick={[Function]}
+              onResponderGrant={[Function]}
+              onResponderMove={[Function]}
+              onResponderRelease={[Function]}
+              onResponderTerminate={[Function]}
+              onResponderTerminationRequest={[Function]}
+              onStartShouldSetResponder={[Function]}
+              style={
+                Array [
+                  Object {
+                    "overflow": "hidden",
+                  },
+                  Array [
+                    Object {
+                      "borderRadius": 16,
+                    },
+                    Object {
+                      "flexGrow": 1,
+                    },
+                  ],
+                ]
+              }
+            >
+              <View
+                style={
+                  Array [
+                    Object {
+                      "alignItems": "center",
+                      "flexDirection": "row",
+                      "flexGrow": 1,
+                      "paddingLeft": 4,
+                      "position": "relative",
+                    },
+                    Object {
+                      "paddingRight": 4,
+                    },
+                  ]
+                }
+              >
+                <View
+                  style={
+                    Array [
+                      Object {
+                        "alignSelf": "center",
+                        "padding": 4,
+                      },
+                      null,
+                    ]
+                  }
+                >
+                  <Text
+                    accessibilityElementsHidden={true}
+                    importantForAccessibility="no-hide-descendants"
+                    pointerEvents="none"
+                    selectable={false}
+                    style={
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                        },
+                        Object {
+                          "color": "rgba(0, 0, 0, 0.54)",
+                          "fontSize": 18,
+                        },
+                      ]
+                    }
+                  >
+                    □
+                  </Text>
+                </View>
+                <Text
+                  numberOfLines={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "lineHeight": 24,
+                          "marginVertical": 4,
+                          "minHeight": 24,
+                          "textAlignVertical": "center",
+                        },
+                        Object {
+                          "color": "rgba(0, 0, 0, 0.87)",
+                          "fontFamily": "System",
+                          "fontWeight": "400",
+                          "marginLeft": 4,
+                          "marginRight": 8,
+                        },
+                        undefined,
+                      ],
+                    ]
+                  }
+                >
+                  DOCS.pdf
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list item with custom title and description styles 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              Object {
+                "fontSize": 20,
+              },
+            ],
+          ]
+        }
+      >
+        First Item
+      </Text>
+      <Text
+        numberOfLines={2}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 14,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+              },
+              Object {
+                "color": "#f44336",
+              },
+            ],
+          ]
+        }
+      >
+        Item description
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list item with left and right items 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <Text>
+      GG
+    </Text>
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        First Item
+      </Text>
+      <Text
+        numberOfLines={2}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 14,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Item description
+      </Text>
+    </View>
+    <View
+      pointerEvents="box-none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "height": 40,
+            "justifyContent": "center",
+            "margin": 8,
+            "width": 40,
+          },
+          Object {
+            "marginRight": 0,
+          },
+        ]
+      }
+    >
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list item with left item 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      pointerEvents="box-none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "height": 40,
+            "justifyContent": "center",
+            "margin": 8,
+            "width": 40,
+          },
+          Object {
+            "marginLeft": 0,
+            "marginRight": 16,
+            "marginVertical": 0,
+          },
+        ]
+      }
+    >
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        First Item
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list item with right item 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        First Item
+      </Text>
+    </View>
+    <Text>
+      GG
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders list item with title and description 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        First Item
+      </Text>
+      <Text
+        numberOfLines={2}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 14,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Description for first item
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders with a description with typeof number 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              Object {
+                "fontSize": 20,
+              },
+            ],
+          ]
+        }
+      >
+        First Item
+      </Text>
+      <Text
+        numberOfLines={2}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 14,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+              },
+              Object {
+                "color": "#f44336",
+              },
+            ],
+          ]
+        }
+      >
+        123
+      </Text>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListSection.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListSection.test.js.snap
new file mode 100644
index 0000000..f4c6c68
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListSection.test.js.snap
@@ -0,0 +1,895 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders list section with custom title style 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "marginVertical": 8,
+      },
+      undefined,
+    ]
+  }
+  theme={
+    Object {
+      "animation": Object {
+        "scale": 1,
+      },
+      "colors": Object {
+        "accent": "#03dac4",
+        "backdrop": "rgba(0, 0, 0, 0.5)",
+        "background": "#f6f6f6",
+        "disabled": "rgba(0, 0, 0, 0.26)",
+        "error": "#B00020",
+        "notification": "#f50057",
+        "onSurface": "#000000",
+        "placeholder": "rgba(0, 0, 0, 0.54)",
+        "primary": "#6200ee",
+        "surface": "#ffffff",
+        "text": "#000000",
+      },
+      "dark": false,
+      "fonts": Object {
+        "light": Object {
+          "fontFamily": "System",
+          "fontWeight": "300",
+        },
+        "medium": Object {
+          "fontFamily": "System",
+          "fontWeight": "500",
+        },
+        "regular": Object {
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        "thin": Object {
+          "fontFamily": "System",
+          "fontWeight": "100",
+        },
+      },
+      "roundness": 4,
+    }
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "paddingHorizontal": 16,
+            "paddingVertical": 13,
+          },
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontWeight": "500",
+          },
+          Object {
+            "color": "#f44336",
+          },
+        ],
+      ]
+    }
+  >
+    Some title
+  </Text>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        pointerEvents="box-none"
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "height": 40,
+              "justifyContent": "center",
+              "margin": 8,
+              "width": 40,
+            },
+            Object {
+              "marginLeft": 0,
+              "marginRight": 16,
+              "marginVertical": 0,
+            },
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          First Item
+        </Text>
+      </View>
+    </View>
+  </View>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        pointerEvents="box-none"
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "height": 40,
+              "justifyContent": "center",
+              "margin": 8,
+              "width": 40,
+            },
+            Object {
+              "marginLeft": 0,
+              "marginRight": 16,
+              "marginVertical": 0,
+            },
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          Second Item
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list section with subheader 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "marginVertical": 8,
+      },
+      undefined,
+    ]
+  }
+  theme={
+    Object {
+      "animation": Object {
+        "scale": 1,
+      },
+      "colors": Object {
+        "accent": "#03dac4",
+        "backdrop": "rgba(0, 0, 0, 0.5)",
+        "background": "#f6f6f6",
+        "disabled": "rgba(0, 0, 0, 0.26)",
+        "error": "#B00020",
+        "notification": "#f50057",
+        "onSurface": "#000000",
+        "placeholder": "rgba(0, 0, 0, 0.54)",
+        "primary": "#6200ee",
+        "surface": "#ffffff",
+        "text": "#000000",
+      },
+      "dark": false,
+      "fonts": Object {
+        "light": Object {
+          "fontFamily": "System",
+          "fontWeight": "300",
+        },
+        "medium": Object {
+          "fontFamily": "System",
+          "fontWeight": "500",
+        },
+        "regular": Object {
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        "thin": Object {
+          "fontFamily": "System",
+          "fontWeight": "100",
+        },
+      },
+      "roundness": 4,
+    }
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "paddingHorizontal": 16,
+            "paddingVertical": 13,
+          },
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontWeight": "500",
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    Some title
+  </Text>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        pointerEvents="box-none"
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "height": 40,
+              "justifyContent": "center",
+              "margin": 8,
+              "width": 40,
+            },
+            Object {
+              "marginLeft": 0,
+              "marginRight": 16,
+              "marginVertical": 0,
+            },
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          First Item
+        </Text>
+      </View>
+    </View>
+  </View>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        pointerEvents="box-none"
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "height": 40,
+              "justifyContent": "center",
+              "margin": 8,
+              "width": 40,
+            },
+            Object {
+              "marginLeft": 0,
+              "marginRight": 16,
+              "marginVertical": 0,
+            },
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          Second Item
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list section without subheader 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "marginVertical": 8,
+      },
+      undefined,
+    ]
+  }
+  theme={
+    Object {
+      "animation": Object {
+        "scale": 1,
+      },
+      "colors": Object {
+        "accent": "#03dac4",
+        "backdrop": "rgba(0, 0, 0, 0.5)",
+        "background": "#f6f6f6",
+        "disabled": "rgba(0, 0, 0, 0.26)",
+        "error": "#B00020",
+        "notification": "#f50057",
+        "onSurface": "#000000",
+        "placeholder": "rgba(0, 0, 0, 0.54)",
+        "primary": "#6200ee",
+        "surface": "#ffffff",
+        "text": "#000000",
+      },
+      "dark": false,
+      "fonts": Object {
+        "light": Object {
+          "fontFamily": "System",
+          "fontWeight": "300",
+        },
+        "medium": Object {
+          "fontFamily": "System",
+          "fontWeight": "500",
+        },
+        "regular": Object {
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        "thin": Object {
+          "fontFamily": "System",
+          "fontWeight": "100",
+        },
+      },
+      "roundness": 4,
+    }
+  }
+>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        pointerEvents="box-none"
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "height": 40,
+              "justifyContent": "center",
+              "margin": 8,
+              "width": 40,
+            },
+            Object {
+              "marginLeft": 0,
+              "marginRight": 16,
+              "marginVertical": 0,
+            },
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          First Item
+        </Text>
+      </View>
+    </View>
+  </View>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        pointerEvents="box-none"
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "height": 40,
+              "justifyContent": "center",
+              "margin": 8,
+              "width": 40,
+            },
+            Object {
+              "marginLeft": 0,
+              "marginRight": 16,
+              "marginVertical": 0,
+            },
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          Second Item
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Menu.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Menu.test.js.snap
new file mode 100644
index 0000000..3182852
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Menu.test.js.snap
@@ -0,0 +1,328 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders menu with content styles 1`] = `
+<View
+  collapsable={false}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "transparent",
+        "borderColor": "rgba(0, 0, 0, 0.29)",
+        "borderRadius": 4,
+        "borderStyle": "solid",
+        "borderWidth": 0.5,
+        "elevation": 0,
+        "minWidth": 64,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 0,
+          "width": 0,
+        },
+        "shadowOpacity": 0,
+        "shadowRadius": 0,
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 4,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "flexDirection": "row",
+              "justifyContent": "center",
+            },
+            undefined,
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "letterSpacing": 1,
+                  "marginHorizontal": 16,
+                  "marginVertical": 9,
+                  "textAlign": "center",
+                },
+                undefined,
+                Object {
+                  "textTransform": "uppercase",
+                },
+                Object {
+                  "color": "#6200ee",
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                },
+                Object {
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          Open menu
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders not visible menu 1`] = `
+<View
+  collapsable={false}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "transparent",
+        "borderColor": "rgba(0, 0, 0, 0.29)",
+        "borderRadius": 4,
+        "borderStyle": "solid",
+        "borderWidth": 0.5,
+        "elevation": 0,
+        "minWidth": 64,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 0,
+          "width": 0,
+        },
+        "shadowOpacity": 0,
+        "shadowRadius": 0,
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 4,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "flexDirection": "row",
+              "justifyContent": "center",
+            },
+            undefined,
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "letterSpacing": 1,
+                  "marginHorizontal": 16,
+                  "marginVertical": 9,
+                  "textAlign": "center",
+                },
+                undefined,
+                Object {
+                  "textTransform": "uppercase",
+                },
+                Object {
+                  "color": "#6200ee",
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                },
+                Object {
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          Open menu
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders visible menu 1`] = `
+<View
+  collapsable={false}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "transparent",
+        "borderColor": "rgba(0, 0, 0, 0.29)",
+        "borderRadius": 4,
+        "borderStyle": "solid",
+        "borderWidth": 0.5,
+        "elevation": 0,
+        "minWidth": 64,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 0,
+          "width": 0,
+        },
+        "shadowOpacity": 0,
+        "shadowRadius": 0,
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 4,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "flexDirection": "row",
+              "justifyContent": "center",
+            },
+            undefined,
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "letterSpacing": 1,
+                  "marginHorizontal": 16,
+                  "marginVertical": 9,
+                  "textAlign": "center",
+                },
+                undefined,
+                Object {
+                  "textTransform": "uppercase",
+                },
+                Object {
+                  "color": "#6200ee",
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                },
+                Object {
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          Open menu
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Portal.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Portal.test.js.snap
new file mode 100644
index 0000000..da6b2eb
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Portal.test.js.snap
@@ -0,0 +1,38 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders portal with siblings 1`] = `
+Array [
+  <View
+    collapsable={false}
+    pointerEvents="box-none"
+    style={
+      Object {
+        "flex": 1,
+      }
+    }
+  >
+    <Text>
+      Outside content
+    </Text>
+  </View>,
+  <View
+    collapsable={false}
+    pointerEvents="box-none"
+    style={
+      Object {
+        "bottom": 0,
+        "left": 0,
+        "position": "absolute",
+        "right": 0,
+        "top": 0,
+      }
+    }
+  >
+    <Text
+      testID="content"
+    >
+      Portal content
+    </Text>
+  </View>,
+]
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ProgressBar.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ProgressBar.test.js.snap
new file mode 100644
index 0000000..cf4ff44
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ProgressBar.test.js.snap
@@ -0,0 +1,191 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders colored progress bar 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": true,
+    }
+  }
+  accessibilityValue={
+    Object {
+      "max": 100,
+      "min": 0,
+      "now": 20,
+    }
+  }
+  accessible={true}
+  onLayout={[Function]}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(255, 0, 0, 0.38)",
+        "height": 4,
+        "opacity": 0,
+        "overflow": "hidden",
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "backgroundColor": "red",
+          "flex": 1,
+          "transform": Array [
+            Object {
+              "translateX": -50,
+            },
+            Object {
+              "scaleX": 0.0001,
+            },
+          ],
+          "width": 100,
+        }
+      }
+    />
+  </View>
+</View>
+`;
+
+exports[`renders hidden progress bar 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": false,
+    }
+  }
+  accessibilityValue={
+    Object {
+      "max": 100,
+      "min": 0,
+      "now": 20,
+    }
+  }
+  accessible={true}
+  onLayout={[Function]}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(98, 0, 238, 0.38)",
+        "height": 4,
+        "opacity": 0,
+        "overflow": "hidden",
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "backgroundColor": "#6200ee",
+          "flex": 1,
+          "transform": Array [
+            Object {
+              "translateX": -50,
+            },
+            Object {
+              "scaleX": 0.0001,
+            },
+          ],
+          "width": 100,
+        }
+      }
+    />
+  </View>
+</View>
+`;
+
+exports[`renders indeterminate progress bar 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": true,
+    }
+  }
+  accessibilityValue={Object {}}
+  accessible={true}
+  onLayout={[Function]}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(98, 0, 238, 0.38)",
+        "height": 4,
+        "opacity": 0,
+        "overflow": "hidden",
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "backgroundColor": "#6200ee",
+          "flex": 1,
+          "transform": Array [
+            Object {
+              "translateX": -50,
+            },
+            Object {
+              "scaleX": 0.0001,
+            },
+          ],
+          "width": 100,
+        }
+      }
+    />
+  </View>
+</View>
+`;
+
+exports[`renders progress bar with specific progress 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": true,
+    }
+  }
+  accessibilityValue={
+    Object {
+      "max": 100,
+      "min": 0,
+      "now": 20,
+    }
+  }
+  accessible={true}
+  onLayout={[Function]}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(98, 0, 238, 0.38)",
+        "height": 4,
+        "opacity": 0,
+        "overflow": "hidden",
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "backgroundColor": "#6200ee",
+          "flex": 1,
+          "transform": Array [
+            Object {
+              "translateX": -50,
+            },
+            Object {
+              "scaleX": 0.0001,
+            },
+          ],
+          "width": 100,
+        }
+      }
+    />
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Searchbar.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Searchbar.test.js.snap
new file mode 100644
index 0000000..2946660
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Searchbar.test.js.snap
@@ -0,0 +1,388 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders with placeholder 1`] = `
+<View
+  style={
+    Object {
+      "alignItems": "center",
+      "backgroundColor": "#ffffff",
+      "borderRadius": 4,
+      "elevation": 4,
+      "flexDirection": "row",
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 3,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 4,
+    }
+  }
+>
+  <View
+    accessibilityLabel="search"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    hitSlop={
+      Object {
+        "bottom": 6,
+        "left": 6,
+        "right": 6,
+        "top": 6,
+      }
+    }
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+            "margin": 6,
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "width": 36,
+          },
+          undefined,
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View>
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+  <TextInput
+    accessibilityRole="search"
+    accessibilityTraits="search"
+    allowFontScaling={true}
+    keyboardAppearance="light"
+    placeholder="Search"
+    placeholderTextColor="rgba(0, 0, 0, 0.54)"
+    rejectResponderTermination={true}
+    returnKeyType="search"
+    selectionColor="#6200ee"
+    style={
+      Array [
+        Object {
+          "alignSelf": "stretch",
+          "flex": 1,
+          "fontSize": 18,
+          "minWidth": 0,
+          "paddingLeft": 8,
+          "textAlign": "left",
+        },
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        undefined,
+      ]
+    }
+    underlineColorAndroid="transparent"
+  />
+  <View
+    accessibilityLabel="clear"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": true,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    hitSlop={
+      Object {
+        "bottom": 6,
+        "left": 6,
+        "right": 6,
+        "top": 6,
+      }
+    }
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+            "margin": 6,
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "width": 36,
+          },
+          Object {
+            "opacity": 0.32,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View>
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(255, 255, 255, 0)",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders with text 1`] = `
+<View
+  style={
+    Object {
+      "alignItems": "center",
+      "backgroundColor": "#ffffff",
+      "borderRadius": 4,
+      "elevation": 4,
+      "flexDirection": "row",
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 3,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 4,
+    }
+  }
+>
+  <View
+    accessibilityLabel="search"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    hitSlop={
+      Object {
+        "bottom": 6,
+        "left": 6,
+        "right": 6,
+        "top": 6,
+      }
+    }
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+            "margin": 6,
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "width": 36,
+          },
+          undefined,
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View>
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+  <TextInput
+    accessibilityRole="search"
+    accessibilityTraits="search"
+    allowFontScaling={true}
+    keyboardAppearance="light"
+    placeholder="Search"
+    placeholderTextColor="rgba(0, 0, 0, 0.54)"
+    rejectResponderTermination={true}
+    returnKeyType="search"
+    selectionColor="#6200ee"
+    style={
+      Array [
+        Object {
+          "alignSelf": "stretch",
+          "flex": 1,
+          "fontSize": 18,
+          "minWidth": 0,
+          "paddingLeft": 8,
+          "textAlign": "left",
+        },
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        undefined,
+      ]
+    }
+    underlineColorAndroid="transparent"
+    value="query"
+  />
+  <View
+    accessibilityLabel="clear"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": false,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    hitSlop={
+      Object {
+        "bottom": 6,
+        "left": 6,
+        "right": 6,
+        "top": 6,
+      }
+    }
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+            "margin": 6,
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "width": 36,
+          },
+          false,
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View>
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Snackbar.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Snackbar.test.js.snap
new file mode 100644
index 0000000..1e1a28b
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Snackbar.test.js.snap
@@ -0,0 +1,336 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders not visible snackbar with content wrapper but no actual content 1`] = `null`;
+
+exports[`renders snackbar with Text as a child 1`] = `
+<RCTSafeAreaView
+  emulateUnlessSupported={true}
+  pointerEvents="box-none"
+  style={
+    Array [
+      Object {
+        "bottom": 0,
+        "position": "absolute",
+        "width": "100%",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    accessibilityLiveRegion="polite"
+    pointerEvents="box-none"
+    style={
+      Object {
+        "alignItems": "center",
+        "backgroundColor": "#000000",
+        "borderRadius": 4,
+        "elevation": 6,
+        "flexDirection": "row",
+        "justifyContent": "space-between",
+        "margin": 8,
+        "opacity": 1,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 5,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 6,
+        "transform": Array [
+          Object {
+            "scale": 1,
+          },
+        ],
+      }
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flex": 1,
+              "flexWrap": "wrap",
+              "marginLeft": 16,
+              "marginVertical": 14,
+            },
+            Object {
+              "color": "#ffffff",
+              "marginRight": 16,
+            },
+          ],
+        ]
+      }
+    >
+      <Text>
+        Snackbar content
+      </Text>
+    </Text>
+  </View>
+</RCTSafeAreaView>
+`;
+
+exports[`renders snackbar with action button 1`] = `
+<RCTSafeAreaView
+  emulateUnlessSupported={true}
+  pointerEvents="box-none"
+  style={
+    Array [
+      Object {
+        "bottom": 0,
+        "position": "absolute",
+        "width": "100%",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    accessibilityLiveRegion="polite"
+    pointerEvents="box-none"
+    style={
+      Object {
+        "alignItems": "center",
+        "backgroundColor": "#000000",
+        "borderRadius": 4,
+        "elevation": 6,
+        "flexDirection": "row",
+        "justifyContent": "space-between",
+        "margin": 8,
+        "opacity": 1,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 5,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 6,
+        "transform": Array [
+          Object {
+            "scale": 1,
+          },
+        ],
+      }
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flex": 1,
+              "flexWrap": "wrap",
+              "marginLeft": 16,
+              "marginVertical": 14,
+            },
+            Object {
+              "color": "#ffffff",
+              "marginRight": 0,
+            },
+          ],
+        ]
+      }
+    >
+      Snackbar content
+    </Text>
+    <View
+      style={
+        Object {
+          "backgroundColor": "transparent",
+          "borderColor": "transparent",
+          "borderRadius": 4,
+          "borderStyle": "solid",
+          "borderWidth": 0,
+          "elevation": 0,
+          "marginHorizontal": 8,
+          "marginVertical": 6,
+          "minWidth": "auto",
+          "shadowColor": "#000000",
+          "shadowOffset": Object {
+            "height": 0,
+            "width": 0,
+          },
+          "shadowOpacity": 0,
+          "shadowRadius": 0,
+        }
+      }
+    >
+      <View
+        accessibilityRole="button"
+        accessibilityState={
+          Object {
+            "disabled": undefined,
+          }
+        }
+        accessible={true}
+        focusable={true}
+        onClick={[Function]}
+        onResponderGrant={[Function]}
+        onResponderMove={[Function]}
+        onResponderRelease={[Function]}
+        onResponderTerminate={[Function]}
+        onResponderTerminationRequest={[Function]}
+        onStartShouldSetResponder={[Function]}
+        style={
+          Array [
+            Object {
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 4,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Array [
+              Object {
+                "alignItems": "center",
+                "flexDirection": "row",
+                "justifyContent": "center",
+              },
+              undefined,
+            ]
+          }
+        >
+          <Text
+            numberOfLines={1}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "letterSpacing": 1,
+                    "marginHorizontal": 16,
+                    "marginVertical": 9,
+                    "textAlign": "center",
+                  },
+                  Object {
+                    "marginHorizontal": 8,
+                  },
+                  Object {
+                    "textTransform": "uppercase",
+                  },
+                  Object {
+                    "color": "#03dac4",
+                    "fontFamily": "System",
+                    "fontWeight": "500",
+                  },
+                  Object {
+                    "fontFamily": "System",
+                    "fontWeight": "500",
+                  },
+                  undefined,
+                ],
+              ]
+            }
+          >
+            Undo
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</RCTSafeAreaView>
+`;
+
+exports[`renders snackbar with content 1`] = `
+<RCTSafeAreaView
+  emulateUnlessSupported={true}
+  pointerEvents="box-none"
+  style={
+    Array [
+      Object {
+        "bottom": 0,
+        "position": "absolute",
+        "width": "100%",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    accessibilityLiveRegion="polite"
+    pointerEvents="box-none"
+    style={
+      Object {
+        "alignItems": "center",
+        "backgroundColor": "#000000",
+        "borderRadius": 4,
+        "elevation": 6,
+        "flexDirection": "row",
+        "justifyContent": "space-between",
+        "margin": 8,
+        "opacity": 1,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 5,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 6,
+        "transform": Array [
+          Object {
+            "scale": 1,
+          },
+        ],
+      }
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flex": 1,
+              "flexWrap": "wrap",
+              "marginLeft": 16,
+              "marginVertical": 14,
+            },
+            Object {
+              "color": "#ffffff",
+              "marginRight": 16,
+            },
+          ],
+        ]
+      }
+    >
+      Snackbar content
+    </Text>
+  </View>
+</RCTSafeAreaView>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Switch.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Switch.test.js.snap
new file mode 100644
index 0000000..73c2056
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Switch.test.js.snap
@@ -0,0 +1,74 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders disabled switch 1`] = `
+<RCTSwitch
+  accessibilityRole="switch"
+  disabled={true}
+  onChange={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  onTintColor="#03dac4"
+  style={
+    Object {
+      "height": 31,
+      "width": 51,
+    }
+  }
+  tintColor=""
+  value={true}
+/>
+`;
+
+exports[`renders off switch 1`] = `
+<RCTSwitch
+  accessibilityRole="switch"
+  onChange={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  onTintColor="#03dac4"
+  style={
+    Object {
+      "height": 31,
+      "width": 51,
+    }
+  }
+  tintColor=""
+  value={false}
+/>
+`;
+
+exports[`renders on switch 1`] = `
+<RCTSwitch
+  accessibilityRole="switch"
+  onChange={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  onTintColor="#03dac4"
+  style={
+    Object {
+      "height": 31,
+      "width": 51,
+    }
+  }
+  tintColor=""
+  value={true}
+/>
+`;
+
+exports[`renders switch with color 1`] = `
+<RCTSwitch
+  accessibilityRole="switch"
+  onChange={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  onTintColor="#e91e63"
+  style={
+    Object {
+      "height": 31,
+      "width": 51,
+    }
+  }
+  tintColor=""
+  value={true}
+/>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/TextInput.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/TextInput.test.js.snap
new file mode 100644
index 0000000..d932270
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/TextInput.test.js.snap
@@ -0,0 +1,1411 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`correctly applies a component as the text label 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "rgb(231, 231, 231)",
+        "borderTopLeftRadius": 4,
+        "borderTopRightRadius": 4,
+      },
+      Object {},
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(0, 0, 0, 0.26)",
+        "bottom": 0,
+        "height": 2,
+        "left": 0,
+        "position": "absolute",
+        "right": 0,
+        "transform": Array [
+          Object {
+            "scaleY": 0.5,
+          },
+        ],
+        "zIndex": 1,
+      }
+    }
+  />
+  <View
+    style={
+      Array [
+        Object {
+          "paddingBottom": 0,
+          "paddingTop": 0,
+        },
+        Object {
+          "minHeight": 64,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Object {
+          "bottom": 0,
+          "left": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+          "transform": Array [
+            Object {
+              "translateX": 3,
+            },
+          ],
+          "zIndex": 3,
+        }
+      }
+    >
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        onLayout={[Function]}
+        style={
+          Object {
+            "color": "#6200ee",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 12,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        <Text
+          style={
+            Object {
+              "color": "#f44336",
+            }
+          }
+        >
+          Flat input
+        </Text>
+      </Text>
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        style={
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 12,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        <Text
+          style={
+            Object {
+              "color": "#f44336",
+            }
+          }
+        >
+          Flat input
+        </Text>
+      </Text>
+    </View>
+    <TextInput
+      allowFontScaling={true}
+      editable={true}
+      maxFontSizeMultiplier={1.5}
+      multiline={false}
+      onBlur={[Function]}
+      onChangeText={[Function]}
+      onFocus={[Function]}
+      placeholder=""
+      placeholderTextColor="rgba(0, 0, 0, 0.54)"
+      rejectResponderTermination={true}
+      selectionColor="#6200ee"
+      style={
+        Array [
+          Object {
+            "flexGrow": 1,
+            "margin": 0,
+          },
+          Object {
+            "paddingLeft": 12,
+            "paddingRight": 12,
+          },
+          Object {
+            "height": 64,
+          },
+          Object {
+            "paddingBottom": 4,
+            "paddingTop": 24,
+          },
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "textAlign": "left",
+            "textAlignVertical": "center",
+          },
+          false,
+          Array [
+            Object {},
+          ],
+        ]
+      }
+      testID="text-input-flat"
+      underlineColorAndroid="transparent"
+      value="Some test value"
+    />
+  </View>
+</View>
+`;
+
+exports[`correctly applies default textAlign based on default RTL 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "rgb(231, 231, 231)",
+        "borderTopLeftRadius": 4,
+        "borderTopRightRadius": 4,
+      },
+      Object {},
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(0, 0, 0, 0.26)",
+        "bottom": 0,
+        "height": 2,
+        "left": 0,
+        "position": "absolute",
+        "right": 0,
+        "transform": Array [
+          Object {
+            "scaleY": 0.5,
+          },
+        ],
+        "zIndex": 1,
+      }
+    }
+  />
+  <View
+    style={
+      Array [
+        Object {
+          "paddingBottom": 0,
+          "paddingTop": 0,
+        },
+        Object {
+          "minHeight": 64,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Object {
+          "bottom": 0,
+          "left": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+          "transform": Array [
+            Object {
+              "translateX": 3,
+            },
+          ],
+          "zIndex": 3,
+        }
+      }
+    >
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        onLayout={[Function]}
+        style={
+          Object {
+            "color": "#6200ee",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 12,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        style={
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 12,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+    </View>
+    <TextInput
+      allowFontScaling={true}
+      editable={true}
+      maxFontSizeMultiplier={1.5}
+      multiline={false}
+      onBlur={[Function]}
+      onChangeText={[Function]}
+      onFocus={[Function]}
+      placeholder=""
+      placeholderTextColor="rgba(0, 0, 0, 0.54)"
+      rejectResponderTermination={true}
+      selectionColor="#6200ee"
+      style={
+        Array [
+          Object {
+            "flexGrow": 1,
+            "margin": 0,
+          },
+          Object {
+            "paddingLeft": 12,
+            "paddingRight": 12,
+          },
+          Object {
+            "height": 64,
+          },
+          Object {
+            "paddingBottom": 4,
+            "paddingTop": 24,
+          },
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "textAlign": "left",
+            "textAlignVertical": "center",
+          },
+          false,
+          Array [
+            Object {},
+          ],
+        ]
+      }
+      testID="text-input-flat"
+      underlineColorAndroid="transparent"
+      value="Some test value"
+    />
+  </View>
+</View>
+`;
+
+exports[`correctly applies height to multiline Outline TextInput 1`] = `
+<View
+  style={Object {}}
+>
+  <View
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "bottom": 0,
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 6,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+          "borderColor": "rgba(0, 0, 0, 0.54)",
+          "borderRadius": 4,
+          "borderWidth": 1,
+        },
+      ]
+    }
+    testID="text-input-outline"
+  />
+  <View>
+    <View
+      style={
+        Array [
+          Object {
+            "paddingBottom": 0,
+          },
+          Object {
+            "minHeight": 100,
+            "paddingTop": 8,
+          },
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "transform": Array [
+              Object {
+                "translateX": 3,
+              },
+            ],
+            "zIndex": 3,
+          }
+        }
+      >
+        <View
+          pointerEvents="none"
+          style={
+            Object {
+              "backgroundColor": "#f6f6f6",
+              "bottom": 4,
+              "left": 10,
+              "maxHeight": 2,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 6,
+              "transform": Array [
+                Object {
+                  "translateX": -3,
+                },
+              ],
+              "width": 12,
+            }
+          }
+        />
+        <Text
+          maxFontSizeMultiplier={1.5}
+          numberOfLines={1}
+          style={
+            Object {
+              "backgroundColor": "#f6f6f6",
+              "color": "transparent",
+              "fontFamily": "System",
+              "fontSize": 16,
+              "fontWeight": undefined,
+              "left": 18,
+              "maxWidth": -28,
+              "opacity": 1,
+              "paddingHorizontal": 0,
+              "position": "absolute",
+              "textAlign": "left",
+              "top": 59,
+              "transform": Array [
+                Object {
+                  "translateX": 0,
+                },
+                Object {
+                  "translateY": -52,
+                },
+                Object {
+                  "scale": 0.75,
+                },
+                Object {
+                  "scaleY": 0.2,
+                },
+              ],
+              "writingDirection": "ltr",
+            }
+          }
+        >
+          Outline Input
+        </Text>
+        <Text
+          maxFontSizeMultiplier={1.5}
+          numberOfLines={1}
+          onLayout={[Function]}
+          style={
+            Object {
+              "color": "#6200ee",
+              "fontFamily": "System",
+              "fontSize": 16,
+              "fontWeight": undefined,
+              "left": 0,
+              "opacity": 0,
+              "paddingHorizontal": 14,
+              "position": "absolute",
+              "textAlign": "left",
+              "top": 58,
+              "transform": Array [
+                Object {
+                  "translateX": 0,
+                },
+                Object {
+                  "translateY": -52,
+                },
+                Object {
+                  "scale": 0.75,
+                },
+              ],
+              "writingDirection": "ltr",
+            }
+          }
+        >
+          Outline Input
+        </Text>
+        <Text
+          maxFontSizeMultiplier={1.5}
+          numberOfLines={1}
+          style={
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontFamily": "System",
+              "fontSize": 16,
+              "fontWeight": undefined,
+              "left": 0,
+              "opacity": 0,
+              "paddingHorizontal": 14,
+              "position": "absolute",
+              "textAlign": "left",
+              "top": 58,
+              "transform": Array [
+                Object {
+                  "translateX": 0,
+                },
+                Object {
+                  "translateY": -52,
+                },
+                Object {
+                  "scale": 0.75,
+                },
+              ],
+              "writingDirection": "ltr",
+            }
+          }
+        >
+          Outline Input
+        </Text>
+      </View>
+      <TextInput
+        allowFontScaling={true}
+        editable={true}
+        maxFontSizeMultiplier={1.5}
+        multiline={true}
+        onBlur={[Function]}
+        onChangeText={[Function]}
+        onFocus={[Function]}
+        placeholder=""
+        placeholderTextColor="rgba(0, 0, 0, 0.54)"
+        rejectResponderTermination={true}
+        selectionColor="#6200ee"
+        style={
+          Array [
+            Object {
+              "flexGrow": 1,
+              "margin": 0,
+              "paddingHorizontal": 14,
+              "zIndex": 1,
+            },
+            Object {
+              "height": 100,
+            },
+            Object {
+              "paddingBottom": 24,
+              "paddingTop": 24,
+            },
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontSize": 16,
+              "fontWeight": undefined,
+              "textAlign": "left",
+              "textAlignVertical": "top",
+            },
+            false,
+            Array [
+              Object {},
+            ],
+          ]
+        }
+        testID="text-input-outlined"
+        underlineColorAndroid="transparent"
+        value="Some test value"
+      />
+    </View>
+  </View>
+</View>
+`;
+
+exports[`correctly applies textAlign center 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "rgb(231, 231, 231)",
+        "borderTopLeftRadius": 4,
+        "borderTopRightRadius": 4,
+      },
+      Object {},
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(0, 0, 0, 0.26)",
+        "bottom": 0,
+        "height": 2,
+        "left": 0,
+        "position": "absolute",
+        "right": 0,
+        "transform": Array [
+          Object {
+            "scaleY": 0.5,
+          },
+        ],
+        "zIndex": 1,
+      }
+    }
+  />
+  <View
+    style={
+      Array [
+        Object {
+          "paddingBottom": 0,
+          "paddingTop": 0,
+        },
+        Object {
+          "minHeight": 64,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Object {
+          "bottom": 0,
+          "left": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+          "transform": Array [
+            Object {
+              "translateX": 3,
+            },
+          ],
+          "zIndex": 3,
+        }
+      }
+    >
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        onLayout={[Function]}
+        style={
+          Object {
+            "color": "#6200ee",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 12,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        style={
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 12,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+    </View>
+    <TextInput
+      allowFontScaling={true}
+      editable={true}
+      maxFontSizeMultiplier={1.5}
+      multiline={false}
+      onBlur={[Function]}
+      onChangeText={[Function]}
+      onFocus={[Function]}
+      placeholder=""
+      placeholderTextColor="rgba(0, 0, 0, 0.54)"
+      rejectResponderTermination={true}
+      selectionColor="#6200ee"
+      style={
+        Array [
+          Object {
+            "flexGrow": 1,
+            "margin": 0,
+          },
+          Object {
+            "paddingLeft": 12,
+            "paddingRight": 12,
+          },
+          Object {
+            "height": 64,
+          },
+          Object {
+            "paddingBottom": 4,
+            "paddingTop": 24,
+          },
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "textAlign": "center",
+            "textAlignVertical": "center",
+          },
+          false,
+          Array [
+            Object {},
+          ],
+        ]
+      }
+      testID="text-input-flat"
+      underlineColorAndroid="transparent"
+      value="Some test value"
+    />
+  </View>
+</View>
+`;
+
+exports[`correctly renders left-side icon adornment, and right-side affix adornment  1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "rgb(231, 231, 231)",
+        "borderTopLeftRadius": 4,
+        "borderTopRightRadius": 4,
+      },
+      Object {},
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(0, 0, 0, 0.26)",
+        "bottom": 0,
+        "height": 2,
+        "left": 0,
+        "position": "absolute",
+        "right": 0,
+        "transform": Array [
+          Object {
+            "scaleY": 0.5,
+          },
+        ],
+        "zIndex": 1,
+      }
+    }
+  />
+  <View
+    style={
+      Array [
+        Object {
+          "paddingBottom": 0,
+          "paddingTop": 0,
+        },
+        Object {
+          "minHeight": 64,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Object {
+          "bottom": 0,
+          "left": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+          "transform": Array [
+            Object {
+              "translateX": 3,
+            },
+          ],
+          "zIndex": 3,
+        }
+      }
+    >
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        onLayout={[Function]}
+        style={
+          Object {
+            "color": "#6200ee",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 44,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        style={
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 44,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+    </View>
+    <TextInput
+      allowFontScaling={true}
+      editable={true}
+      maxFontSizeMultiplier={1.5}
+      multiline={false}
+      onBlur={[Function]}
+      onChangeText={[Function]}
+      onFocus={[Function]}
+      placeholder=""
+      placeholderTextColor="rgba(0, 0, 0, 0.54)"
+      rejectResponderTermination={true}
+      selectionColor="#6200ee"
+      style={
+        Array [
+          Object {
+            "flexGrow": 1,
+            "margin": 0,
+          },
+          Object {
+            "paddingLeft": 12,
+            "paddingRight": 44,
+          },
+          Object {
+            "height": 64,
+          },
+          Object {
+            "paddingBottom": 4,
+            "paddingTop": 24,
+          },
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "textAlign": "left",
+            "textAlignVertical": "center",
+          },
+          false,
+          Object {
+            "marginLeft": 0,
+            "marginRight": 36,
+            "paddingLeft": 36,
+            "paddingRight": 8,
+          },
+        ]
+      }
+      testID="text-input-flat"
+      underlineColorAndroid="transparent"
+      value="Some test value"
+    />
+  </View>
+  <View
+    onLayout={[Function]}
+    style={
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+        "left": 12,
+        "opacity": 1,
+        "position": "absolute",
+        "top": null,
+      }
+    }
+  >
+    <Text
+      maxFontSizeMultiplier={1.5}
+      style={
+        Array [
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+          },
+          Object {
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+          },
+          Object {
+            "color": "#f44336",
+          },
+        ]
+      }
+    >
+      /100
+    </Text>
+  </View>
+  <View
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "height": 24,
+          "justifyContent": "center",
+          "position": "absolute",
+          "width": 24,
+        },
+        Object {
+          "right": 12,
+          "top": 20,
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            undefined,
+            Object {
+              "margin": 0,
+            },
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`correctly renders left-side icon adornment, and right-side affix adornment 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "rgb(231, 231, 231)",
+        "borderTopLeftRadius": 4,
+        "borderTopRightRadius": 4,
+      },
+      Object {},
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(0, 0, 0, 0.26)",
+        "bottom": 0,
+        "height": 2,
+        "left": 0,
+        "position": "absolute",
+        "right": 0,
+        "transform": Array [
+          Object {
+            "scaleY": 0.5,
+          },
+        ],
+        "zIndex": 1,
+      }
+    }
+  />
+  <View
+    style={
+      Array [
+        Object {
+          "paddingBottom": 0,
+          "paddingTop": 0,
+        },
+        Object {
+          "minHeight": 64,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Object {
+          "bottom": 0,
+          "left": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+          "transform": Array [
+            Object {
+              "translateX": 11,
+            },
+          ],
+          "zIndex": 3,
+        }
+      }
+    >
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        onLayout={[Function]}
+        style={
+          Object {
+            "color": "#6200ee",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 44,
+            "paddingRight": 44,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        style={
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 44,
+            "paddingRight": 44,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+    </View>
+    <TextInput
+      allowFontScaling={true}
+      editable={true}
+      maxFontSizeMultiplier={1.5}
+      multiline={false}
+      onBlur={[Function]}
+      onChangeText={[Function]}
+      onFocus={[Function]}
+      placeholder=""
+      placeholderTextColor="rgba(0, 0, 0, 0.54)"
+      rejectResponderTermination={true}
+      selectionColor="#6200ee"
+      style={
+        Array [
+          Object {
+            "flexGrow": 1,
+            "margin": 0,
+          },
+          Object {
+            "paddingLeft": 44,
+            "paddingRight": 44,
+          },
+          Object {
+            "height": 64,
+          },
+          Object {
+            "paddingBottom": 4,
+            "paddingTop": 24,
+          },
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "textAlign": "left",
+            "textAlignVertical": "center",
+          },
+          false,
+          Object {
+            "marginLeft": 36,
+            "marginRight": 0,
+            "paddingLeft": 8,
+            "paddingRight": 36,
+          },
+        ]
+      }
+      testID="text-input-flat"
+      underlineColorAndroid="transparent"
+      value="Some test value"
+    />
+  </View>
+  <View
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "height": 24,
+          "justifyContent": "center",
+          "position": "absolute",
+          "width": 24,
+        },
+        Object {
+          "left": 12,
+          "top": 20,
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            undefined,
+            Object {
+              "margin": 0,
+            },
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    style={
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+        "opacity": 1,
+        "position": "absolute",
+        "right": 12,
+        "top": null,
+      }
+    }
+  >
+    <Text
+      maxFontSizeMultiplier={1.5}
+      style={
+        Array [
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+          },
+          Object {
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+          },
+          Object {
+            "color": "#f44336",
+          },
+        ]
+      }
+    >
+      /100
+    </Text>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ToggleButton.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ToggleButton.test.js.snap
new file mode 100644
index 0000000..47f8048
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ToggleButton.test.js.snap
@@ -0,0 +1,254 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders disabled toggle button 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": true,
+      "selected": true,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        Object {
+          "opacity": 0.32,
+        },
+        Array [
+          Object {
+            "height": 42,
+            "margin": 0,
+            "width": 42,
+          },
+          Object {
+            "backgroundColor": "rgba(0, 0, 0, .08)",
+            "borderColor": "rgba(0, 0, 0, 0.29)",
+            "borderRadius": 4,
+          },
+          undefined,
+        ],
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders toggle button 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": undefined,
+      "selected": true,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        undefined,
+        Array [
+          Object {
+            "height": 42,
+            "margin": 0,
+            "width": 42,
+          },
+          Object {
+            "backgroundColor": "rgba(0, 0, 0, .08)",
+            "borderColor": "rgba(0, 0, 0, 0.29)",
+            "borderRadius": 4,
+          },
+          undefined,
+        ],
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders unchecked toggle button 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": true,
+      "selected": false,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        Object {
+          "opacity": 0.32,
+        },
+        Array [
+          Object {
+            "height": 42,
+            "margin": 0,
+            "width": 42,
+          },
+          Object {
+            "backgroundColor": "transparent",
+            "borderColor": "rgba(0, 0, 0, 0.29)",
+            "borderRadius": 4,
+          },
+          undefined,
+        ],
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/core/__tests__/Provider.test.js b/node_modules/react-native-paper/src/core/__tests__/Provider.test.js
new file mode 100644
index 0000000..03f2137
--- /dev/null
+++ b/node_modules/react-native-paper/src/core/__tests__/Provider.test.js
@@ -0,0 +1,180 @@
+import * as React from 'react';
+import { Appearance, AccessibilityInfo, View } from 'react-native';
+import { render, act } from 'react-native-testing-library';
+import Provider from '../Provider';
+import { useTheme } from '../theming';
+import DarkTheme from '../../styles/DarkTheme';
+import DefaultTheme from '../../styles/DefaultTheme';
+
+const mockAppearance = () => {
+  jest.mock('react-native/Libraries/Utilities/Appearance', () => {
+    const realApp = jest.requireActual(
+      'react-native/Libraries/Utilities/Appearance'
+    );
+    const listeners = [];
+    return {
+      ...realApp,
+      addChangeListener: jest.fn((cb) => {
+        listeners.push(cb);
+      }),
+      removeChangeListener: jest.fn((cb) => {
+        listeners.push(cb);
+      }),
+      getColorScheme: jest.fn(() => {
+        return 'light';
+      }),
+      __internalListeners: listeners,
+    };
+  });
+};
+
+const mockAccessibilityInfo = () => {
+  jest.mock(
+    'react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo',
+    () => {
+      const realApp = jest.requireActual(
+        'react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo'
+      );
+
+      const listeners = [];
+      return {
+        realApp,
+        addEventListener: jest.fn((event, cb) => {
+          listeners.push(cb);
+        }),
+        removeEventListener: jest.fn((cb) => {
+          listeners.push(cb);
+        }),
+        __internalListeners: listeners,
+      };
+    }
+  );
+};
+
+const FakeChild = () => {
+  const theme = useTheme();
+  return <View testID="provider-child-view" theme={theme} />;
+};
+
+const createProvider = (theme) => {
+  return (
+    <Provider theme={theme}>
+      <FakeChild />
+    </Provider>
+  );
+};
+
+describe('Provider', () => {
+  beforeEach(() => {
+    jest.resetModules();
+  });
+
+  it('handles theme change', async () => {
+    mockAppearance();
+    const { getByTestId } = render(createProvider(null));
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      DefaultTheme
+    );
+    act(() => Appearance.__internalListeners[0]({ colorScheme: 'dark' }));
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      DarkTheme
+    );
+  });
+
+  it('should set AccessibilityInfo listeners, if there is no theme', async () => {
+    mockAppearance();
+    mockAccessibilityInfo();
+
+    const { rerender, getByTestId } = render(createProvider(null));
+
+    expect(AccessibilityInfo.addEventListener).toHaveBeenCalled();
+    act(() =>
+      AccessibilityInfo.__internalListeners[0]({
+        reduceMotionEnabled: true,
+      })
+    );
+
+    expect(
+      getByTestId('provider-child-view').props.theme.animation.scale
+    ).toStrictEqual(0);
+
+    rerender(createProvider(DefaultTheme));
+    expect(AccessibilityInfo.removeEventListener).toHaveBeenCalled();
+  });
+
+  it('should not set AccessibilityInfo listeners, if there is a theme', async () => {
+    mockAppearance();
+    const { getByTestId } = render(createProvider(DarkTheme));
+
+    expect(AccessibilityInfo.addEventListener).not.toHaveBeenCalled();
+    expect(AccessibilityInfo.removeEventListener).not.toHaveBeenCalled();
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      DarkTheme
+    );
+  });
+
+  it('should set Appearance listeners, if there is no theme', async () => {
+    mockAppearance();
+    const { getByTestId } = render(createProvider(null));
+
+    expect(Appearance.addChangeListener).toHaveBeenCalled();
+    act(() => Appearance.__internalListeners[0]({ colorScheme: 'dark' }));
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      DarkTheme
+    );
+  });
+
+  it('should not set Appearance listeners, if the theme is passed', async () => {
+    mockAppearance();
+    const { getByTestId } = render(createProvider(DefaultTheme));
+
+    expect(Appearance.addChangeListener).not.toHaveBeenCalled();
+    expect(Appearance.removeChangeListener).not.toHaveBeenCalled();
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      DefaultTheme
+    );
+  });
+
+  it('uses default theme, if Appearance module is not defined', async () => {
+    jest.mock('react-native/Libraries/Utilities/Appearance', () => {
+      return null;
+    });
+    const { getByTestId } = render(createProvider(null));
+    expect(Appearance).toEqual(null);
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      DefaultTheme
+    );
+  });
+
+  it.each`
+    label              | theme           | colorScheme
+    ${'default theme'} | ${DefaultTheme} | ${'light'}
+    ${'dark theme'}    | ${DarkTheme}    | ${'dark'}
+  `(
+    'provides $label for $colorScheme color scheme',
+    async ({ theme, colorScheme }) => {
+      mockAppearance();
+      Appearance.getColorScheme.mockReturnValue(colorScheme);
+      const { getByTestId } = render(createProvider());
+      expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+        theme
+      );
+    }
+  );
+
+  it('uses provided custom theme', async () => {
+    mockAppearance();
+    const customTheme = {
+      ...DefaultTheme,
+      colors: {
+        ...DefaultTheme.colors,
+        primary: 'tomato',
+        accent: 'yellow',
+      },
+    };
+    const { getByTestId } = render(createProvider(customTheme));
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      customTheme
+    );
+  });
+});
diff --git a/node_modules/react-native-paper/src/utils/__tests__/addEventListener.js b/node_modules/react-native-paper/src/utils/__tests__/addEventListener.js
new file mode 100644
index 0000000..a8a9f5e
--- /dev/null
+++ b/node_modules/react-native-paper/src/utils/__tests__/addEventListener.js
@@ -0,0 +1,61 @@
+import { BackHandler, Keyboard } from 'react-native';
+import { addEventListener, addListener } from '../addEventListener';
+
+const mockModule = jest.fn();
+const handler = jest.fn();
+
+describe('addEventListener', () => {
+  beforeEach(() => {
+    jest.clearAllMocks();
+  });
+
+  it('assigns subscription', () => {
+    BackHandler.addEventListener = mockModule;
+    addEventListener(BackHandler, 'hardwareBackPress', handler);
+    expect(BackHandler.addEventListener).toHaveBeenCalledWith(
+      'hardwareBackPress',
+      handler
+    );
+  });
+
+  it('removes subscription', () => {
+    const subscription = addEventListener(
+      BackHandler,
+      'hardwareBackPress',
+      handler
+    );
+    BackHandler.removeEventListener = mockModule;
+    subscription.remove();
+
+    expect(BackHandler.removeEventListener).toHaveBeenCalledWith(
+      'hardwareBackPress',
+      handler
+    );
+  });
+});
+
+describe('addListener', () => {
+  beforeEach(() => {
+    jest.clearAllMocks();
+  });
+
+  it('assigns subscription', () => {
+    Keyboard.addListener = mockModule;
+    addListener(Keyboard, 'keyboardWillShow', handler);
+    expect(Keyboard.addListener).toHaveBeenCalledWith(
+      'keyboardWillShow',
+      handler
+    );
+  });
+
+  it('removes subscription', () => {
+    const subscription = addListener(Keyboard, 'keyboardWillShow', handler);
+    Keyboard.removeEventListener = mockModule;
+    subscription.remove();
+
+    expect(Keyboard.removeEventListener).toHaveBeenCalledWith(
+      'keyboardWillShow',
+      handler
+    );
+  });
+});
