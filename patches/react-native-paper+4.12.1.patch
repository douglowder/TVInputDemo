diff --git a/node_modules/react-native-paper/lib/commonjs/components/BottomNavigation/BottomNavigation.js b/node_modules/react-native-paper/lib/commonjs/components/BottomNavigation/BottomNavigation.js
index 3c94f6f..32877d4 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/BottomNavigation/BottomNavigation.js
+++ b/node_modules/react-native-paper/lib/commonjs/components/BottomNavigation/BottomNavigation.js
@@ -23,6 +23,8 @@ var _Badge = _interopRequireDefault(require("../Badge"));
 
 var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
 
+var _TouchableRippleSupported = _interopRequireDefault(require("../TouchableRipple/TouchableRippleSupported"));
+
 var _Text = _interopRequireDefault(require("../Typography/Text"));
 
 var _colors = require("../../styles/colors");
@@ -65,7 +67,7 @@ const Touchable = _ref => {
     rippleColor,
     ...rest
   } = _ref;
-  return _TouchableRipple.default.supported ? /*#__PURE__*/React.createElement(_TouchableRipple.default, _extends({}, rest, {
+  return _TouchableRippleSupported.default.supported ? /*#__PURE__*/React.createElement(_TouchableRipple.default, _extends({}, rest, {
     disabled: rest.disabled || undefined,
     borderless: borderless,
     centered: centered,
diff --git a/node_modules/react-native-paper/lib/commonjs/components/BottomNavigation/BottomNavigation.js.map b/node_modules/react-native-paper/lib/commonjs/components/BottomNavigation/BottomNavigation.js.map
index e62fb1c..ec5c991 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/BottomNavigation/BottomNavigation.js.map
+++ b/node_modules/react-native-paper/lib/commonjs/components/BottomNavigation/BottomNavigation.js.map
@@ -1 +1 @@
-{"version":3,"sources":["BottomNavigation.tsx"],"names":["MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","FAR_FAR_AWAY","Platform","OS","Touchable","route","_0","style","children","borderless","centered","rippleColor","rest","TouchableRipple","supported","disabled","undefined","SceneComponent","React","memo","component","createElement","BottomNavigation","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","props","getLabelText","title","getBadge","badge","getColor","color","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","sceneAnimationEnabled","onTabPress","onIndexChange","shifting","routes","length","safeAreaInsets","labelMaxFontSizeMultiplier","scale","animation","focusedKey","index","key","visibleAnim","tabsAnims","map","_","i","offsetsAnims","indexAnim","rippleAnim","layout","onLayout","loaded","setLoaded","useState","includes","keyboardVisible","setKeyboardVisible","handleKeyboardShow","useCallback","Animated","timing","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToIndex","setValue","parallel","finished","tab","forEach","offset","useEffect","onShow","onHide","prevNavigationState","useRef","current","handleTabPress","event","defaultPrevented","preventDefault","jumpTo","findIndex","colors","dark","isDarkTheme","mode","backgroundColor","customBackground","elevation","StyleSheet","flatten","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","white","black","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","width","tabWidth","rippleSize","insets","left","right","bottom","styles","container","content","background","focused","opacity","top","absoluteFill","bar","transform","translateY","height","position","measured","barContent","items","marginBottom","marginHorizontal","max","maxWidth","ripple","borderRadius","active","activeOpacity","inactiveOpacity","onPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","item","iconContainer","iconWrapper","icon","badgeContainer","String","labelContainer","labelWrapper","label","SceneMap","scenes","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  ViewStyle,\n} from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../../styles/overlay';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport Badge from '../Badge';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useLayout from '../../utils/useLayout';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = ({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = true,\n  barStyle,\n  labeled = true,\n  style,\n  theme,\n  sceneAnimationEnabled = false,\n  onTabPress,\n  onIndexChange,\n  shifting = navigationState.routes.length > 3,\n  safeAreaInsets,\n  labelMaxFontSizeMultiplier = 1,\n}: Props) => {\n  const { scale } = theme.animation;\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start(({ finished }) => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      indexAnim,\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      rippleAnim,\n      scale,\n      tabsAnims,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide,\n  });\n\n  const prevNavigationState = React.useRef<NavigationState>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(\n    (key: string) => {\n      const index = navigationState.routes.findIndex(\n        (route) => route.key === key\n      );\n\n      onIndexChange(index);\n    },\n    [navigationState.routes, onIndexChange]\n  );\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n    StyleSheet.flatten(barStyle) || {};\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  const backgroundColor = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n  const activeTintColor =\n    typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor =\n    typeof inactiveColor !== 'undefined'\n      ? inactiveColor\n      : color(textColor).alpha(0.5).rgb().string();\n\n  const touchColor = color(activeColor || activeTintColor)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? 0,\n    right: safeAreaInsets?.right ?? 0,\n    bottom: safeAreaInsets?.bottom ?? BOTTOM_INSET,\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.content, { backgroundColor: colors.background }]}>\n        {routes.map((route, index) => {\n          if (!loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsAnims[index]\n            : focused\n            ? 1\n            : 0;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, FAR_FAR_AWAY],\n              })\n            : focused\n            ? 0\n            : FAR_FAR_AWAY;\n\n          return (\n            <BottomNavigationRouteScreen\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              index={index}\n              visibility={opacity}\n              style={[StyleSheet.absoluteFill, { opacity }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View style={[styles.content, { top }]}>\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </BottomNavigationRouteScreen>\n          );\n        })}\n      </View>\n      <Surface\n        style={\n          [\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: visibleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: keyboardVisible ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={\n          layout.measured\n            ? keyboardHidesNavigationBar && keyboardVisible\n              ? 'none'\n              : 'auto'\n            : 'none'\n        }\n        onLayout={onLayout}\n      >\n        <Animated.View style={[styles.barContent, { backgroundColor }]}>\n          <View\n            style={[\n              styles.items,\n              {\n                marginBottom: insets.bottom,\n                marginHorizontal: Math.max(insets.left, insets.right),\n                maxWidth: maxTabBarWidth,\n              },\n            ]}\n            accessibilityRole={'tablist'}\n          >\n            {shifting ? (\n              <Animated.View\n                pointerEvents=\"none\"\n                style={[\n                  styles.ripple,\n                  {\n                    // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                    // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                    top: (BAR_HEIGHT - rippleSize) / 2,\n                    left:\n                      tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n                    height: rippleSize,\n                    width: rippleSize,\n                    borderRadius: rippleSize / 2,\n                    backgroundColor: getColor({\n                      route: routes[navigationState.index],\n                    }),\n                    transform: [\n                      {\n                        // Scale to twice the size  to ensure it covers the whole navigation bar\n                        scale: rippleAnim.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0, 8],\n                        }),\n                      },\n                    ],\n                    opacity: rippleAnim.interpolate({\n                      inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                      outputRange: [0, 0, 1, 1],\n                    }),\n                  },\n                ]}\n              />\n            ) : null}\n            {routes.map((route, index) => {\n              const focused = navigationState.index === index;\n              const active = tabsAnims[index];\n\n              // Scale the label up\n              const scale =\n                labeled && shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0.5, 1],\n                    })\n                  : 1;\n\n              // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n              const translateY = labeled\n                ? shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [7, 0],\n                    })\n                  : 0\n                : 7;\n\n              // We render the active icon and label on top of inactive ones and cross-fade them on change.\n              // This trick gives the illusion that we are animating between active and inactive colors.\n              // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n              const activeOpacity = active;\n              const inactiveOpacity = active.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              });\n\n              const badge = getBadge({ route });\n\n              return renderTouchable({\n                key: route.key,\n                route,\n                borderless: true,\n                centered: true,\n                rippleColor: touchColor,\n                onPress: () => handleTabPress(index),\n                testID: getTestID({ route }),\n                accessibilityLabel: getAccessibilityLabel({ route }),\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits: focused\n                  ? ['button', 'selected']\n                  : 'button',\n                accessibilityComponentType: 'button',\n                accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n                accessibilityState: { selected: focused },\n                style: styles.item,\n                children: (\n                  <View pointerEvents=\"none\">\n                    <Animated.View\n                      style={[\n                        styles.iconContainer,\n                        { transform: [{ translateY }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[styles.iconWrapper, { opacity: activeOpacity }]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: true,\n                            color: activeTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={activeTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <Animated.View\n                        style={[\n                          styles.iconWrapper,\n                          { opacity: inactiveOpacity },\n                        ]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: false,\n                            color: inactiveTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={inactiveTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <View\n                        style={[\n                          styles.badgeContainer,\n                          {\n                            right:\n                              (badge != null && typeof badge !== 'boolean'\n                                ? String(badge).length * -2\n                                : 0) - 2,\n                          },\n                        ]}\n                      >\n                        {typeof badge === 'boolean' ? (\n                          <Badge visible={badge} size={8} />\n                        ) : (\n                          <Badge visible={badge != null} size={16}>\n                            {badge}\n                          </Badge>\n                        )}\n                      </View>\n                    </Animated.View>\n                    {labeled ? (\n                      <Animated.View\n                        style={[\n                          styles.labelContainer,\n                          { transform: [{ scale }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Text\n                              maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n                              style={[styles.label, { color: activeTintColor }]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                        {shifting ? null : (\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: inactiveOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: false,\n                                color: inactiveTintColor,\n                              })\n                            ) : (\n                              <Text\n                                maxFontSizeMultiplier={\n                                  labelMaxFontSizeMultiplier\n                                }\n                                selectable={false}\n                                style={[\n                                  styles.label,\n                                  { color: inactiveTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                        )}\n                      </Animated.View>\n                    ) : (\n                      <View style={styles.labelContainer} />\n                    )}\n                  </View>\n                ),\n              });\n            })}\n          </View>\n        </Animated.View>\n      </Surface>\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = (scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    height: BAR_HEIGHT,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]}
\ No newline at end of file
+{"version":3,"sources":["BottomNavigation.tsx"],"names":["MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","FAR_FAR_AWAY","Platform","OS","Touchable","route","_0","style","children","borderless","centered","rippleColor","rest","TouchableRippleSupported","supported","disabled","undefined","SceneComponent","React","memo","component","createElement","BottomNavigation","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","props","getLabelText","title","getBadge","badge","getColor","color","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","sceneAnimationEnabled","onTabPress","onIndexChange","shifting","routes","length","safeAreaInsets","labelMaxFontSizeMultiplier","scale","animation","focusedKey","index","key","visibleAnim","tabsAnims","map","_","i","offsetsAnims","indexAnim","rippleAnim","layout","onLayout","loaded","setLoaded","useState","includes","keyboardVisible","setKeyboardVisible","handleKeyboardShow","useCallback","Animated","timing","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToIndex","setValue","parallel","finished","tab","forEach","offset","useEffect","onShow","onHide","prevNavigationState","useRef","current","handleTabPress","event","defaultPrevented","preventDefault","jumpTo","findIndex","colors","dark","isDarkTheme","mode","backgroundColor","customBackground","elevation","StyleSheet","flatten","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","white","black","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","width","tabWidth","rippleSize","insets","left","right","bottom","styles","container","content","background","focused","opacity","top","absoluteFill","bar","transform","translateY","height","position","measured","barContent","items","marginBottom","marginHorizontal","max","maxWidth","ripple","borderRadius","active","activeOpacity","inactiveOpacity","onPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","item","iconContainer","iconWrapper","icon","badgeContainer","String","labelContainer","labelWrapper","label","SceneMap","scenes","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  ViewStyle,\n} from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../../styles/overlay';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport Badge from '../Badge';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport TouchableRippleSupported from '../TouchableRipple/TouchableRippleSupported';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useLayout from '../../utils/useLayout';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRippleSupported.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = ({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = true,\n  barStyle,\n  labeled = true,\n  style,\n  theme,\n  sceneAnimationEnabled = false,\n  onTabPress,\n  onIndexChange,\n  shifting = navigationState.routes.length > 3,\n  safeAreaInsets,\n  labelMaxFontSizeMultiplier = 1,\n}: Props) => {\n  const { scale } = theme.animation;\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start(({ finished }) => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      indexAnim,\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      rippleAnim,\n      scale,\n      tabsAnims,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide,\n  });\n\n  const prevNavigationState = React.useRef<NavigationState>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(\n    (key: string) => {\n      const index = navigationState.routes.findIndex(\n        (route) => route.key === key\n      );\n\n      onIndexChange(index);\n    },\n    [navigationState.routes, onIndexChange]\n  );\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n    StyleSheet.flatten(barStyle) || {};\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  const backgroundColor = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n  const activeTintColor =\n    typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor =\n    typeof inactiveColor !== 'undefined'\n      ? inactiveColor\n      : color(textColor).alpha(0.5).rgb().string();\n\n  const touchColor = color(activeColor || activeTintColor)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? 0,\n    right: safeAreaInsets?.right ?? 0,\n    bottom: safeAreaInsets?.bottom ?? BOTTOM_INSET,\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.content, { backgroundColor: colors.background }]}>\n        {routes.map((route, index) => {\n          if (!loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsAnims[index]\n            : focused\n            ? 1\n            : 0;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, FAR_FAR_AWAY],\n              })\n            : focused\n            ? 0\n            : FAR_FAR_AWAY;\n\n          return (\n            <BottomNavigationRouteScreen\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              index={index}\n              visibility={opacity}\n              style={[StyleSheet.absoluteFill, { opacity }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View style={[styles.content, { top }]}>\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </BottomNavigationRouteScreen>\n          );\n        })}\n      </View>\n      <Surface\n        style={\n          [\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: visibleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: keyboardVisible ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={\n          layout.measured\n            ? keyboardHidesNavigationBar && keyboardVisible\n              ? 'none'\n              : 'auto'\n            : 'none'\n        }\n        onLayout={onLayout}\n      >\n        <Animated.View style={[styles.barContent, { backgroundColor }]}>\n          <View\n            style={[\n              styles.items,\n              {\n                marginBottom: insets.bottom,\n                marginHorizontal: Math.max(insets.left, insets.right),\n                maxWidth: maxTabBarWidth,\n              },\n            ]}\n            accessibilityRole={'tablist'}\n          >\n            {shifting ? (\n              <Animated.View\n                pointerEvents=\"none\"\n                style={[\n                  styles.ripple,\n                  {\n                    // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                    // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                    top: (BAR_HEIGHT - rippleSize) / 2,\n                    left:\n                      tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n                    height: rippleSize,\n                    width: rippleSize,\n                    borderRadius: rippleSize / 2,\n                    backgroundColor: getColor({\n                      route: routes[navigationState.index],\n                    }),\n                    transform: [\n                      {\n                        // Scale to twice the size  to ensure it covers the whole navigation bar\n                        scale: rippleAnim.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0, 8],\n                        }),\n                      },\n                    ],\n                    opacity: rippleAnim.interpolate({\n                      inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                      outputRange: [0, 0, 1, 1],\n                    }),\n                  },\n                ]}\n              />\n            ) : null}\n            {routes.map((route, index) => {\n              const focused = navigationState.index === index;\n              const active = tabsAnims[index];\n\n              // Scale the label up\n              const scale =\n                labeled && shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0.5, 1],\n                    })\n                  : 1;\n\n              // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n              const translateY = labeled\n                ? shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [7, 0],\n                    })\n                  : 0\n                : 7;\n\n              // We render the active icon and label on top of inactive ones and cross-fade them on change.\n              // This trick gives the illusion that we are animating between active and inactive colors.\n              // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n              const activeOpacity = active;\n              const inactiveOpacity = active.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              });\n\n              const badge = getBadge({ route });\n\n              return renderTouchable({\n                key: route.key,\n                route,\n                borderless: true,\n                centered: true,\n                rippleColor: touchColor,\n                onPress: () => handleTabPress(index),\n                testID: getTestID({ route }),\n                accessibilityLabel: getAccessibilityLabel({ route }),\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits: focused\n                  ? ['button', 'selected']\n                  : 'button',\n                accessibilityComponentType: 'button',\n                accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n                accessibilityState: { selected: focused },\n                style: styles.item,\n                children: (\n                  <View pointerEvents=\"none\">\n                    <Animated.View\n                      style={[\n                        styles.iconContainer,\n                        { transform: [{ translateY }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[styles.iconWrapper, { opacity: activeOpacity }]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: true,\n                            color: activeTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={activeTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <Animated.View\n                        style={[\n                          styles.iconWrapper,\n                          { opacity: inactiveOpacity },\n                        ]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: false,\n                            color: inactiveTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={inactiveTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <View\n                        style={[\n                          styles.badgeContainer,\n                          {\n                            right:\n                              (badge != null && typeof badge !== 'boolean'\n                                ? String(badge).length * -2\n                                : 0) - 2,\n                          },\n                        ]}\n                      >\n                        {typeof badge === 'boolean' ? (\n                          <Badge visible={badge} size={8} />\n                        ) : (\n                          <Badge visible={badge != null} size={16}>\n                            {badge}\n                          </Badge>\n                        )}\n                      </View>\n                    </Animated.View>\n                    {labeled ? (\n                      <Animated.View\n                        style={[\n                          styles.labelContainer,\n                          { transform: [{ scale }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Text\n                              maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n                              style={[styles.label, { color: activeTintColor }]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                        {shifting ? null : (\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: inactiveOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: false,\n                                color: inactiveTintColor,\n                              })\n                            ) : (\n                              <Text\n                                maxFontSizeMultiplier={\n                                  labelMaxFontSizeMultiplier\n                                }\n                                selectable={false}\n                                style={[\n                                  styles.label,\n                                  { color: inactiveTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                        )}\n                      </Animated.View>\n                    ) : (\n                      <View style={styles.labelContainer} />\n                    )}\n                  </View>\n                ),\n              });\n            })}\n          </View>\n        </Animated.View>\n      </Surface>\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = (scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    height: BAR_HEIGHT,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/commonjs/components/Button.js b/node_modules/react-native-paper/lib/commonjs/components/Button.js
index b46e456..774735f 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/Button.js
+++ b/node_modules/react-native-paper/lib/commonjs/components/Button.js
@@ -65,7 +65,7 @@ function _extends() { _extends = Object.assign || function (target) { for (var i
  * export default MyComponent;
  * ```
  */
-const Button = _ref => {
+const Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {
   var _StyleSheet$flatten;
 
   let {
@@ -88,6 +88,14 @@ const Button = _ref => {
     labelStyle,
     testID,
     accessible,
+    tvParallaxProperties,
+    hasTVPreferredFocus,
+    onFocus,
+    onBlur,
+    nextFocusUp,
+    nextFocusDown,
+    nextFocusLeft,
+    nextFocusRight,
     ...rest
   } = _ref;
   const {
@@ -97,6 +105,44 @@ const Button = _ref => {
     elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);
   }, [mode, elevation, disabled]);
 
+  const handleFocus = () => {
+    onFocus && onFocus();
+    handlePressIn();
+  };
+
+  const handleBlur = () => {
+    onBlur && onBlur();
+    handlePressOut();
+  };
+
+  const handlePress = () => {
+    onPress && onPress(); // Show animation on press for Android (TouchableRipple)
+
+    if (_reactNative.Platform.isTV && _reactNative.Platform.OS === 'android') {
+      const {
+        scale
+      } = theme.animation;
+
+      _reactNative.Animated.timing(elevation, {
+        toValue: 8,
+        duration: 150 * scale,
+        useNativeDriver: true
+      }).start(_ref2 => {
+        let {
+          finished
+        } = _ref2;
+
+        if (finished) {
+          _reactNative.Animated.timing(elevation, {
+            toValue: mode !== 'contained' ? 0 : 2,
+            duration: 150 * scale,
+            useNativeDriver: true
+          }).start();
+        }
+      });
+    }
+  };
+
   const handlePressIn = () => {
     if (mode === 'contained') {
       const {
@@ -194,12 +240,25 @@ const Button = _ref => {
       elevation
     }, buttonStyle, style]
   }), /*#__PURE__*/React.createElement(_TouchableRipple.default, {
+    ref: ref,
+    nextFocusUp: nextFocusUp,
+    nextFocusDown: nextFocusDown,
+    nextFocusLeft: nextFocusLeft,
+    nextFocusRight: nextFocusRight,
     borderless: true,
     delayPressIn: 0,
-    onPress: onPress,
+    onPress: handlePress,
     onLongPress: onLongPress,
     onPressIn: handlePressIn,
     onPressOut: handlePressOut,
+    onFocus: handleFocus,
+    onBlur: handleBlur,
+    tvParallaxProperties:
+    /* Show animation on press for Apple TV */
+    tvParallaxProperties || {
+      pressMagnification: 1.05
+    },
+    hasTVPreferredFocus: hasTVPreferredFocus,
     accessibilityLabel: accessibilityLabel,
     accessibilityHint: accessibilityHint // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
     ,
@@ -231,7 +290,7 @@ const Button = _ref => {
     numberOfLines: 1,
     style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]
   }, children))));
-};
+});
 
 const styles = _reactNative.StyleSheet.create({
   button: {
diff --git a/node_modules/react-native-paper/lib/commonjs/components/Button.js.map b/node_modules/react-native-paper/lib/commonjs/components/Button.js.map
index 5cfc62e..e6a9a1a 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/Button.js.map
+++ b/node_modules/react-native-paper/lib/commonjs/components/Button.js.map
@@ -1 +1 @@
-{"version":3,"sources":["Button.tsx"],"names":["Button","disabled","compact","mode","dark","loading","icon","color","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","current","elevation","React","useRef","Animated","Value","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","white","black","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","iconStyle","flexDirection","styles","iconReverse","button","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]}
\ No newline at end of file
+{"version":3,"sources":["Button.tsx"],"names":["Button","React","forwardRef","ref","disabled","compact","mode","dark","loading","icon","color","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","tvParallaxProperties","hasTVPreferredFocus","onFocus","onBlur","nextFocusUp","nextFocusDown","nextFocusLeft","nextFocusRight","rest","current","elevation","useRef","Animated","Value","useEffect","setValue","handleFocus","handlePressIn","handleBlur","handlePressOut","handlePress","Platform","isTV","OS","scale","animation","timing","toValue","duration","useNativeDriver","start","finished","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","white","black","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","iconStyle","flexDirection","styles","iconReverse","button","pressMagnification","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  tvParallaxProperties?: any;\n  hasTVPreferredFocus?: boolean;\n  onFocus?: any;\n  onBlur?: any;\n  nextFocusUp?: any;\n  nextFocusDown?: any;\n  nextFocusLeft?: any;\n  nextFocusRight?: any;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = React.forwardRef(\n  (\n    {\n      disabled,\n      compact,\n      mode = 'text',\n      dark,\n      loading,\n      icon,\n      color: buttonColor,\n      children,\n      uppercase = true,\n      accessibilityLabel,\n      accessibilityHint,\n      onPress,\n      onLongPress,\n      style,\n      theme,\n      contentStyle,\n      labelStyle,\n      testID,\n      accessible,\n      tvParallaxProperties,\n      hasTVPreferredFocus,\n      onFocus,\n      onBlur,\n      nextFocusUp,\n      nextFocusDown,\n      nextFocusLeft,\n      nextFocusRight,\n      ...rest\n    }: Props,\n    ref: any\n  ) => {\n    const { current: elevation } = React.useRef<Animated.Value>(\n      new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n    );\n    React.useEffect(() => {\n      elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n    }, [mode, elevation, disabled]);\n\n    const handleFocus = () => {\n      onFocus && onFocus();\n      handlePressIn();\n    };\n\n    const handleBlur = () => {\n      onBlur && onBlur();\n      handlePressOut();\n    };\n\n    const handlePress = () => {\n      onPress && onPress();\n      // Show animation on press for Android (TouchableRipple)\n      if (Platform.isTV && Platform.OS === 'android') {\n        const { scale } = theme.animation;\n        Animated.timing(elevation, {\n          toValue: 8,\n          duration: 150 * scale,\n          useNativeDriver: true,\n        }).start(({finished}) => {\n          if (finished) {\n            Animated.timing(elevation, {\n              toValue: mode !== 'contained' ? 0 : 2,\n              duration: 150 * scale,\n              useNativeDriver: true,\n            }).start();\n          }\n        });\n      }\n    };\n        \n    const handlePressIn = () => {\n      if (mode === 'contained') {\n        const { scale } = theme.animation;\n        Animated.timing(elevation, {\n          toValue: 8,\n          duration: 200 * scale,\n          useNativeDriver: true,\n        }).start();\n      }\n    };\n\n    const handlePressOut = () => {\n      if (mode === 'contained') {\n        const { scale } = theme.animation;\n        Animated.timing(elevation, {\n          toValue: 2,\n          duration: 150 * scale,\n          useNativeDriver: true,\n        }).start();\n      }\n    };\n\n    const { colors, roundness } = theme;\n    const font = theme.fonts.medium;\n\n    let backgroundColor: string,\n      borderColor: string,\n      textColor: string,\n      borderWidth: number;\n\n    if (mode === 'contained') {\n      if (disabled) {\n        backgroundColor = color(theme.dark ? white : black)\n          .alpha(0.12)\n          .rgb()\n          .string();\n      } else if (buttonColor) {\n        backgroundColor = buttonColor;\n      } else {\n        backgroundColor = colors.primary;\n      }\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    if (mode === 'outlined') {\n      borderColor = color(theme.dark ? white : black)\n        .alpha(0.29)\n        .rgb()\n        .string();\n      borderWidth = StyleSheet.hairlineWidth;\n    } else {\n      borderColor = 'transparent';\n      borderWidth = 0;\n    }\n\n    if (disabled) {\n      textColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else if (mode === 'contained') {\n      let isDark;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark =\n          backgroundColor === 'transparent'\n            ? false\n            : !color(backgroundColor).isLight();\n      }\n\n      textColor = isDark ? white : black;\n    } else if (buttonColor) {\n      textColor = buttonColor;\n    } else {\n      textColor = colors.primary;\n    }\n\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n    const buttonStyle = {\n      backgroundColor,\n      borderColor,\n      borderWidth,\n      borderRadius: roundness,\n    };\n    const touchableStyle = {\n      borderRadius: style\n        ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n          roundness\n        : roundness,\n    };\n\n    const { color: customLabelColor, fontSize: customLabelSize } =\n      StyleSheet.flatten(labelStyle) || {};\n\n    const textStyle = { color: textColor, ...font };\n    const iconStyle =\n      StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n        ? styles.iconReverse\n        : styles.icon;\n\n    return (\n      <Surface\n        {...rest}\n        style={[\n          styles.button,\n          compact && styles.compact,\n          { elevation },\n          buttonStyle,\n          style,\n        ]}\n      >\n        <TouchableRipple\n          ref={ref}\n          nextFocusUp={nextFocusUp}\n          nextFocusDown={nextFocusDown}\n          nextFocusLeft={nextFocusLeft}\n          nextFocusRight={nextFocusRight}\n          borderless\n          delayPressIn={0}\n          onPress={handlePress}\n          onLongPress={onLongPress}\n          onPressIn={handlePressIn}\n          onPressOut={handlePressOut}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          tvParallaxProperties={\n            /* Show animation on press for Apple TV */\n            tvParallaxProperties || {pressMagnification: 1.05}\n          }\n          hasTVPreferredFocus={hasTVPreferredFocus}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityHint={accessibilityHint}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ disabled }}\n          accessible={accessible}\n          disabled={disabled}\n          rippleColor={rippleColor}\n          style={touchableStyle}\n          testID={testID}\n        >\n          <View style={[styles.content, contentStyle]}>\n            {icon && loading !== true ? (\n              <View style={iconStyle}>\n                <Icon\n                  source={icon}\n                  size={customLabelSize ?? 16}\n                  color={\n                    typeof customLabelColor === 'string'\n                      ? customLabelColor\n                      : textColor\n                  }\n                />\n              </View>\n            ) : null}\n            {loading ? (\n              <ActivityIndicator\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n                style={iconStyle}\n              />\n            ) : null}\n            <Text\n              selectable={false}\n              numberOfLines={1}\n              style={[\n                styles.label,\n                compact && styles.compactLabel,\n                uppercase && styles.uppercaseLabel,\n                textStyle,\n                font,\n                labelStyle,\n              ]}\n            >\n              {children}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/commonjs/components/IconButton.js b/node_modules/react-native-paper/lib/commonjs/components/IconButton.js
index 632512b..518ab6a 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/IconButton.js
+++ b/node_modules/react-native-paper/lib/commonjs/components/IconButton.js
@@ -13,6 +13,8 @@ var _color = _interopRequireDefault(require("color"));
 
 var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple/TouchableRipple"));
 
+var _TouchableRippleSupported = _interopRequireDefault(require("./TouchableRipple/TouchableRippleSupported"));
+
 var _Icon = _interopRequireDefault(require("./Icon"));
 
 var _CrossFadeIcon = _interopRequireDefault(require("./CrossFadeIcon"));
@@ -97,7 +99,7 @@ const IconButton = _ref => {
       disabled
     },
     disabled: disabled,
-    hitSlop: _TouchableRipple.default.supported ? {
+    hitSlop: _TouchableRippleSupported.default.supported ? {
       top: 10,
       left: 10,
       bottom: 10,
diff --git a/node_modules/react-native-paper/lib/commonjs/components/IconButton.js.map b/node_modules/react-native-paper/lib/commonjs/components/IconButton.js.map
index ca03306..7e1ca97 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/IconButton.js.map
+++ b/node_modules/react-native-paper/lib/commonjs/components/IconButton.js.map
@@ -1 +1 @@
-{"version":3,"sources":["IconButton.tsx"],"names":["IconButton","icon","color","customColor","size","accessibilityLabel","disabled","onPress","animated","theme","style","rest","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","CrossFadeIcon","Icon","buttonSize","styles","container","width","height","borderRadius","TouchableRipple","supported","top","left","bottom","right","StyleSheet","create","alignItems","justifyContent","overflow","margin","opacity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]}
\ No newline at end of file
+{"version":3,"sources":["IconButton.tsx"],"names":["IconButton","icon","color","customColor","size","accessibilityLabel","disabled","onPress","animated","theme","style","rest","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","CrossFadeIcon","Icon","buttonSize","styles","container","width","height","borderRadius","TouchableRippleSupported","supported","top","left","bottom","right","StyleSheet","create","alignItems","justifyContent","overflow","margin","opacity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport TouchableRippleSupported from './TouchableRipple/TouchableRippleSupported';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        TouchableRippleSupported.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js
index f5c4bfc..cf64860 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js
+++ b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js
@@ -52,7 +52,7 @@ function _extends() { _extends = Object.assign || function (target) { for (var i
  *
  * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props
  */
-const TouchableRipple = _ref => {
+const TouchableRipple = /*#__PURE__*/React.forwardRef((_ref, ref) => {
   let {
     style,
     background: _background,
@@ -188,19 +188,14 @@ const TouchableRipple = _ref => {
 
   const disabled = disabledProp || !rest.onPress;
   return /*#__PURE__*/React.createElement(_reactNative.TouchableWithoutFeedback, _extends({}, rest, {
+    ref: ref,
     onPressIn: handlePressIn,
     onPressOut: handlePressOut,
     disabled: disabled
   }), /*#__PURE__*/React.createElement(_reactNative.View, {
     style: [styles.touchable, borderless && styles.borderless, style]
   }, React.Children.only(children)));
-};
-/**
- * Whether ripple effect is supported.
- */
-
-
-TouchableRipple.supported = true;
+});
 
 const styles = _reactNative.StyleSheet.create({
   touchable: {
diff --git a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js.map b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js.map
index 4a220ee..64b9801 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js.map
+++ b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.js.map
@@ -1 +1 @@
-{"version":3,"sources":["TouchableRipple.tsx"],"names":["TouchableRipple","style","background","_background","borderless","disabled","disabledProp","rippleColor","underlayColor","_underlayColor","children","theme","rest","handlePressIn","e","centered","onPressIn","dark","colors","calculatedRippleColor","text","alpha","rgb","string","button","currentTarget","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","changedTouches","touches","nativeEvent","touch","width","height","locationX","pageX","locationY","pageY","size","Math","min","max","container","document","createElement","setAttribute","Object","assign","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","handlePressOut","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","onPress","styles","touchable","React","Children","only","supported","StyleSheet","create","Platform","OS","cursor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  Platform,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/touchablenativefeedback#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props\n */\nconst TouchableRipple = ({\n  style,\n  background: _background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor: _underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const handlePressIn = (e: any) => {\n    const { centered, onPressIn } = rest;\n\n    onPressIn?.(e);\n\n    const { dark, colors } = theme;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    const { changedTouches, touches } = e.nativeEvent;\n    const touch = touches?.[0] ?? changedTouches?.[0];\n\n    // If centered or it was pressed using keyboard - enter or space\n    if (centered || !touch) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      touchX = touch.locationX ?? e.pageX;\n      touchY = touch.locationY ?? e.pageY;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  const handlePressOut = (e: any) => {\n    rest.onPressOut?.(e);\n\n    const containers = e.currentTarget.querySelectorAll(\n      '[data-paper-ripple]'\n    ) as HTMLElement[];\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach((container) => {\n          const ripple = container.firstChild as HTMLSpanElement;\n\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  const disabled = disabledProp || !rest.onPress;\n\n  return (\n    <TouchableWithoutFeedback\n      {...rest}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      disabled={disabled}\n    >\n      <View style={[styles.touchable, borderless && styles.borderless, style]}>\n        {React.Children.only(children)}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\n/**\n * Whether ripple effect is supported.\n */\nTouchableRipple.supported = true;\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && { cursor: 'pointer' }),\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
+{"version":3,"sources":["TouchableRipple.tsx"],"names":["TouchableRipple","React","forwardRef","ref","style","background","_background","borderless","disabled","disabledProp","rippleColor","underlayColor","_underlayColor","children","theme","rest","handlePressIn","e","centered","onPressIn","dark","colors","calculatedRippleColor","text","alpha","rgb","string","button","currentTarget","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","changedTouches","touches","nativeEvent","touch","width","height","locationX","pageX","locationY","pageY","size","Math","min","max","container","document","createElement","setAttribute","Object","assign","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","handlePressOut","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","onPress","styles","touchable","Children","only","StyleSheet","create","Platform","OS","cursor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  Platform,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/touchablenativefeedback#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  tvParallaxProperties?: any;\n  hasTVPreferredFocus?: boolean;\n  onFocus?: any;\n  onBlur?: any;\n  nextFocusUp?: any;\n  nextFocusDown?: any;\n  nextFocusLeft?: any;\n  nextFocusRight?: any;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props\n */\nconst TouchableRipple = React.forwardRef(\n  (\n    {\n      style,\n      background: _background,\n      borderless = false,\n      disabled: disabledProp,\n      rippleColor,\n      underlayColor: _underlayColor,\n      children,\n      theme,\n      ...rest\n    }: Props,\n    ref: any\n  ) => {\n    const handlePressIn = (e: any) => {\n      const { centered, onPressIn } = rest;\n\n      onPressIn?.(e);\n\n      const { dark, colors } = theme;\n      const calculatedRippleColor =\n        rippleColor ||\n        color(colors.text)\n          .alpha(dark ? 0.32 : 0.2)\n          .rgb()\n          .string();\n\n      const button = e.currentTarget;\n      const style = window.getComputedStyle(button);\n      const dimensions = button.getBoundingClientRect();\n\n      let touchX;\n      let touchY;\n\n      const { changedTouches, touches } = e.nativeEvent;\n      const touch = touches?.[0] ?? changedTouches?.[0];\n\n      // If centered or it was pressed using keyboard - enter or space\n      if (centered || !touch) {\n        touchX = dimensions.width / 2;\n        touchY = dimensions.height / 2;\n      } else {\n        touchX = touch.locationX ?? e.pageX;\n        touchY = touch.locationY ?? e.pageY;\n      }\n\n      // Get the size of the button to determine how big the ripple should be\n      const size = centered\n        ? // If ripple is always centered, we don't need to make it too big\n          Math.min(dimensions.width, dimensions.height) * 1.25\n        : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n          Math.max(dimensions.width, dimensions.height) * 2;\n\n      // Create a container for our ripple effect so we don't need to change the parent's style\n      const container = document.createElement('span');\n\n      container.setAttribute('data-paper-ripple', '');\n\n      Object.assign(container.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        borderTopLeftRadius: style.borderTopLeftRadius,\n        borderTopRightRadius: style.borderTopRightRadius,\n        borderBottomRightRadius: style.borderBottomRightRadius,\n        borderBottomLeftRadius: style.borderBottomLeftRadius,\n        overflow: centered ? 'visible' : 'hidden',\n      });\n\n      // Create span to show the ripple effect\n      const ripple = document.createElement('span');\n\n      Object.assign(ripple.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        backgroundColor: calculatedRippleColor,\n        borderRadius: '50%',\n\n        /* Transition configuration */\n        transitionProperty: 'transform opacity',\n        transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n        transitionTimingFunction: 'linear',\n        transformOrigin: 'center',\n\n        /* We'll animate these properties */\n        transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n        opacity: '0.5',\n\n        // Position the ripple where cursor was\n        left: `${touchX}px`,\n        top: `${touchY}px`,\n        width: `${size}px`,\n        height: `${size}px`,\n      });\n\n      // Finally, append it to DOM\n      container.appendChild(ripple);\n      button.appendChild(container);\n\n      // rAF runs in the same frame as the event handler\n      // Use double rAF to ensure the transition class is added in next frame\n      // This will make sure that the transition animation is triggered\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          Object.assign(ripple.style, {\n            transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n            opacity: '1',\n          });\n        });\n      });\n    };\n\n    const handlePressOut = (e: any) => {\n      rest.onPressOut?.(e);\n\n      const containers = e.currentTarget.querySelectorAll(\n        '[data-paper-ripple]'\n      ) as HTMLElement[];\n\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          containers.forEach((container) => {\n            const ripple = container.firstChild as HTMLSpanElement;\n\n            Object.assign(ripple.style, {\n              transitionDuration: '250ms',\n              opacity: 0,\n            });\n\n            // Finally remove the span after the transition\n            setTimeout(() => {\n              const { parentNode } = container;\n\n              if (parentNode) {\n                parentNode.removeChild(container);\n              }\n            }, 500);\n          });\n        });\n      });\n    };\n\n    const disabled = disabledProp || !rest.onPress;\n\n    return (\n      <TouchableWithoutFeedback\n        {...rest}\n        ref={ref}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        disabled={disabled}\n      >\n        <View\n          style={[styles.touchable, borderless && styles.borderless, style]}\n        >\n          {React.Children.only(children)}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && { cursor: 'pointer' }),\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js
index 876263e..63bf72c 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js
+++ b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js
@@ -13,6 +13,10 @@ var _color = _interopRequireDefault(require("color"));
 
 var _theming = require("../../core/theming");
 
+var _TouchableRippleSupported = _interopRequireDefault(require("./TouchableRippleSupported"));
+
+require("react-native/tvos-types.d");
+
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 
 function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
@@ -21,10 +25,8 @@ function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj &&
 
 function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
 
-const ANDROID_VERSION_LOLLIPOP = 21;
 const ANDROID_VERSION_PIE = 28;
-
-const TouchableRipple = _ref => {
+const TouchableRipple = /*#__PURE__*/React.forwardRef((_ref, ref) => {
   let {
     style,
     background,
@@ -46,8 +48,9 @@ const TouchableRipple = _ref => {
 
   const useForeground = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_PIE && borderless;
 
-  if (TouchableRipple.supported) {
+  if (_TouchableRippleSupported.default.supported) {
     return /*#__PURE__*/React.createElement(_reactNative.TouchableNativeFeedback, _extends({}, rest, {
+      ref: ref,
       disabled: disabled,
       useForeground: useForeground,
       background: background != null ? background : _reactNative.TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)
@@ -57,13 +60,12 @@ const TouchableRipple = _ref => {
   }
 
   return /*#__PURE__*/React.createElement(_reactNative.TouchableHighlight, _extends({}, rest, {
+    ref: ref,
     disabled: disabled,
     style: [borderless && styles.overflowHidden, style],
     underlayColor: underlayColor != null ? underlayColor : (0, _color.default)(calculatedRippleColor).fade(0.5).rgb().string()
   }), React.Children.only(children));
-};
-
-TouchableRipple.supported = _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP;
+});
 
 const styles = _reactNative.StyleSheet.create({
   overflowHidden: {
diff --git a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js.map b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js.map
index 085dae6..f1c7aab 100644
--- a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js.map
+++ b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRipple.native.js.map
@@ -1 +1 @@
-{"version":3,"sources":["TouchableRipple.native.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","Platform","OS","Version","supported","TouchableNativeFeedback","Ripple","styles","overflowHidden","React","Children","only","fade","StyleSheet","create","overflow"],"mappings":";;;;;;;AAAA;;AACA;;AAWA;;AACA;;;;;;;;;;AAEA,MAAMA,wBAAwB,GAAG,EAAjC;AACA,MAAMC,mBAAmB,GAAG,EAA5B;;AAcA,MAAMC,eAAe,GAAG,QAUX;AAAA,MAVY;AACvBC,IAAAA,KADuB;AAEvBC,IAAAA,UAFuB;AAGvBC,IAAAA,UAAU,GAAG,KAHU;AAIvBC,IAAAA,QAAQ,EAAEC,YAJa;AAKvBC,IAAAA,WALuB;AAMvBC,IAAAA,aANuB;AAOvBC,IAAAA,QAPuB;AAQvBC,IAAAA,KARuB;AASvB,OAAGC;AAToB,GAUZ;AACX,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBH,KAAzB;AACA,QAAML,QAAQ,GAAGC,YAAY,IAAI,CAACK,IAAI,CAACG,OAAvC;AACA,QAAMC,qBAAqB,GACzBR,WAAW,IACX,oBAAMM,MAAM,CAACG,IAAb,EACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF,CAHW,CAUX;AACA;;AACA,QAAMC,aAAa,GACjBC,sBAASC,EAAT,KAAgB,SAAhB,IACAD,sBAASE,OAAT,IAAoBvB,mBADpB,IAEAI,UAHF;;AAKA,MAAIH,eAAe,CAACuB,SAApB,EAA+B;AAC7B,wBACE,oBAAC,oCAAD,eACMb,IADN;AAEE,MAAA,QAAQ,EAAEN,QAFZ;AAGE,MAAA,aAAa,EAAEe,aAHjB;AAIE,MAAA,UAAU,EACRjB,UAAU,IAAI,IAAd,GACIA,UADJ,GAEIsB,qCAAwBC,MAAxB,CAA+BX,qBAA/B,EAAsDX,UAAtD;AAPR,qBAUE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE,CAACA,UAAU,IAAIuB,MAAM,CAACC,cAAtB,EAAsC1B,KAAtC;AAAb,OACG2B,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBtB,QAApB,CADH,CAVF,CADF;AAgBD;;AAED,sBACE,oBAAC,+BAAD,eACME,IADN;AAEE,IAAA,QAAQ,EAAEN,QAFZ;AAGE,IAAA,KAAK,EAAE,CAACD,UAAU,IAAIuB,MAAM,CAACC,cAAtB,EAAsC1B,KAAtC,CAHT;AAIE,IAAA,aAAa,EACXM,aAAa,IAAI,IAAjB,GACIA,aADJ,GAEI,oBAAMO,qBAAN,EAA6BiB,IAA7B,CAAkC,GAAlC,EAAuCd,GAAvC,GAA6CC,MAA7C;AAPR,MAUGU,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBtB,QAApB,CAVH,CADF;AAcD,CA5DD;;AA8DAR,eAAe,CAACuB,SAAhB,GACEH,sBAASC,EAAT,KAAgB,SAAhB,IAA6BD,sBAASE,OAAT,IAAoBxB,wBADnD;;AAGA,MAAM4B,MAAM,GAAGM,wBAAWC,MAAX,CAAkB;AAC/BN,EAAAA,cAAc,EAAE;AACdO,IAAAA,QAAQ,EAAE;AADI;AADe,CAAlB,CAAf;;eAMe,wBAAUlC,eAAV,C","sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst TouchableRipple = ({\n  style,\n  background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const { dark, colors } = theme;\n  const disabled = disabledProp || !rest.onPress;\n  const calculatedRippleColor =\n    rippleColor ||\n    color(colors.text)\n      .alpha(dark ? 0.32 : 0.2)\n      .rgb()\n      .string();\n\n  // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n  // https://github.com/facebook/react-native/issues/6480\n  const useForeground =\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_PIE &&\n    borderless;\n\n  if (TouchableRipple.supported) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        disabled={disabled}\n        useForeground={useForeground}\n        background={\n          background != null\n            ? background\n            : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)\n        }\n      >\n        <View style={[borderless && styles.overflowHidden, style]}>\n          {React.Children.only(children)}\n        </View>\n      </TouchableNativeFeedback>\n    );\n  }\n\n  return (\n    <TouchableHighlight\n      {...rest}\n      disabled={disabled}\n      style={[borderless && styles.overflowHidden, style]}\n      underlayColor={\n        underlayColor != null\n          ? underlayColor\n          : color(calculatedRippleColor).fade(0.5).rgb().string()\n      }\n    >\n      {React.Children.only(children)}\n    </TouchableHighlight>\n  );\n};\n\nTouchableRipple.supported =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\nconst styles = StyleSheet.create({\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
+{"version":3,"sources":["TouchableRipple.native.tsx"],"names":["ANDROID_VERSION_PIE","TouchableRipple","React","forwardRef","ref","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","Platform","OS","Version","TouchableRippleSupported","supported","TouchableNativeFeedback","Ripple","styles","overflowHidden","Children","only","fade","StyleSheet","create","overflow"],"mappings":";;;;;;;AAAA;;AACA;;AAWA;;AACA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,mBAAmB,GAAG,EAA5B;AAsBA,MAAMC,eAAe,gBAAGC,KAAK,CAACC,UAAN,CACtB,OAYEC,GAZF,KAaK;AAAA,MAZH;AACEC,IAAAA,KADF;AAEEC,IAAAA,UAFF;AAGEC,IAAAA,UAAU,GAAG,KAHf;AAIEC,IAAAA,QAAQ,EAAEC,YAJZ;AAKEC,IAAAA,WALF;AAMEC,IAAAA,aANF;AAOEC,IAAAA,QAPF;AAQEC,IAAAA,KARF;AASE,OAAGC;AATL,GAYG;AACH,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBH,KAAzB;AACA,QAAML,QAAQ,GAAGC,YAAY,IAAI,CAACK,IAAI,CAACG,OAAvC;AACA,QAAMC,qBAAqB,GACzBR,WAAW,IACX,oBAAMM,MAAM,CAACG,IAAb,EACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF,CAHG,CAUH;AACA;;AACA,QAAMC,aAAa,GACjBC,sBAASC,EAAT,KAAgB,SAAhB,IACAD,sBAASE,OAAT,IAAoB1B,mBADpB,IAEAO,UAHF;;AAKA,MAAIoB,kCAAyBC,SAA7B,EAAwC;AACtC,wBACE,oBAAC,oCAAD,eACMd,IADN;AAEE,MAAA,GAAG,EAAEV,GAFP;AAGE,MAAA,QAAQ,EAAEI,QAHZ;AAIE,MAAA,aAAa,EAAEe,aAJjB;AAKE,MAAA,UAAU,EACRjB,UAAU,IAAI,IAAd,GACIA,UADJ,GAEIuB,qCAAwBC,MAAxB,CACEZ,qBADF,EAEEX,UAFF;AARR,qBAcE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE,CAACA,UAAU,IAAIwB,MAAM,CAACC,cAAtB,EAAsC3B,KAAtC;AAAb,OACGH,KAAK,CAAC+B,QAAN,CAAeC,IAAf,CAAoBtB,QAApB,CADH,CAdF,CADF;AAoBD;;AAED,sBACE,oBAAC,+BAAD,eACME,IADN;AAEE,IAAA,GAAG,EAAEV,GAFP;AAGE,IAAA,QAAQ,EAAEI,QAHZ;AAIE,IAAA,KAAK,EAAE,CAACD,UAAU,IAAIwB,MAAM,CAACC,cAAtB,EAAsC3B,KAAtC,CAJT;AAKE,IAAA,aAAa,EACXM,aAAa,IAAI,IAAjB,GACIA,aADJ,GAEI,oBAAMO,qBAAN,EAA6BiB,IAA7B,CAAkC,GAAlC,EAAuCd,GAAvC,GAA6CC,MAA7C;AARR,MAWGpB,KAAK,CAAC+B,QAAN,CAAeC,IAAf,CAAoBtB,QAApB,CAXH,CADF;AAeD,CArEqB,CAAxB;;AAwEA,MAAMmB,MAAM,GAAGK,wBAAWC,MAAX,CAAkB;AAC/BL,EAAAA,cAAc,EAAE;AACdM,IAAAA,QAAQ,EAAE;AADI;AADe,CAAlB,CAAf;;eAMe,wBAAUrC,eAAV,C","sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nimport TouchableRippleSupported from './TouchableRippleSupported';\nimport 'react-native/tvos-types.d';\n\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: ReactNativePaper.Theme;\n  tvParallaxProperties?: any;\n  hasTVPreferredFocus?: boolean;\n  onFocus?: any;\n  onBlur?: any;\n  nextFocusUp?: any;\n  nextFocusDown?: any;\n  nextFocusLeft?: any;\n  nextFocusRight?: any;\n};\n\nconst TouchableRipple = React.forwardRef(\n  (\n    {\n      style,\n      background,\n      borderless = false,\n      disabled: disabledProp,\n      rippleColor,\n      underlayColor,\n      children,\n      theme,\n      ...rest\n    }: Props,\n    ref: any\n  ) => {\n    const { dark, colors } = theme;\n    const disabled = disabledProp || !rest.onPress;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n    // https://github.com/facebook/react-native/issues/6480\n    const useForeground =\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_PIE &&\n      borderless;\n\n    if (TouchableRippleSupported.supported) {\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          ref={ref}\n          disabled={disabled}\n          useForeground={useForeground}\n          background={\n            background != null\n              ? background\n              : TouchableNativeFeedback.Ripple(\n                  calculatedRippleColor,\n                  borderless\n                )\n          }\n        >\n          <View style={[borderless && styles.overflowHidden, style]}>\n            {React.Children.only(children)}\n          </View>\n        </TouchableNativeFeedback>\n      );\n    }\n\n    return (\n      <TouchableHighlight\n        {...rest}\n        ref={ref}\n        disabled={disabled}\n        style={[borderless && styles.overflowHidden, style]}\n        underlayColor={\n          underlayColor != null\n            ? underlayColor\n            : color(calculatedRippleColor).fade(0.5).rgb().string()\n        }\n      >\n        {React.Children.only(children)}\n      </TouchableHighlight>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRippleSupported.js b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRippleSupported.js
new file mode 100644
index 0000000..6a57408
--- /dev/null
+++ b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRippleSupported.js
@@ -0,0 +1,15 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = void 0;
+
+var _reactNative = require("react-native");
+
+const ANDROID_VERSION_LOLLIPOP = 21;
+var _default = {
+  supported: _reactNative.Platform.OS === 'web' || _reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP
+};
+exports.default = _default;
+//# sourceMappingURL=TouchableRippleSupported.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRippleSupported.js.map b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRippleSupported.js.map
new file mode 100644
index 0000000..327c6ca
--- /dev/null
+++ b/node_modules/react-native-paper/lib/commonjs/components/TouchableRipple/TouchableRippleSupported.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["TouchableRippleSupported.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","supported","Platform","OS","Version"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,wBAAwB,GAAG,EAAjC;eAEe;AACbC,EAAAA,SAAS,EACPC,sBAASC,EAAT,KAAgB,KAAhB,IACCD,sBAASC,EAAT,KAAgB,SAAhB,IAA6BD,sBAASE,OAAT,IAAoBJ;AAHvC,C","sourcesContent":["import { Platform } from 'react-native';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default {\n  supported:\n    Platform.OS === 'web' ||\n    (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP),\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/module/components/BottomNavigation/BottomNavigation.js b/node_modules/react-native-paper/lib/module/components/BottomNavigation/BottomNavigation.js
index 2fc3f56..f28804f 100644
--- a/node_modules/react-native-paper/lib/module/components/BottomNavigation/BottomNavigation.js
+++ b/node_modules/react-native-paper/lib/module/components/BottomNavigation/BottomNavigation.js
@@ -9,6 +9,7 @@ import Icon from '../Icon';
 import Surface from '../Surface';
 import Badge from '../Badge';
 import TouchableRipple from '../TouchableRipple/TouchableRipple';
+import TouchableRippleSupported from '../TouchableRipple/TouchableRippleSupported';
 import Text from '../Typography/Text';
 import { black, white } from '../../styles/colors';
 import { withTheme } from '../../core/theming';
@@ -35,7 +36,7 @@ const Touchable = _ref => {
     rippleColor,
     ...rest
   } = _ref;
-  return TouchableRipple.supported ? /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {
+  return TouchableRippleSupported.supported ? /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {
     disabled: rest.disabled || undefined,
     borderless: borderless,
     centered: centered,
diff --git a/node_modules/react-native-paper/lib/module/components/BottomNavigation/BottomNavigation.js.map b/node_modules/react-native-paper/lib/module/components/BottomNavigation/BottomNavigation.js.map
index d80e825..5f9156a 100644
--- a/node_modules/react-native-paper/lib/module/components/BottomNavigation/BottomNavigation.js.map
+++ b/node_modules/react-native-paper/lib/module/components/BottomNavigation/BottomNavigation.js.map
@@ -1 +1 @@
-{"version":3,"sources":["BottomNavigation.tsx"],"names":["React","View","Animated","TouchableWithoutFeedback","StyleSheet","Platform","getBottomSpace","color","overlay","Icon","Surface","Badge","TouchableRipple","Text","black","white","withTheme","useAnimatedValue","useAnimatedValueArray","useLayout","useIsKeyboardShown","BottomNavigationRouteScreen","MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","FAR_FAR_AWAY","OS","Touchable","route","_0","style","children","borderless","centered","rippleColor","rest","supported","disabled","undefined","SceneComponent","memo","component","createElement","BottomNavigation","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","props","getLabelText","title","getBadge","badge","getColor","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","sceneAnimationEnabled","onTabPress","onIndexChange","shifting","routes","length","safeAreaInsets","labelMaxFontSizeMultiplier","scale","animation","focusedKey","index","key","visibleAnim","tabsAnims","map","_","i","offsetsAnims","indexAnim","rippleAnim","layout","onLayout","loaded","setLoaded","useState","includes","keyboardVisible","setKeyboardVisible","handleKeyboardShow","useCallback","timing","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToIndex","setValue","parallel","finished","tab","forEach","offset","useEffect","onShow","onHide","prevNavigationState","useRef","current","handleTabPress","event","defaultPrevented","preventDefault","jumpTo","findIndex","colors","dark","isDarkTheme","mode","backgroundColor","customBackground","elevation","flatten","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","width","tabWidth","rippleSize","insets","left","right","bottom","styles","container","content","background","focused","opacity","top","absoluteFill","bar","transform","translateY","height","position","measured","barContent","items","marginBottom","marginHorizontal","max","maxWidth","ripple","borderRadius","active","activeOpacity","inactiveOpacity","onPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","item","iconContainer","iconWrapper","icon","badgeContainer","String","labelContainer","labelWrapper","label","SceneMap","scenes","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  ViewStyle,\n} from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../../styles/overlay';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport Badge from '../Badge';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useLayout from '../../utils/useLayout';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = ({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = true,\n  barStyle,\n  labeled = true,\n  style,\n  theme,\n  sceneAnimationEnabled = false,\n  onTabPress,\n  onIndexChange,\n  shifting = navigationState.routes.length > 3,\n  safeAreaInsets,\n  labelMaxFontSizeMultiplier = 1,\n}: Props) => {\n  const { scale } = theme.animation;\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start(({ finished }) => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      indexAnim,\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      rippleAnim,\n      scale,\n      tabsAnims,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide,\n  });\n\n  const prevNavigationState = React.useRef<NavigationState>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(\n    (key: string) => {\n      const index = navigationState.routes.findIndex(\n        (route) => route.key === key\n      );\n\n      onIndexChange(index);\n    },\n    [navigationState.routes, onIndexChange]\n  );\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n    StyleSheet.flatten(barStyle) || {};\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  const backgroundColor = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n  const activeTintColor =\n    typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor =\n    typeof inactiveColor !== 'undefined'\n      ? inactiveColor\n      : color(textColor).alpha(0.5).rgb().string();\n\n  const touchColor = color(activeColor || activeTintColor)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? 0,\n    right: safeAreaInsets?.right ?? 0,\n    bottom: safeAreaInsets?.bottom ?? BOTTOM_INSET,\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.content, { backgroundColor: colors.background }]}>\n        {routes.map((route, index) => {\n          if (!loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsAnims[index]\n            : focused\n            ? 1\n            : 0;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, FAR_FAR_AWAY],\n              })\n            : focused\n            ? 0\n            : FAR_FAR_AWAY;\n\n          return (\n            <BottomNavigationRouteScreen\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              index={index}\n              visibility={opacity}\n              style={[StyleSheet.absoluteFill, { opacity }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View style={[styles.content, { top }]}>\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </BottomNavigationRouteScreen>\n          );\n        })}\n      </View>\n      <Surface\n        style={\n          [\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: visibleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: keyboardVisible ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={\n          layout.measured\n            ? keyboardHidesNavigationBar && keyboardVisible\n              ? 'none'\n              : 'auto'\n            : 'none'\n        }\n        onLayout={onLayout}\n      >\n        <Animated.View style={[styles.barContent, { backgroundColor }]}>\n          <View\n            style={[\n              styles.items,\n              {\n                marginBottom: insets.bottom,\n                marginHorizontal: Math.max(insets.left, insets.right),\n                maxWidth: maxTabBarWidth,\n              },\n            ]}\n            accessibilityRole={'tablist'}\n          >\n            {shifting ? (\n              <Animated.View\n                pointerEvents=\"none\"\n                style={[\n                  styles.ripple,\n                  {\n                    // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                    // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                    top: (BAR_HEIGHT - rippleSize) / 2,\n                    left:\n                      tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n                    height: rippleSize,\n                    width: rippleSize,\n                    borderRadius: rippleSize / 2,\n                    backgroundColor: getColor({\n                      route: routes[navigationState.index],\n                    }),\n                    transform: [\n                      {\n                        // Scale to twice the size  to ensure it covers the whole navigation bar\n                        scale: rippleAnim.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0, 8],\n                        }),\n                      },\n                    ],\n                    opacity: rippleAnim.interpolate({\n                      inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                      outputRange: [0, 0, 1, 1],\n                    }),\n                  },\n                ]}\n              />\n            ) : null}\n            {routes.map((route, index) => {\n              const focused = navigationState.index === index;\n              const active = tabsAnims[index];\n\n              // Scale the label up\n              const scale =\n                labeled && shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0.5, 1],\n                    })\n                  : 1;\n\n              // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n              const translateY = labeled\n                ? shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [7, 0],\n                    })\n                  : 0\n                : 7;\n\n              // We render the active icon and label on top of inactive ones and cross-fade them on change.\n              // This trick gives the illusion that we are animating between active and inactive colors.\n              // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n              const activeOpacity = active;\n              const inactiveOpacity = active.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              });\n\n              const badge = getBadge({ route });\n\n              return renderTouchable({\n                key: route.key,\n                route,\n                borderless: true,\n                centered: true,\n                rippleColor: touchColor,\n                onPress: () => handleTabPress(index),\n                testID: getTestID({ route }),\n                accessibilityLabel: getAccessibilityLabel({ route }),\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits: focused\n                  ? ['button', 'selected']\n                  : 'button',\n                accessibilityComponentType: 'button',\n                accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n                accessibilityState: { selected: focused },\n                style: styles.item,\n                children: (\n                  <View pointerEvents=\"none\">\n                    <Animated.View\n                      style={[\n                        styles.iconContainer,\n                        { transform: [{ translateY }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[styles.iconWrapper, { opacity: activeOpacity }]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: true,\n                            color: activeTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={activeTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <Animated.View\n                        style={[\n                          styles.iconWrapper,\n                          { opacity: inactiveOpacity },\n                        ]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: false,\n                            color: inactiveTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={inactiveTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <View\n                        style={[\n                          styles.badgeContainer,\n                          {\n                            right:\n                              (badge != null && typeof badge !== 'boolean'\n                                ? String(badge).length * -2\n                                : 0) - 2,\n                          },\n                        ]}\n                      >\n                        {typeof badge === 'boolean' ? (\n                          <Badge visible={badge} size={8} />\n                        ) : (\n                          <Badge visible={badge != null} size={16}>\n                            {badge}\n                          </Badge>\n                        )}\n                      </View>\n                    </Animated.View>\n                    {labeled ? (\n                      <Animated.View\n                        style={[\n                          styles.labelContainer,\n                          { transform: [{ scale }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Text\n                              maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n                              style={[styles.label, { color: activeTintColor }]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                        {shifting ? null : (\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: inactiveOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: false,\n                                color: inactiveTintColor,\n                              })\n                            ) : (\n                              <Text\n                                maxFontSizeMultiplier={\n                                  labelMaxFontSizeMultiplier\n                                }\n                                selectable={false}\n                                style={[\n                                  styles.label,\n                                  { color: inactiveTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                        )}\n                      </Animated.View>\n                    ) : (\n                      <View style={styles.labelContainer} />\n                    )}\n                  </View>\n                ),\n              });\n            })}\n          </View>\n        </Animated.View>\n      </Surface>\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = (scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    height: BAR_HEIGHT,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]}
\ No newline at end of file
+{"version":3,"sources":["BottomNavigation.tsx"],"names":["React","View","Animated","TouchableWithoutFeedback","StyleSheet","Platform","getBottomSpace","color","overlay","Icon","Surface","Badge","TouchableRipple","TouchableRippleSupported","Text","black","white","withTheme","useAnimatedValue","useAnimatedValueArray","useLayout","useIsKeyboardShown","BottomNavigationRouteScreen","MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","FAR_FAR_AWAY","OS","Touchable","route","_0","style","children","borderless","centered","rippleColor","rest","supported","disabled","undefined","SceneComponent","memo","component","createElement","BottomNavigation","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","props","getLabelText","title","getBadge","badge","getColor","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","sceneAnimationEnabled","onTabPress","onIndexChange","shifting","routes","length","safeAreaInsets","labelMaxFontSizeMultiplier","scale","animation","focusedKey","index","key","visibleAnim","tabsAnims","map","_","i","offsetsAnims","indexAnim","rippleAnim","layout","onLayout","loaded","setLoaded","useState","includes","keyboardVisible","setKeyboardVisible","handleKeyboardShow","useCallback","timing","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToIndex","setValue","parallel","finished","tab","forEach","offset","useEffect","onShow","onHide","prevNavigationState","useRef","current","handleTabPress","event","defaultPrevented","preventDefault","jumpTo","findIndex","colors","dark","isDarkTheme","mode","backgroundColor","customBackground","elevation","flatten","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","width","tabWidth","rippleSize","insets","left","right","bottom","styles","container","content","background","focused","opacity","top","absoluteFill","bar","transform","translateY","height","position","measured","barContent","items","marginBottom","marginHorizontal","max","maxWidth","ripple","borderRadius","active","activeOpacity","inactiveOpacity","onPress","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","item","iconContainer","iconWrapper","icon","badgeContainer","String","labelContainer","labelWrapper","label","SceneMap","scenes","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,IADF,EAEEC,QAFF,EAGEC,wBAHF,EAKEC,UALF,EAOEC,QAPF,QASO,cATP;AAUA,SAASC,cAAT,QAA+B,8BAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,IAAP,MAAiC,SAAjC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,wBAAP,MAAqC,6CAArC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,qBAA7B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,qBAAP,MAAkC,mCAAlC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAOC,2BAAP,MAAwC,+BAAxC;AAsNA,MAAMC,gBAAgB,GAAG,KAAzB,C,CAAgC;;AAChC,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,aAAa,GAAG,GAAtB;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,YAAY,GAAGrB,cAAc,EAAnC;AACA,MAAMsB,YAAY,GAAGvB,QAAQ,CAACwB,EAAT,KAAgB,KAAhB,GAAwB,CAAxB,GAA4B,IAAjD;;AAEA,MAAMC,SAAS,GAAG;AAAA,MAAC;AACjBC,IAAAA,KAAK,EAAEC,EADU;AAEjBC,IAAAA,KAFiB;AAGjBC,IAAAA,QAHiB;AAIjBC,IAAAA,UAJiB;AAKjBC,IAAAA,QALiB;AAMjBC,IAAAA,WANiB;AAOjB,OAAGC;AAPc,GAAD;AAAA,SAShBzB,wBAAwB,CAAC0B,SAAzB,gBACE,oBAAC,eAAD,eACMD,IADN;AAEE,IAAA,QAAQ,EAAEA,IAAI,CAACE,QAAL,IAAiBC,SAF7B;AAGE,IAAA,UAAU,EAAEN,UAHd;AAIE,IAAA,QAAQ,EAAEC,QAJZ;AAKE,IAAA,WAAW,EAAEC,WALf;AAME,IAAA,KAAK,EAAEJ;AANT,MAQGC,QARH,CADF,gBAYE,oBAAC,wBAAD,EAA8BI,IAA9B,eACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEL;AAAb,KAAqBC,QAArB,CADF,CArBc;AAAA,CAAlB;;AA0BA,MAAMQ,cAAc,gBAAG1C,KAAK,CAAC2C,IAAN,CAAW;AAAA,MAAC;AAAEC,IAAAA,SAAF;AAAa,OAAGN;AAAhB,GAAD;AAAA,sBAChCtC,KAAK,CAAC6C,aAAN,CAAoBD,SAApB,EAA+BN,IAA/B,CADgC;AAAA,CAAX,CAAvB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMQ,gBAAgB,GAAG,SAyBZ;AAAA;;AAAA,MAzBa;AACxBC,IAAAA,eADwB;AAExBC,IAAAA,WAFwB;AAGxBC,IAAAA,UAHwB;AAIxBC,IAAAA,WAJwB;AAKxBC,IAAAA,eAAe,GAAIC,KAAD,iBAA2B,oBAAC,SAAD,EAAeA,KAAf,CALrB;AAMxBC,IAAAA,YAAY,GAAG;AAAA,UAAC;AAAEtB,QAAAA;AAAF,OAAD;AAAA,aAAiCA,KAAK,CAACuB,KAAvC;AAAA,KANS;AAOxBC,IAAAA,QAAQ,GAAG;AAAA,UAAC;AAAExB,QAAAA;AAAF,OAAD;AAAA,aAAiCA,KAAK,CAACyB,KAAvC;AAAA,KAPa;AAQxBC,IAAAA,QAAQ,GAAG;AAAA,UAAC;AAAE1B,QAAAA;AAAF,OAAD;AAAA,aAAiCA,KAAK,CAACxB,KAAvC;AAAA,KARa;AASxBmD,IAAAA,qBAAqB,GAAG;AAAA,UAAC;AAAE3B,QAAAA;AAAF,OAAD;AAAA,aACtBA,KAAK,CAAC4B,kBADgB;AAAA,KATA;AAWxBC,IAAAA,SAAS,GAAG;AAAA,UAAC;AAAE7B,QAAAA;AAAF,OAAD;AAAA,aAAiCA,KAAK,CAAC8B,MAAvC;AAAA,KAXY;AAYxBC,IAAAA,WAZwB;AAaxBC,IAAAA,aAbwB;AAcxBC,IAAAA,0BAA0B,GAAG,IAdL;AAexBC,IAAAA,QAfwB;AAgBxBC,IAAAA,OAAO,GAAG,IAhBc;AAiBxBjC,IAAAA,KAjBwB;AAkBxBkC,IAAAA,KAlBwB;AAmBxBC,IAAAA,qBAAqB,GAAG,KAnBA;AAoBxBC,IAAAA,UApBwB;AAqBxBC,IAAAA,aArBwB;AAsBxBC,IAAAA,QAAQ,GAAGxB,eAAe,CAACyB,MAAhB,CAAuBC,MAAvB,GAAgC,CAtBnB;AAuBxBC,IAAAA,cAvBwB;AAwBxBC,IAAAA,0BAA0B,GAAG;AAxBL,GAyBb;AACX,QAAM;AAAEC,IAAAA;AAAF,MAAYT,KAAK,CAACU,SAAxB;AAEA,QAAMC,UAAU,GAAG/B,eAAe,CAACyB,MAAhB,CAAuBzB,eAAe,CAACgC,KAAvC,EAA8CC,GAAjE;AAEA;AACF;AACA;;AACE,QAAMC,WAAW,GAAG/D,gBAAgB,CAAC,CAAD,CAApC;AAEA;AACF;AACA;;AACE,QAAMgE,SAAS,GAAG/D,qBAAqB,CACrC4B,eAAe,CAACyB,MAAhB,CAAuBW,GAAvB,EACE;AACA,GAACC,CAAD,EAAIC,CAAJ,KAAWA,CAAC,KAAKtC,eAAe,CAACgC,KAAtB,GAA8B,CAA9B,GAAkC,CAF/C,CADqC,CAAvC;AAOA;AACF;AACA;AACA;AACA;;AACE,QAAMO,YAAY,GAAGnE,qBAAqB,CACxC4B,eAAe,CAACyB,MAAhB,CAAuBW,GAAvB,EACE;AACA,GAACC,CAAD,EAAIC,CAAJ,KAAWA,CAAC,KAAKtC,eAAe,CAACgC,KAAtB,GAA8B,CAA9B,GAAkC,CAF/C,CADwC,CAA1C;AAOA;AACF;AACA;AACA;;AACE,QAAMQ,SAAS,GAAGrE,gBAAgB,CAAC6B,eAAe,CAACgC,KAAjB,CAAlC;AAEA;AACF;AACA;;AACE,QAAMS,UAAU,GAAGtE,gBAAgB,CAACK,gBAAD,CAAnC;AAEA;AACF;AACA;;AACE,QAAM,CAACkE,MAAD,EAASC,QAAT,IAAqBtE,SAAS,EAApC;AAEA;AACF;AACA;;AACE,QAAM,CAACuE,MAAD,EAASC,SAAT,IAAsB5F,KAAK,CAAC6F,QAAN,CAAyB,CAACf,UAAD,CAAzB,CAA5B;;AAEA,MAAI,CAACa,MAAM,CAACG,QAAP,CAAgBhB,UAAhB,CAAL,EAAkC;AAChC;AACAc,IAAAA,SAAS,CAAED,MAAD,IAAY,CAAC,GAAGA,MAAJ,EAAYb,UAAZ,CAAb,CAAT;AACD;AAED;AACF;AACA;;;AACE,QAAM,CAACiB,eAAD,EAAkBC,kBAAlB,IAAwChG,KAAK,CAAC6F,QAAN,CAAe,KAAf,CAA9C;AAEA,QAAMI,kBAAkB,GAAGjG,KAAK,CAACkG,WAAN,CAAkB,MAAM;AACjDF,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA9F,IAAAA,QAAQ,CAACiG,MAAT,CAAgBlB,WAAhB,EAA6B;AAC3BmB,MAAAA,OAAO,EAAE,CADkB;AAE3BC,MAAAA,QAAQ,EAAE,MAAMzB,KAFW;AAG3B0B,MAAAA,eAAe,EAAE;AAHU,KAA7B,EAIGC,KAJH;AAKD,GAP0B,EAOxB,CAAC3B,KAAD,EAAQK,WAAR,CAPwB,CAA3B;AASA,QAAMuB,kBAAkB,GAAGxG,KAAK,CAACkG,WAAN,CAAkB,MAAM;AACjDhG,IAAAA,QAAQ,CAACiG,MAAT,CAAgBlB,WAAhB,EAA6B;AAC3BmB,MAAAA,OAAO,EAAE,CADkB;AAE3BC,MAAAA,QAAQ,EAAE,MAAMzB,KAFW;AAG3B0B,MAAAA,eAAe,EAAE;AAHU,KAA7B,EAIGC,KAJH,CAIS,MAAM;AACbP,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,KAND;AAOD,GAR0B,EAQxB,CAACpB,KAAD,EAAQK,WAAR,CARwB,CAA3B;AAUA,QAAMwB,cAAc,GAAGzG,KAAK,CAACkG,WAAN,CACpBnB,KAAD,IAAmB;AACjB;AACAS,IAAAA,UAAU,CAACkB,QAAX,CAAoBnF,gBAApB;AAEArB,IAAAA,QAAQ,CAACyG,QAAT,CAAkB,CAChBzG,QAAQ,CAACiG,MAAT,CAAgBX,UAAhB,EAA4B;AAC1BY,MAAAA,OAAO,EAAE,CADiB;AAE1BC,MAAAA,QAAQ,EAAE9B,QAAQ,GAAG,MAAMK,KAAT,GAAiB,CAFT;AAG1B0B,MAAAA,eAAe,EAAE;AAHS,KAA5B,CADgB,EAMhB,GAAGvD,eAAe,CAACyB,MAAhB,CAAuBW,GAAvB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAC5BnF,QAAQ,CAACiG,MAAT,CAAgBjB,SAAS,CAACG,CAAD,CAAzB,EAA8B;AAC5Be,MAAAA,OAAO,EAAEf,CAAC,KAAKN,KAAN,GAAc,CAAd,GAAkB,CADC;AAE5BsB,MAAAA,QAAQ,EAAE9B,QAAQ,GAAG,MAAMK,KAAT,GAAiB,CAFP;AAG5B0B,MAAAA,eAAe,EAAE;AAHW,KAA9B,CADC,CANa,CAAlB,EAaGC,KAbH,CAaS,SAAkB;AAAA,UAAjB;AAAEK,QAAAA;AAAF,OAAiB;AACzB;AACA1B,MAAAA,SAAS,CAACC,GAAV,CAAc,CAAC0B,GAAD,EAAMxB,CAAN,KAAYwB,GAAG,CAACH,QAAJ,CAAarB,CAAC,KAAKN,KAAN,GAAc,CAAd,GAAkB,CAA/B,CAA1B,EAFyB,CAIzB;;AACAQ,MAAAA,SAAS,CAACmB,QAAV,CAAmB3B,KAAnB;AACAS,MAAAA,UAAU,CAACkB,QAAX,CAAoBnF,gBAApB;;AAEA,UAAIqF,QAAJ,EAAc;AACZ;AACA;AACAtB,QAAAA,YAAY,CAACwB,OAAb,CAAqB,CAACC,MAAD,EAAS1B,CAAT,KAAe;AAClC,cAAIA,CAAC,KAAKN,KAAV,EAAiB;AACfgC,YAAAA,MAAM,CAACL,QAAP,CAAgB,CAAhB;AACD,WAFD,MAEO;AACLK,YAAAA,MAAM,CAACL,QAAP,CAAgB,CAAhB;AACD;AACF,SAND;AAOD;AACF,KAhCD;AAiCD,GAtCoB,EAuCrB,CACEnB,SADF,EAEEhB,QAFF,EAGExB,eAAe,CAACyB,MAHlB,EAIEc,YAJF,EAKEE,UALF,EAMEZ,KANF,EAOEM,SAPF,CAvCqB,CAAvB;AAkDAlF,EAAAA,KAAK,CAACgH,SAAN,CAAgB,MAAM;AACpB;AACA;AACAP,IAAAA,cAAc,CAAC1D,eAAe,CAACgC,KAAjB,CAAd,CAHoB,CAIpB;AACD,GALD,EAKG,EALH;AAOA1D,EAAAA,kBAAkB,CAAC;AACjB4F,IAAAA,MAAM,EAAEhB,kBADS;AAEjBiB,IAAAA,MAAM,EAAEV;AAFS,GAAD,CAAlB;AAKA,QAAMW,mBAAmB,GAAGnH,KAAK,CAACoH,MAAN,EAA5B;AAEApH,EAAAA,KAAK,CAACgH,SAAN,CAAgB,MAAM;AACpB;AACA1B,IAAAA,YAAY,CAACwB,OAAb,CAAqB,CAACC,MAAD,EAAS1B,CAAT,KAAe;AAAA;;AAClC,UACEA,CAAC,KAAKtC,eAAe,CAACgC,KAAtB,IACAM,CAAC,+BAAK8B,mBAAmB,CAACE,OAAzB,0DAAK,sBAA6BtC,KAAlC,CAFH,EAGE;AACAgC,QAAAA,MAAM,CAACL,QAAP,CAAgB,CAAhB;AACD;AACF,KAPD;AASAD,IAAAA,cAAc,CAAC1D,eAAe,CAACgC,KAAjB,CAAd;AACD,GAZD,EAYG,CAAChC,eAAe,CAACgC,KAAjB,EAAwB0B,cAAxB,EAAwCnB,YAAxC,CAZH;;AAcA,QAAMgC,cAAc,GAAIvC,KAAD,IAAmB;AACxC,UAAMwC,KAAK,GAAG;AACZxF,MAAAA,KAAK,EAAEgB,eAAe,CAACyB,MAAhB,CAAuBO,KAAvB,CADK;AAEZyC,MAAAA,gBAAgB,EAAE,KAFN;AAGZC,MAAAA,cAAc,EAAE,MAAM;AACpBF,QAAAA,KAAK,CAACC,gBAAN,GAAyB,IAAzB;AACD;AALW,KAAd;AAQAnD,IAAAA,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAGkD,KAAH,CAAV;;AAEA,QAAIA,KAAK,CAACC,gBAAV,EAA4B;AAC1B;AACD;;AAED,QAAIzC,KAAK,KAAKhC,eAAe,CAACgC,KAA9B,EAAqC;AACnCT,MAAAA,aAAa,CAACS,KAAD,CAAb;AACD;AACF,GAlBD;;AAoBA,QAAM2C,MAAM,GAAG1H,KAAK,CAACkG,WAAN,CACZlB,GAAD,IAAiB;AACf,UAAMD,KAAK,GAAGhC,eAAe,CAACyB,MAAhB,CAAuBmD,SAAvB,CACX5F,KAAD,IAAWA,KAAK,CAACiD,GAAN,KAAcA,GADb,CAAd;AAIAV,IAAAA,aAAa,CAACS,KAAD,CAAb;AACD,GAPY,EAQb,CAAChC,eAAe,CAACyB,MAAjB,EAAyBF,aAAzB,CARa,CAAf;AAWA,QAAM;AAAEE,IAAAA;AAAF,MAAazB,eAAnB;AACA,QAAM;AAAE6E,IAAAA,MAAF;AAAUC,IAAAA,IAAI,EAAEC,WAAhB;AAA6BC,IAAAA;AAA7B,MAAsC5D,KAA5C;AAEA,QAAM;AAAE6D,IAAAA,eAAe,EAAEC,gBAAnB;AAAqCC,IAAAA,SAAS,GAAG;AAAjD,MACJ9H,UAAU,CAAC+H,OAAX,CAAmBlE,QAAnB,KAAgC,EADlC;AAGA,QAAMmE,qBAAqB,GAAGH,gBAAgB,GAC1CA,gBAD0C,GAE1CH,WAAW,IAAIC,IAAI,KAAK,UAAxB,GACAvH,OAAO,CAAC0H,SAAD,EAAYN,MAAM,CAACS,OAAnB,CADP,GAEAT,MAAM,CAACU,OAJX;AAMA,QAAMN,eAAe,GAAGzD,QAAQ,GAC5BgB,SAAS,CAACgD,WAAV,CAAsB;AACpBC,IAAAA,UAAU,EAAEhE,MAAM,CAACW,GAAP,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAArB,CADQ;AAEpB;AACA;AACAoD,IAAAA,WAAW,EAAEjE,MAAM,CAACW,GAAP,CACVpD,KAAD,IAAW0B,QAAQ,CAAC;AAAE1B,MAAAA;AAAF,KAAD,CAAR,IAAuBqG,qBADvB;AAJO,GAAtB,CAD4B,GAS5BA,qBATJ;AAWA,QAAMM,MAAM,GACV,OAAON,qBAAP,KAAiC,QAAjC,GACI,CAAC7H,KAAK,CAAC6H,qBAAD,CAAL,CAA6BO,OAA7B,EADL,GAEI,IAHN;AAKA,QAAMC,SAAS,GAAGF,MAAM,GAAG1H,KAAH,GAAWD,KAAnC;AACA,QAAM8H,eAAe,GACnB,OAAO/E,WAAP,KAAuB,WAAvB,GAAqCA,WAArC,GAAmD8E,SADrD;AAEA,QAAME,iBAAiB,GACrB,OAAO/E,aAAP,KAAyB,WAAzB,GACIA,aADJ,GAEIxD,KAAK,CAACqI,SAAD,CAAL,CAAiBG,KAAjB,CAAuB,GAAvB,EAA4BC,GAA5B,GAAkCC,MAAlC,EAHN;AAKA,QAAMC,UAAU,GAAG3I,KAAK,CAACuD,WAAW,IAAI+E,eAAhB,CAAL,CAChBE,KADgB,CACV,IADU,EAEhBC,GAFgB,GAGhBC,MAHgB,EAAnB;AAKA,QAAME,WAAW,GAAG3E,MAAM,CAACC,MAAP,GAAgB,CAAhB,GAAoBjD,aAApB,GAAoCC,aAAxD;AACA,QAAM2H,cAAc,GAAGD,WAAW,GAAG3E,MAAM,CAACC,MAA5C;AAEA,QAAM4E,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS9D,MAAM,CAAC+D,KAAhB,EAAuBJ,cAAvB,CAApB;AACA,QAAMK,QAAQ,GAAGJ,WAAW,GAAG7E,MAAM,CAACC,MAAtC;AAEA,QAAMiF,UAAU,GAAGjE,MAAM,CAAC+D,KAAP,GAAe,CAAlC;AAEA,QAAMG,MAAM,GAAG;AACbC,IAAAA,IAAI,0BAAElF,cAAF,aAAEA,cAAF,uBAAEA,cAAc,CAAEkF,IAAlB,uEAA0B,CADjB;AAEbC,IAAAA,KAAK,2BAAEnF,cAAF,aAAEA,cAAF,uBAAEA,cAAc,CAAEmF,KAAlB,yEAA2B,CAFnB;AAGbC,IAAAA,MAAM,2BAAEpF,cAAF,aAAEA,cAAF,uBAAEA,cAAc,CAAEoF,MAAlB,yEAA4BnI;AAHrB,GAAf;AAMA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACoI,MAAM,CAACC,SAAR,EAAmB/H,KAAnB;AAAb,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAC8H,MAAM,CAACE,OAAR,EAAiB;AAAEjC,MAAAA,eAAe,EAAEJ,MAAM,CAACsC;AAA1B,KAAjB;AAAb,KACG1F,MAAM,CAACW,GAAP,CAAW,CAACpD,KAAD,EAAQgD,KAAR,KAAkB;AAC5B,QAAI,CAACY,MAAM,CAACG,QAAP,CAAgB/D,KAAK,CAACiD,GAAtB,CAAL,EAAiC;AAC/B;AACA,aAAO,IAAP;AACD;;AAED,UAAMmF,OAAO,GAAGpH,eAAe,CAACgC,KAAhB,KAA0BA,KAA1C;AAEA,UAAMqF,OAAO,GAAGhG,qBAAqB,GACjCc,SAAS,CAACH,KAAD,CADwB,GAEjCoF,OAAO,GACP,CADO,GAEP,CAJJ;AAMA,UAAME,GAAG,GAAGjG,qBAAqB,GAC7BkB,YAAY,CAACP,KAAD,CAAZ,CAAoBwD,WAApB,CAAgC;AAC9BC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADkB;AAE9BC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI7G,YAAJ;AAFiB,KAAhC,CAD6B,GAK7BuI,OAAO,GACP,CADO,GAEPvI,YAPJ;AASA,wBACE,oBAAC,2BAAD;AACE,MAAA,GAAG,EAAEG,KAAK,CAACiD,GADb;AAEE,MAAA,aAAa,EAAEmF,OAAO,GAAG,MAAH,GAAY,MAFpC;AAGE,MAAA,2BAA2B,EAAE,CAACA,OAHhC;AAIE,MAAA,yBAAyB,EACvBA,OAAO,GAAG,MAAH,GAAY,qBALvB;AAOE,MAAA,KAAK,EAAEpF,KAPT;AAQE,MAAA,UAAU,EAAEqF,OARd;AASE,MAAA,KAAK,EAAE,CAAChK,UAAU,CAACkK,YAAZ,EAA0B;AAAEF,QAAAA;AAAF,OAA1B,CATT;AAUE,MAAA,WAAW,EAAE,KAVf;AAWE,MAAA,qBAAqB,EACnB;AACA;AACA/J,MAAAA,QAAQ,CAACwB,EAAT,KAAgB,KAAhB,GAAwBkB,eAAe,CAACgC,KAAhB,KAA0BA,KAAlD,GAA0D;AAd9D,oBAiBE,oBAAC,QAAD,CAAU,IAAV;AAAe,MAAA,KAAK,EAAE,CAACgF,MAAM,CAACE,OAAR,EAAiB;AAAEI,QAAAA;AAAF,OAAjB;AAAtB,OACGrH,WAAW,CAAC;AAAEjB,MAAAA,KAAF;AAAS2F,MAAAA;AAAT,KAAD,CADd,CAjBF,CADF;AAuBD,GA9CA,CADH,CADF,eAkDE,oBAAC,OAAD;AACE,IAAA,KAAK,EACH,CACEqC,MAAM,CAACQ,GADT,EAEEvG,0BAA0B,GACtB;AACE;AACAwG,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,UAAU,EAAExF,WAAW,CAACsD,WAAZ,CAAwB;AAClCC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADsB;AAElCC,UAAAA,WAAW,EAAE,CAAChD,MAAM,CAACiF,MAAR,EAAgB,CAAhB;AAFqB,SAAxB;AADd,OADS,CAFb;AAUE;AACA;AACAC,MAAAA,QAAQ,EAAE5E,eAAe,GAAG,UAAH,GAAgB;AAZ3C,KADsB,GAetB,IAjBN,EAkBE9B,QAlBF,CAFJ;AAuBE,IAAA,aAAa,EACXwB,MAAM,CAACmF,QAAP,GACI5G,0BAA0B,IAAI+B,eAA9B,GACE,MADF,GAEE,MAHN,GAII,MA5BR;AA8BE,IAAA,QAAQ,EAAEL;AA9BZ,kBAgCE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE,CAACqE,MAAM,CAACc,UAAR,EAAoB;AAAE7C,MAAAA;AAAF,KAApB;AAAtB,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACL+B,MAAM,CAACe,KADF,EAEL;AACEC,MAAAA,YAAY,EAAEpB,MAAM,CAACG,MADvB;AAEEkB,MAAAA,gBAAgB,EAAE1B,IAAI,CAAC2B,GAAL,CAAStB,MAAM,CAACC,IAAhB,EAAsBD,MAAM,CAACE,KAA7B,CAFpB;AAGEqB,MAAAA,QAAQ,EAAE9B;AAHZ,KAFK,CADT;AASE,IAAA,iBAAiB,EAAE;AATrB,KAWG7E,QAAQ,gBACP,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,aAAa,EAAC,MADhB;AAEE,IAAA,KAAK,EAAE,CACLwF,MAAM,CAACoB,MADF,EAEL;AACE;AACA;AACAd,MAAAA,GAAG,EAAE,CAAC3I,UAAU,GAAGgI,UAAd,IAA4B,CAHnC;AAIEE,MAAAA,IAAI,EACFH,QAAQ,IAAI1G,eAAe,CAACgC,KAAhB,GAAwB,GAA5B,CAAR,GAA2C2E,UAAU,GAAG,CAL5D;AAMEgB,MAAAA,MAAM,EAAEhB,UANV;AAOEF,MAAAA,KAAK,EAAEE,UAPT;AAQE0B,MAAAA,YAAY,EAAE1B,UAAU,GAAG,CAR7B;AASE1B,MAAAA,eAAe,EAAEvE,QAAQ,CAAC;AACxB1B,QAAAA,KAAK,EAAEyC,MAAM,CAACzB,eAAe,CAACgC,KAAjB;AADW,OAAD,CAT3B;AAYEyF,MAAAA,SAAS,EAAE,CACT;AACE;AACA5F,QAAAA,KAAK,EAAEY,UAAU,CAAC+C,WAAX,CAAuB;AAC5BC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADgB;AAE5BC,UAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFe,SAAvB;AAFT,OADS,CAZb;AAqBE2B,MAAAA,OAAO,EAAE5E,UAAU,CAAC+C,WAAX,CAAuB;AAC9BC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAIjH,gBAAJ,EAAsB,GAAtB,EAA2B,CAA3B,CADkB;AAE9BkH,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAFiB,OAAvB;AArBX,KAFK;AAFT,IADO,GAiCL,IA5CN,EA6CGjE,MAAM,CAACW,GAAP,CAAW,CAACpD,KAAD,EAAQgD,KAAR,KAAkB;AAC5B,UAAMoF,OAAO,GAAGpH,eAAe,CAACgC,KAAhB,KAA0BA,KAA1C;AACA,UAAMsG,MAAM,GAAGnG,SAAS,CAACH,KAAD,CAAxB,CAF4B,CAI5B;;AACA,UAAMH,KAAK,GACTV,OAAO,IAAIK,QAAX,GACI8G,MAAM,CAAC9C,WAAP,CAAmB;AACjBC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADK;AAEjBC,MAAAA,WAAW,EAAE,CAAC,GAAD,EAAM,CAAN;AAFI,KAAnB,CADJ,GAKI,CANN,CAL4B,CAa5B;;AACA,UAAMgC,UAAU,GAAGvG,OAAO,GACtBK,QAAQ,GACN8G,MAAM,CAAC9C,WAAP,CAAmB;AACjBC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADK;AAEjBC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFI,KAAnB,CADM,GAKN,CANoB,GAOtB,CAPJ,CAd4B,CAuB5B;AACA;AACA;;AACA,UAAM6C,aAAa,GAAGD,MAAtB;AACA,UAAME,eAAe,GAAGF,MAAM,CAAC9C,WAAP,CAAmB;AACzCC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD6B;AAEzCC,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAF4B,KAAnB,CAAxB;AAKA,UAAMjF,KAAK,GAAGD,QAAQ,CAAC;AAAExB,MAAAA;AAAF,KAAD,CAAtB;AAEA,WAAOoB,eAAe,CAAC;AACrB6B,MAAAA,GAAG,EAAEjD,KAAK,CAACiD,GADU;AAErBjD,MAAAA,KAFqB;AAGrBI,MAAAA,UAAU,EAAE,IAHS;AAIrBC,MAAAA,QAAQ,EAAE,IAJW;AAKrBC,MAAAA,WAAW,EAAE6G,UALQ;AAMrBsC,MAAAA,OAAO,EAAE,MAAMlE,cAAc,CAACvC,KAAD,CANR;AAOrBlB,MAAAA,MAAM,EAAED,SAAS,CAAC;AAAE7B,QAAAA;AAAF,OAAD,CAPI;AAQrB4B,MAAAA,kBAAkB,EAAED,qBAAqB,CAAC;AAAE3B,QAAAA;AAAF,OAAD,CARpB;AASrB;AACA0J,MAAAA,mBAAmB,EAAEtB,OAAO,GACxB,CAAC,QAAD,EAAW,UAAX,CADwB,GAExB,QAZiB;AAarBuB,MAAAA,0BAA0B,EAAE,QAbP;AAcrBC,MAAAA,iBAAiB,EAAEtL,QAAQ,CAACwB,EAAT,KAAgB,KAAhB,GAAwB,QAAxB,GAAmC,KAdjC;AAerB+J,MAAAA,kBAAkB,EAAE;AAAEC,QAAAA,QAAQ,EAAE1B;AAAZ,OAfC;AAgBrBlI,MAAAA,KAAK,EAAE8H,MAAM,CAAC+B,IAhBO;AAiBrB5J,MAAAA,QAAQ,eACN,oBAAC,IAAD;AAAM,QAAA,aAAa,EAAC;AAApB,sBACE,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,KAAK,EAAE,CACL6H,MAAM,CAACgC,aADF,EAEL;AAAEvB,UAAAA,SAAS,EAAE,CAAC;AAAEC,YAAAA;AAAF,WAAD;AAAb,SAFK;AADT,sBAME,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,KAAK,EAAE,CAACV,MAAM,CAACiC,WAAR,EAAqB;AAAE5B,UAAAA,OAAO,EAAEkB;AAAX,SAArB;AADT,SAGGrI,UAAU,GACTA,UAAU,CAAC;AACTlB,QAAAA,KADS;AAEToI,QAAAA,OAAO,EAAE,IAFA;AAGT5J,QAAAA,KAAK,EAAEsI;AAHE,OAAD,CADD,gBAOT,oBAAC,IAAD;AACE,QAAA,MAAM,EAAE9G,KAAK,CAACkK,IADhB;AAEE,QAAA,KAAK,EAAEpD,eAFT;AAGE,QAAA,IAAI,EAAE;AAHR,QAVJ,CANF,eAuBE,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,KAAK,EAAE,CACLkB,MAAM,CAACiC,WADF,EAEL;AAAE5B,UAAAA,OAAO,EAAEmB;AAAX,SAFK;AADT,SAMGtI,UAAU,GACTA,UAAU,CAAC;AACTlB,QAAAA,KADS;AAEToI,QAAAA,OAAO,EAAE,KAFA;AAGT5J,QAAAA,KAAK,EAAEuI;AAHE,OAAD,CADD,gBAOT,oBAAC,IAAD;AACE,QAAA,MAAM,EAAE/G,KAAK,CAACkK,IADhB;AAEE,QAAA,KAAK,EAAEnD,iBAFT;AAGE,QAAA,IAAI,EAAE;AAHR,QAbJ,CAvBF,eA2CE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CACLiB,MAAM,CAACmC,cADF,EAEL;AACErC,UAAAA,KAAK,EACH,CAACrG,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SAAlC,GACG2I,MAAM,CAAC3I,KAAD,CAAN,CAAciB,MAAd,GAAuB,CAAC,CAD3B,GAEG,CAFJ,IAES;AAJb,SAFK;AADT,SAWG,OAAOjB,KAAP,KAAiB,SAAjB,gBACC,oBAAC,KAAD;AAAO,QAAA,OAAO,EAAEA,KAAhB;AAAuB,QAAA,IAAI,EAAE;AAA7B,QADD,gBAGC,oBAAC,KAAD;AAAO,QAAA,OAAO,EAAEA,KAAK,IAAI,IAAzB;AAA+B,QAAA,IAAI,EAAE;AAArC,SACGA,KADH,CAdJ,CA3CF,CADF,EAgEGU,OAAO,gBACN,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,KAAK,EAAE,CACL6F,MAAM,CAACqC,cADF,EAEL;AAAE5B,UAAAA,SAAS,EAAE,CAAC;AAAE5F,YAAAA;AAAF,WAAD;AAAb,SAFK;AADT,sBAME,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,KAAK,EAAE,CACLmF,MAAM,CAACsC,YADF,EAEL;AAAEjC,UAAAA,OAAO,EAAEkB;AAAX,SAFK;AADT,SAMGpI,WAAW,GACVA,WAAW,CAAC;AACVnB,QAAAA,KADU;AAEVoI,QAAAA,OAAO,EAAE,IAFC;AAGV5J,QAAAA,KAAK,EAAEsI;AAHG,OAAD,CADD,gBAOV,oBAAC,IAAD;AACE,QAAA,qBAAqB,EAAElE,0BADzB;AAEE,QAAA,KAAK,EAAE,CAACoF,MAAM,CAACuC,KAAR,EAAe;AAAE/L,UAAAA,KAAK,EAAEsI;AAAT,SAAf;AAFT,SAIGxF,YAAY,CAAC;AAAEtB,QAAAA;AAAF,OAAD,CAJf,CAbJ,CANF,EA2BGwC,QAAQ,GAAG,IAAH,gBACP,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,KAAK,EAAE,CACLwF,MAAM,CAACsC,YADF,EAEL;AAAEjC,UAAAA,OAAO,EAAEmB;AAAX,SAFK;AADT,SAMGrI,WAAW,GACVA,WAAW,CAAC;AACVnB,QAAAA,KADU;AAEVoI,QAAAA,OAAO,EAAE,KAFC;AAGV5J,QAAAA,KAAK,EAAEuI;AAHG,OAAD,CADD,gBAOV,oBAAC,IAAD;AACE,QAAA,qBAAqB,EACnBnE,0BAFJ;AAIE,QAAA,UAAU,EAAE,KAJd;AAKE,QAAA,KAAK,EAAE,CACLoF,MAAM,CAACuC,KADF,EAEL;AAAE/L,UAAAA,KAAK,EAAEuI;AAAT,SAFK;AALT,SAUGzF,YAAY,CAAC;AAAEtB,QAAAA;AAAF,OAAD,CAVf,CAbJ,CA5BJ,CADM,gBA2DN,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEgI,MAAM,CAACqC;AAApB,QA3HJ;AAlBmB,KAAD,CAAtB;AAkJD,GApLA,CA7CH,CADF,CAhCF,CAlDF,CADF;AA2TD,CA1kBD;AA4kBA;AACA;AACA;AACA;AACA;;;AACAtJ,gBAAgB,CAACyJ,QAAjB,GAA6BC,MAAD,IAKtB;AACJ,SAAO;AAAA,QAAC;AACNzK,MAAAA,KADM;AAEN2F,MAAAA;AAFM,KAAD;AAAA,wBAOL,oBAAC,cAAD;AACE,MAAA,GAAG,EAAE3F,KAAK,CAACiD,GADb;AAEE,MAAA,SAAS,EAAEwH,MAAM,CAACzK,KAAK,CAACiD,GAAN,GAAYjD,KAAK,CAACiD,GAAlB,GAAwB,EAAzB,CAFnB;AAGE,MAAA,KAAK,EAAEjD,KAHT;AAIE,MAAA,MAAM,EAAE2F;AAJV,MAPK;AAAA,GAAP;AAcD,CApBD;;AAsBA,eAAezG,SAAS,CAAC6B,gBAAD,CAAxB;AAEA,MAAMiH,MAAM,GAAG3J,UAAU,CAACqM,MAAX,CAAkB;AAC/BzC,EAAAA,SAAS,EAAE;AACT0C,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/B1C,EAAAA,OAAO,EAAE;AACPyC,IAAAA,IAAI,EAAE;AADC,GALsB;AAQ/BnC,EAAAA,GAAG,EAAE;AACHX,IAAAA,IAAI,EAAE,CADH;AAEHC,IAAAA,KAAK,EAAE,CAFJ;AAGHC,IAAAA,MAAM,EAAE,CAHL;AAIH5B,IAAAA,SAAS,EAAE;AAJR,GAR0B;AAc/B2C,EAAAA,UAAU,EAAE;AACV+B,IAAAA,UAAU,EAAE,QADF;AAEVD,IAAAA,QAAQ,EAAE;AAFA,GAdmB;AAkB/B7B,EAAAA,KAAK,EAAE;AACL+B,IAAAA,aAAa,EAAE,KADV;AAEL,QAAIxM,QAAQ,CAACwB,EAAT,KAAgB,KAAhB,GACA;AACE2H,MAAAA,KAAK,EAAE;AADT,KADA,GAIA,IAJJ;AAFK,GAlBwB;AA0B/BsC,EAAAA,IAAI,EAAE;AACJY,IAAAA,IAAI,EAAE,CADF;AAEJ;AACA;AACAI,IAAAA,eAAe,EAAE;AAJb,GA1ByB;AAgC/B3B,EAAAA,MAAM,EAAE;AACNR,IAAAA,QAAQ,EAAE;AADJ,GAhCuB;AAmC/BoB,EAAAA,aAAa,EAAE;AACbrB,IAAAA,MAAM,EAAE,EADK;AAEblB,IAAAA,KAAK,EAAE,EAFM;AAGbuD,IAAAA,SAAS,EAAE,CAHE;AAIb/B,IAAAA,gBAAgB,EAAE,EAJL;AAKbgC,IAAAA,SAAS,EAAE;AALE,GAnCgB;AA0C/BhB,EAAAA,WAAW,EAAE,EACX,GAAG5L,UAAU,CAAC6M,kBADH;AAEXL,IAAAA,UAAU,EAAE;AAFD,GA1CkB;AA8C/BR,EAAAA,cAAc,EAAE;AACd1B,IAAAA,MAAM,EAAE,EADM;AAEdwC,IAAAA,aAAa,EAAE;AAFD,GA9Ce;AAkD/Bb,EAAAA,YAAY,EAAE,EACZ,GAAGjM,UAAU,CAAC6M;AADF,GAlDiB;AAqD/B;AACAX,EAAAA,KAAK,EAAE;AACLa,IAAAA,QAAQ,EAAE,EADL;AAELzC,IAAAA,MAAM,EAAEhJ,UAFH;AAGL0L,IAAAA,SAAS,EAAE,QAHN;AAILpF,IAAAA,eAAe,EAAE,aAJZ;AAKL,QAAI3H,QAAQ,CAACwB,EAAT,KAAgB,KAAhB,GACA;AACEwL,MAAAA,UAAU,EAAE,QADd;AAEEL,MAAAA,SAAS,EAAE;AAFb,KADA,GAKA,IALJ;AALK,GAtDwB;AAkE/Bd,EAAAA,cAAc,EAAE;AACdvB,IAAAA,QAAQ,EAAE,UADI;AAEdf,IAAAA,IAAI,EAAE,CAFQ;AAGdS,IAAAA,GAAG,EAAE,CAAC;AAHQ;AAlEe,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  ViewStyle,\n} from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../../styles/overlay';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport Badge from '../Badge';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport TouchableRippleSupported from '../TouchableRipple/TouchableRippleSupported';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useLayout from '../../utils/useLayout';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRippleSupported.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = ({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = true,\n  barStyle,\n  labeled = true,\n  style,\n  theme,\n  sceneAnimationEnabled = false,\n  onTabPress,\n  onIndexChange,\n  shifting = navigationState.routes.length > 3,\n  safeAreaInsets,\n  labelMaxFontSizeMultiplier = 1,\n}: Props) => {\n  const { scale } = theme.animation;\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start(({ finished }) => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      indexAnim,\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      rippleAnim,\n      scale,\n      tabsAnims,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide,\n  });\n\n  const prevNavigationState = React.useRef<NavigationState>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(\n    (key: string) => {\n      const index = navigationState.routes.findIndex(\n        (route) => route.key === key\n      );\n\n      onIndexChange(index);\n    },\n    [navigationState.routes, onIndexChange]\n  );\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n    StyleSheet.flatten(barStyle) || {};\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  const backgroundColor = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n  const activeTintColor =\n    typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor =\n    typeof inactiveColor !== 'undefined'\n      ? inactiveColor\n      : color(textColor).alpha(0.5).rgb().string();\n\n  const touchColor = color(activeColor || activeTintColor)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? 0,\n    right: safeAreaInsets?.right ?? 0,\n    bottom: safeAreaInsets?.bottom ?? BOTTOM_INSET,\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.content, { backgroundColor: colors.background }]}>\n        {routes.map((route, index) => {\n          if (!loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsAnims[index]\n            : focused\n            ? 1\n            : 0;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, FAR_FAR_AWAY],\n              })\n            : focused\n            ? 0\n            : FAR_FAR_AWAY;\n\n          return (\n            <BottomNavigationRouteScreen\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              index={index}\n              visibility={opacity}\n              style={[StyleSheet.absoluteFill, { opacity }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View style={[styles.content, { top }]}>\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </BottomNavigationRouteScreen>\n          );\n        })}\n      </View>\n      <Surface\n        style={\n          [\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: visibleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: keyboardVisible ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={\n          layout.measured\n            ? keyboardHidesNavigationBar && keyboardVisible\n              ? 'none'\n              : 'auto'\n            : 'none'\n        }\n        onLayout={onLayout}\n      >\n        <Animated.View style={[styles.barContent, { backgroundColor }]}>\n          <View\n            style={[\n              styles.items,\n              {\n                marginBottom: insets.bottom,\n                marginHorizontal: Math.max(insets.left, insets.right),\n                maxWidth: maxTabBarWidth,\n              },\n            ]}\n            accessibilityRole={'tablist'}\n          >\n            {shifting ? (\n              <Animated.View\n                pointerEvents=\"none\"\n                style={[\n                  styles.ripple,\n                  {\n                    // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                    // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                    top: (BAR_HEIGHT - rippleSize) / 2,\n                    left:\n                      tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n                    height: rippleSize,\n                    width: rippleSize,\n                    borderRadius: rippleSize / 2,\n                    backgroundColor: getColor({\n                      route: routes[navigationState.index],\n                    }),\n                    transform: [\n                      {\n                        // Scale to twice the size  to ensure it covers the whole navigation bar\n                        scale: rippleAnim.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0, 8],\n                        }),\n                      },\n                    ],\n                    opacity: rippleAnim.interpolate({\n                      inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                      outputRange: [0, 0, 1, 1],\n                    }),\n                  },\n                ]}\n              />\n            ) : null}\n            {routes.map((route, index) => {\n              const focused = navigationState.index === index;\n              const active = tabsAnims[index];\n\n              // Scale the label up\n              const scale =\n                labeled && shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0.5, 1],\n                    })\n                  : 1;\n\n              // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n              const translateY = labeled\n                ? shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [7, 0],\n                    })\n                  : 0\n                : 7;\n\n              // We render the active icon and label on top of inactive ones and cross-fade them on change.\n              // This trick gives the illusion that we are animating between active and inactive colors.\n              // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n              const activeOpacity = active;\n              const inactiveOpacity = active.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              });\n\n              const badge = getBadge({ route });\n\n              return renderTouchable({\n                key: route.key,\n                route,\n                borderless: true,\n                centered: true,\n                rippleColor: touchColor,\n                onPress: () => handleTabPress(index),\n                testID: getTestID({ route }),\n                accessibilityLabel: getAccessibilityLabel({ route }),\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits: focused\n                  ? ['button', 'selected']\n                  : 'button',\n                accessibilityComponentType: 'button',\n                accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n                accessibilityState: { selected: focused },\n                style: styles.item,\n                children: (\n                  <View pointerEvents=\"none\">\n                    <Animated.View\n                      style={[\n                        styles.iconContainer,\n                        { transform: [{ translateY }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[styles.iconWrapper, { opacity: activeOpacity }]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: true,\n                            color: activeTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={activeTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <Animated.View\n                        style={[\n                          styles.iconWrapper,\n                          { opacity: inactiveOpacity },\n                        ]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: false,\n                            color: inactiveTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={inactiveTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <View\n                        style={[\n                          styles.badgeContainer,\n                          {\n                            right:\n                              (badge != null && typeof badge !== 'boolean'\n                                ? String(badge).length * -2\n                                : 0) - 2,\n                          },\n                        ]}\n                      >\n                        {typeof badge === 'boolean' ? (\n                          <Badge visible={badge} size={8} />\n                        ) : (\n                          <Badge visible={badge != null} size={16}>\n                            {badge}\n                          </Badge>\n                        )}\n                      </View>\n                    </Animated.View>\n                    {labeled ? (\n                      <Animated.View\n                        style={[\n                          styles.labelContainer,\n                          { transform: [{ scale }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Text\n                              maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n                              style={[styles.label, { color: activeTintColor }]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                        {shifting ? null : (\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: inactiveOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: false,\n                                color: inactiveTintColor,\n                              })\n                            ) : (\n                              <Text\n                                maxFontSizeMultiplier={\n                                  labelMaxFontSizeMultiplier\n                                }\n                                selectable={false}\n                                style={[\n                                  styles.label,\n                                  { color: inactiveTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                        )}\n                      </Animated.View>\n                    ) : (\n                      <View style={styles.labelContainer} />\n                    )}\n                  </View>\n                ),\n              });\n            })}\n          </View>\n        </Animated.View>\n      </Surface>\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = (scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    height: BAR_HEIGHT,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/module/components/Button.js b/node_modules/react-native-paper/lib/module/components/Button.js
index 7f27d48..ec49535 100644
--- a/node_modules/react-native-paper/lib/module/components/Button.js
+++ b/node_modules/react-native-paper/lib/module/components/Button.js
@@ -1,7 +1,7 @@
 function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
 
 import * as React from 'react';
-import { Animated, View, StyleSheet } from 'react-native';
+import { Animated, Platform, View, StyleSheet } from 'react-native';
 import color from 'color';
 import ActivityIndicator from './ActivityIndicator';
 import Icon from './Icon';
@@ -43,7 +43,7 @@ import { withTheme } from '../core/theming';
  * export default MyComponent;
  * ```
  */
-const Button = _ref => {
+const Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {
   var _StyleSheet$flatten;
 
   let {
@@ -66,6 +66,14 @@ const Button = _ref => {
     labelStyle,
     testID,
     accessible,
+    tvParallaxProperties,
+    hasTVPreferredFocus,
+    onFocus,
+    onBlur,
+    nextFocusUp,
+    nextFocusDown,
+    nextFocusLeft,
+    nextFocusRight,
     ...rest
   } = _ref;
   const {
@@ -75,6 +83,43 @@ const Button = _ref => {
     elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);
   }, [mode, elevation, disabled]);
 
+  const handleFocus = () => {
+    onFocus && onFocus();
+    handlePressIn();
+  };
+
+  const handleBlur = () => {
+    onBlur && onBlur();
+    handlePressOut();
+  };
+
+  const handlePress = () => {
+    onPress && onPress(); // Show animation on press for Android (TouchableRipple)
+
+    if (Platform.isTV && Platform.OS === 'android') {
+      const {
+        scale
+      } = theme.animation;
+      Animated.timing(elevation, {
+        toValue: 8,
+        duration: 150 * scale,
+        useNativeDriver: true
+      }).start(_ref2 => {
+        let {
+          finished
+        } = _ref2;
+
+        if (finished) {
+          Animated.timing(elevation, {
+            toValue: mode !== 'contained' ? 0 : 2,
+            duration: 150 * scale,
+            useNativeDriver: true
+          }).start();
+        }
+      });
+    }
+  };
+
   const handlePressIn = () => {
     if (mode === 'contained') {
       const {
@@ -170,12 +215,25 @@ const Button = _ref => {
       elevation
     }, buttonStyle, style]
   }), /*#__PURE__*/React.createElement(TouchableRipple, {
+    ref: ref,
+    nextFocusUp: nextFocusUp,
+    nextFocusDown: nextFocusDown,
+    nextFocusLeft: nextFocusLeft,
+    nextFocusRight: nextFocusRight,
     borderless: true,
     delayPressIn: 0,
-    onPress: onPress,
+    onPress: handlePress,
     onLongPress: onLongPress,
     onPressIn: handlePressIn,
     onPressOut: handlePressOut,
+    onFocus: handleFocus,
+    onBlur: handleBlur,
+    tvParallaxProperties:
+    /* Show animation on press for Apple TV */
+    tvParallaxProperties || {
+      pressMagnification: 1.05
+    },
+    hasTVPreferredFocus: hasTVPreferredFocus,
     accessibilityLabel: accessibilityLabel,
     accessibilityHint: accessibilityHint // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
     ,
@@ -207,8 +265,7 @@ const Button = _ref => {
     numberOfLines: 1,
     style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]
   }, children))));
-};
-
+});
 const styles = StyleSheet.create({
   button: {
     minWidth: 64,
diff --git a/node_modules/react-native-paper/lib/module/components/Button.js.map b/node_modules/react-native-paper/lib/module/components/Button.js.map
index a80b9ee..0fcdd9d 100644
--- a/node_modules/react-native-paper/lib/module/components/Button.js.map
+++ b/node_modules/react-native-paper/lib/module/components/Button.js.map
@@ -1 +1 @@
-{"version":3,"sources":["Button.tsx"],"names":["React","Animated","View","StyleSheet","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","disabled","compact","mode","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","current","elevation","useRef","Value","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","iconStyle","flexDirection","styles","iconReverse","button","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]}
\ No newline at end of file
+{"version":3,"sources":["Button.tsx"],"names":["React","Animated","Platform","View","StyleSheet","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","forwardRef","ref","disabled","compact","mode","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","tvParallaxProperties","hasTVPreferredFocus","onFocus","onBlur","nextFocusUp","nextFocusDown","nextFocusLeft","nextFocusRight","rest","current","elevation","useRef","Value","useEffect","setValue","handleFocus","handlePressIn","handleBlur","handlePressOut","handlePress","isTV","OS","scale","animation","timing","toValue","duration","useNativeDriver","start","finished","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","iconStyle","flexDirection","styles","iconReverse","button","pressMagnification","content","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  tvParallaxProperties?: any;\n  hasTVPreferredFocus?: boolean;\n  onFocus?: any;\n  onBlur?: any;\n  nextFocusUp?: any;\n  nextFocusDown?: any;\n  nextFocusLeft?: any;\n  nextFocusRight?: any;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = React.forwardRef(\n  (\n    {\n      disabled,\n      compact,\n      mode = 'text',\n      dark,\n      loading,\n      icon,\n      color: buttonColor,\n      children,\n      uppercase = true,\n      accessibilityLabel,\n      accessibilityHint,\n      onPress,\n      onLongPress,\n      style,\n      theme,\n      contentStyle,\n      labelStyle,\n      testID,\n      accessible,\n      tvParallaxProperties,\n      hasTVPreferredFocus,\n      onFocus,\n      onBlur,\n      nextFocusUp,\n      nextFocusDown,\n      nextFocusLeft,\n      nextFocusRight,\n      ...rest\n    }: Props,\n    ref: any\n  ) => {\n    const { current: elevation } = React.useRef<Animated.Value>(\n      new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n    );\n    React.useEffect(() => {\n      elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n    }, [mode, elevation, disabled]);\n\n    const handleFocus = () => {\n      onFocus && onFocus();\n      handlePressIn();\n    };\n\n    const handleBlur = () => {\n      onBlur && onBlur();\n      handlePressOut();\n    };\n\n    const handlePress = () => {\n      onPress && onPress();\n      // Show animation on press for Android (TouchableRipple)\n      if (Platform.isTV && Platform.OS === 'android') {\n        const { scale } = theme.animation;\n        Animated.timing(elevation, {\n          toValue: 8,\n          duration: 150 * scale,\n          useNativeDriver: true,\n        }).start(({finished}) => {\n          if (finished) {\n            Animated.timing(elevation, {\n              toValue: mode !== 'contained' ? 0 : 2,\n              duration: 150 * scale,\n              useNativeDriver: true,\n            }).start();\n          }\n        });\n      }\n    };\n        \n    const handlePressIn = () => {\n      if (mode === 'contained') {\n        const { scale } = theme.animation;\n        Animated.timing(elevation, {\n          toValue: 8,\n          duration: 200 * scale,\n          useNativeDriver: true,\n        }).start();\n      }\n    };\n\n    const handlePressOut = () => {\n      if (mode === 'contained') {\n        const { scale } = theme.animation;\n        Animated.timing(elevation, {\n          toValue: 2,\n          duration: 150 * scale,\n          useNativeDriver: true,\n        }).start();\n      }\n    };\n\n    const { colors, roundness } = theme;\n    const font = theme.fonts.medium;\n\n    let backgroundColor: string,\n      borderColor: string,\n      textColor: string,\n      borderWidth: number;\n\n    if (mode === 'contained') {\n      if (disabled) {\n        backgroundColor = color(theme.dark ? white : black)\n          .alpha(0.12)\n          .rgb()\n          .string();\n      } else if (buttonColor) {\n        backgroundColor = buttonColor;\n      } else {\n        backgroundColor = colors.primary;\n      }\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    if (mode === 'outlined') {\n      borderColor = color(theme.dark ? white : black)\n        .alpha(0.29)\n        .rgb()\n        .string();\n      borderWidth = StyleSheet.hairlineWidth;\n    } else {\n      borderColor = 'transparent';\n      borderWidth = 0;\n    }\n\n    if (disabled) {\n      textColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else if (mode === 'contained') {\n      let isDark;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark =\n          backgroundColor === 'transparent'\n            ? false\n            : !color(backgroundColor).isLight();\n      }\n\n      textColor = isDark ? white : black;\n    } else if (buttonColor) {\n      textColor = buttonColor;\n    } else {\n      textColor = colors.primary;\n    }\n\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n    const buttonStyle = {\n      backgroundColor,\n      borderColor,\n      borderWidth,\n      borderRadius: roundness,\n    };\n    const touchableStyle = {\n      borderRadius: style\n        ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n          roundness\n        : roundness,\n    };\n\n    const { color: customLabelColor, fontSize: customLabelSize } =\n      StyleSheet.flatten(labelStyle) || {};\n\n    const textStyle = { color: textColor, ...font };\n    const iconStyle =\n      StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n        ? styles.iconReverse\n        : styles.icon;\n\n    return (\n      <Surface\n        {...rest}\n        style={[\n          styles.button,\n          compact && styles.compact,\n          { elevation },\n          buttonStyle,\n          style,\n        ]}\n      >\n        <TouchableRipple\n          ref={ref}\n          nextFocusUp={nextFocusUp}\n          nextFocusDown={nextFocusDown}\n          nextFocusLeft={nextFocusLeft}\n          nextFocusRight={nextFocusRight}\n          borderless\n          delayPressIn={0}\n          onPress={handlePress}\n          onLongPress={onLongPress}\n          onPressIn={handlePressIn}\n          onPressOut={handlePressOut}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          tvParallaxProperties={\n            /* Show animation on press for Apple TV */\n            tvParallaxProperties || {pressMagnification: 1.05}\n          }\n          hasTVPreferredFocus={hasTVPreferredFocus}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityHint={accessibilityHint}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ disabled }}\n          accessible={accessible}\n          disabled={disabled}\n          rippleColor={rippleColor}\n          style={touchableStyle}\n          testID={testID}\n        >\n          <View style={[styles.content, contentStyle]}>\n            {icon && loading !== true ? (\n              <View style={iconStyle}>\n                <Icon\n                  source={icon}\n                  size={customLabelSize ?? 16}\n                  color={\n                    typeof customLabelColor === 'string'\n                      ? customLabelColor\n                      : textColor\n                  }\n                />\n              </View>\n            ) : null}\n            {loading ? (\n              <ActivityIndicator\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n                style={iconStyle}\n              />\n            ) : null}\n            <Text\n              selectable={false}\n              numberOfLines={1}\n              style={[\n                styles.label,\n                compact && styles.compactLabel,\n                uppercase && styles.uppercaseLabel,\n                textStyle,\n                font,\n                labelStyle,\n              ]}\n            >\n              {children}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/module/components/IconButton.js b/node_modules/react-native-paper/lib/module/components/IconButton.js
index 1941bed..c207bc2 100644
--- a/node_modules/react-native-paper/lib/module/components/IconButton.js
+++ b/node_modules/react-native-paper/lib/module/components/IconButton.js
@@ -4,6 +4,7 @@ import * as React from 'react';
 import { View, StyleSheet } from 'react-native';
 import color from 'color';
 import TouchableRipple from './TouchableRipple/TouchableRipple';
+import TouchableRippleSupported from './TouchableRipple/TouchableRippleSupported';
 import Icon from './Icon';
 import CrossFadeIcon from './CrossFadeIcon';
 import { withTheme } from '../core/theming';
@@ -78,7 +79,7 @@ const IconButton = _ref => {
       disabled
     },
     disabled: disabled,
-    hitSlop: TouchableRipple.supported ? {
+    hitSlop: TouchableRippleSupported.supported ? {
       top: 10,
       left: 10,
       bottom: 10,
diff --git a/node_modules/react-native-paper/lib/module/components/IconButton.js.map b/node_modules/react-native-paper/lib/module/components/IconButton.js.map
index 6e7d41c..be5de63 100644
--- a/node_modules/react-native-paper/lib/module/components/IconButton.js.map
+++ b/node_modules/react-native-paper/lib/module/components/IconButton.js.map
@@ -1 +1 @@
-{"version":3,"sources":["IconButton.tsx"],"names":["React","View","StyleSheet","color","TouchableRipple","Icon","CrossFadeIcon","withTheme","IconButton","icon","customColor","size","accessibilityLabel","disabled","onPress","animated","theme","style","rest","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","buttonSize","styles","container","width","height","borderRadius","supported","top","left","bottom","right","create","alignItems","justifyContent","overflow","margin","opacity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]}
\ No newline at end of file
+{"version":3,"sources":["IconButton.tsx"],"names":["React","View","StyleSheet","color","TouchableRipple","TouchableRippleSupported","Icon","CrossFadeIcon","withTheme","IconButton","icon","customColor","size","accessibilityLabel","disabled","onPress","animated","theme","style","rest","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","buttonSize","styles","container","width","height","borderRadius","supported","top","left","bottom","right","create","alignItems","justifyContent","overflow","margin","opacity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport TouchableRippleSupported from './TouchableRipple/TouchableRippleSupported';\nimport Icon, { IconSource } from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\n\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * Color of the icon.\n   */\n  color?: string;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<TouchableWithoutFeedback>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n * By default button has 150% size of the icon.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const buttonSize = size * 1.5;\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[\n        styles.container,\n        { width: buttonSize, height: buttonSize, borderRadius: buttonSize / 2 },\n        disabled && styles.disabled,\n        style,\n      ]}\n      accessibilityLabel={accessibilityLabel}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n      hitSlop={\n        TouchableRippleSupported.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'hidden',\n    margin: 6,\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js
index 6c5f8bb..8658cd5 100644
--- a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js
+++ b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js
@@ -36,7 +36,7 @@ import { withTheme } from '../../core/theming';
  *
  * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props
  */
-const TouchableRipple = _ref => {
+const TouchableRipple = /*#__PURE__*/React.forwardRef((_ref, ref) => {
   let {
     style,
     background: _background,
@@ -172,19 +172,14 @@ const TouchableRipple = _ref => {
 
   const disabled = disabledProp || !rest.onPress;
   return /*#__PURE__*/React.createElement(TouchableWithoutFeedback, _extends({}, rest, {
+    ref: ref,
     onPressIn: handlePressIn,
     onPressOut: handlePressOut,
     disabled: disabled
   }), /*#__PURE__*/React.createElement(View, {
     style: [styles.touchable, borderless && styles.borderless, style]
   }, React.Children.only(children)));
-};
-/**
- * Whether ripple effect is supported.
- */
-
-
-TouchableRipple.supported = true;
+});
 const styles = StyleSheet.create({
   touchable: {
     position: 'relative',
diff --git a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js.map b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js.map
index 95adc5f..46e1f0c 100644
--- a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js.map
+++ b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.js.map
@@ -1 +1 @@
-{"version":3,"sources":["TouchableRipple.tsx"],"names":["React","TouchableWithoutFeedback","View","StyleSheet","Platform","color","withTheme","TouchableRipple","style","background","_background","borderless","disabled","disabledProp","rippleColor","underlayColor","_underlayColor","children","theme","rest","handlePressIn","e","centered","onPressIn","dark","colors","calculatedRippleColor","text","alpha","rgb","string","button","currentTarget","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","changedTouches","touches","nativeEvent","touch","width","height","locationX","pageX","locationY","pageY","size","Math","min","max","container","document","createElement","setAttribute","Object","assign","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","handlePressOut","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","onPress","styles","touchable","Children","only","supported","create","OS","cursor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  Platform,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/touchablenativefeedback#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props\n */\nconst TouchableRipple = ({\n  style,\n  background: _background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor: _underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const handlePressIn = (e: any) => {\n    const { centered, onPressIn } = rest;\n\n    onPressIn?.(e);\n\n    const { dark, colors } = theme;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    const { changedTouches, touches } = e.nativeEvent;\n    const touch = touches?.[0] ?? changedTouches?.[0];\n\n    // If centered or it was pressed using keyboard - enter or space\n    if (centered || !touch) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      touchX = touch.locationX ?? e.pageX;\n      touchY = touch.locationY ?? e.pageY;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  const handlePressOut = (e: any) => {\n    rest.onPressOut?.(e);\n\n    const containers = e.currentTarget.querySelectorAll(\n      '[data-paper-ripple]'\n    ) as HTMLElement[];\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach((container) => {\n          const ripple = container.firstChild as HTMLSpanElement;\n\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  const disabled = disabledProp || !rest.onPress;\n\n  return (\n    <TouchableWithoutFeedback\n      {...rest}\n      onPressIn={handlePressIn}\n      onPressOut={handlePressOut}\n      disabled={disabled}\n    >\n      <View style={[styles.touchable, borderless && styles.borderless, style]}>\n        {React.Children.only(children)}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\n/**\n * Whether ripple effect is supported.\n */\nTouchableRipple.supported = true;\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && { cursor: 'pointer' }),\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
+{"version":3,"sources":["TouchableRipple.tsx"],"names":["React","TouchableWithoutFeedback","View","StyleSheet","Platform","color","withTheme","TouchableRipple","forwardRef","ref","style","background","_background","borderless","disabled","disabledProp","rippleColor","underlayColor","_underlayColor","children","theme","rest","handlePressIn","e","centered","onPressIn","dark","colors","calculatedRippleColor","text","alpha","rgb","string","button","currentTarget","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","changedTouches","touches","nativeEvent","touch","width","height","locationX","pageX","locationY","pageY","size","Math","min","max","container","document","createElement","setAttribute","Object","assign","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","handlePressOut","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","onPress","styles","touchable","Children","only","create","OS","cursor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n  Platform,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://reactnative.dev/docs/touchablenativefeedback#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  tvParallaxProperties?: any;\n  hasTVPreferredFocus?: boolean;\n  onFocus?: any;\n  onBlur?: any;\n  nextFocusUp?: any;\n  nextFocusDown?: any;\n  nextFocusLeft?: any;\n  nextFocusRight?: any;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props\n */\nconst TouchableRipple = React.forwardRef(\n  (\n    {\n      style,\n      background: _background,\n      borderless = false,\n      disabled: disabledProp,\n      rippleColor,\n      underlayColor: _underlayColor,\n      children,\n      theme,\n      ...rest\n    }: Props,\n    ref: any\n  ) => {\n    const handlePressIn = (e: any) => {\n      const { centered, onPressIn } = rest;\n\n      onPressIn?.(e);\n\n      const { dark, colors } = theme;\n      const calculatedRippleColor =\n        rippleColor ||\n        color(colors.text)\n          .alpha(dark ? 0.32 : 0.2)\n          .rgb()\n          .string();\n\n      const button = e.currentTarget;\n      const style = window.getComputedStyle(button);\n      const dimensions = button.getBoundingClientRect();\n\n      let touchX;\n      let touchY;\n\n      const { changedTouches, touches } = e.nativeEvent;\n      const touch = touches?.[0] ?? changedTouches?.[0];\n\n      // If centered or it was pressed using keyboard - enter or space\n      if (centered || !touch) {\n        touchX = dimensions.width / 2;\n        touchY = dimensions.height / 2;\n      } else {\n        touchX = touch.locationX ?? e.pageX;\n        touchY = touch.locationY ?? e.pageY;\n      }\n\n      // Get the size of the button to determine how big the ripple should be\n      const size = centered\n        ? // If ripple is always centered, we don't need to make it too big\n          Math.min(dimensions.width, dimensions.height) * 1.25\n        : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n          Math.max(dimensions.width, dimensions.height) * 2;\n\n      // Create a container for our ripple effect so we don't need to change the parent's style\n      const container = document.createElement('span');\n\n      container.setAttribute('data-paper-ripple', '');\n\n      Object.assign(container.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        borderTopLeftRadius: style.borderTopLeftRadius,\n        borderTopRightRadius: style.borderTopRightRadius,\n        borderBottomRightRadius: style.borderBottomRightRadius,\n        borderBottomLeftRadius: style.borderBottomLeftRadius,\n        overflow: centered ? 'visible' : 'hidden',\n      });\n\n      // Create span to show the ripple effect\n      const ripple = document.createElement('span');\n\n      Object.assign(ripple.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        backgroundColor: calculatedRippleColor,\n        borderRadius: '50%',\n\n        /* Transition configuration */\n        transitionProperty: 'transform opacity',\n        transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n        transitionTimingFunction: 'linear',\n        transformOrigin: 'center',\n\n        /* We'll animate these properties */\n        transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n        opacity: '0.5',\n\n        // Position the ripple where cursor was\n        left: `${touchX}px`,\n        top: `${touchY}px`,\n        width: `${size}px`,\n        height: `${size}px`,\n      });\n\n      // Finally, append it to DOM\n      container.appendChild(ripple);\n      button.appendChild(container);\n\n      // rAF runs in the same frame as the event handler\n      // Use double rAF to ensure the transition class is added in next frame\n      // This will make sure that the transition animation is triggered\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          Object.assign(ripple.style, {\n            transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n            opacity: '1',\n          });\n        });\n      });\n    };\n\n    const handlePressOut = (e: any) => {\n      rest.onPressOut?.(e);\n\n      const containers = e.currentTarget.querySelectorAll(\n        '[data-paper-ripple]'\n      ) as HTMLElement[];\n\n      requestAnimationFrame(() => {\n        requestAnimationFrame(() => {\n          containers.forEach((container) => {\n            const ripple = container.firstChild as HTMLSpanElement;\n\n            Object.assign(ripple.style, {\n              transitionDuration: '250ms',\n              opacity: 0,\n            });\n\n            // Finally remove the span after the transition\n            setTimeout(() => {\n              const { parentNode } = container;\n\n              if (parentNode) {\n                parentNode.removeChild(container);\n              }\n            }, 500);\n          });\n        });\n      });\n    };\n\n    const disabled = disabledProp || !rest.onPress;\n\n    return (\n      <TouchableWithoutFeedback\n        {...rest}\n        ref={ref}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        disabled={disabled}\n      >\n        <View\n          style={[styles.touchable, borderless && styles.borderless, style]}\n        >\n          {React.Children.only(children)}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n    ...(Platform.OS === 'web' && { cursor: 'pointer' }),\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js
index 8fb6143..32213fc 100644
--- a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js
+++ b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js
@@ -4,10 +4,10 @@ import * as React from 'react';
 import { Platform, TouchableHighlight, TouchableNativeFeedback, View, StyleSheet } from 'react-native';
 import color from 'color';
 import { withTheme } from '../../core/theming';
-const ANDROID_VERSION_LOLLIPOP = 21;
+import TouchableRippleSupported from './TouchableRippleSupported';
+import 'react-native/tvos-types.d';
 const ANDROID_VERSION_PIE = 28;
-
-const TouchableRipple = _ref => {
+const TouchableRipple = /*#__PURE__*/React.forwardRef((_ref, ref) => {
   let {
     style,
     background,
@@ -29,8 +29,9 @@ const TouchableRipple = _ref => {
 
   const useForeground = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_PIE && borderless;
 
-  if (TouchableRipple.supported) {
+  if (TouchableRippleSupported.supported) {
     return /*#__PURE__*/React.createElement(TouchableNativeFeedback, _extends({}, rest, {
+      ref: ref,
       disabled: disabled,
       useForeground: useForeground,
       background: background != null ? background : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)
@@ -40,13 +41,12 @@ const TouchableRipple = _ref => {
   }
 
   return /*#__PURE__*/React.createElement(TouchableHighlight, _extends({}, rest, {
+    ref: ref,
     disabled: disabled,
     style: [borderless && styles.overflowHidden, style],
     underlayColor: underlayColor != null ? underlayColor : color(calculatedRippleColor).fade(0.5).rgb().string()
   }), React.Children.only(children));
-};
-
-TouchableRipple.supported = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;
+});
 const styles = StyleSheet.create({
   overflowHidden: {
     overflow: 'hidden'
diff --git a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js.map b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js.map
index 2ea3c7f..dd34755 100644
--- a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js.map
+++ b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRipple.native.js.map
@@ -1 +1 @@
-{"version":3,"sources":["TouchableRipple.native.tsx"],"names":["React","Platform","TouchableHighlight","TouchableNativeFeedback","View","StyleSheet","color","withTheme","ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","OS","Version","supported","Ripple","styles","overflowHidden","Children","only","fade","create","overflow"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAGEC,QAHF,EAIEC,kBAJF,EAKEC,uBALF,EAOEC,IAPF,EASEC,UATF,QAUO,cAVP;AAWA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,MAAMC,wBAAwB,GAAG,EAAjC;AACA,MAAMC,mBAAmB,GAAG,EAA5B;;AAcA,MAAMC,eAAe,GAAG,QAUX;AAAA,MAVY;AACvBC,IAAAA,KADuB;AAEvBC,IAAAA,UAFuB;AAGvBC,IAAAA,UAAU,GAAG,KAHU;AAIvBC,IAAAA,QAAQ,EAAEC,YAJa;AAKvBC,IAAAA,WALuB;AAMvBC,IAAAA,aANuB;AAOvBC,IAAAA,QAPuB;AAQvBC,IAAAA,KARuB;AASvB,OAAGC;AAToB,GAUZ;AACX,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBH,KAAzB;AACA,QAAML,QAAQ,GAAGC,YAAY,IAAI,CAACK,IAAI,CAACG,OAAvC;AACA,QAAMC,qBAAqB,GACzBR,WAAW,IACXV,KAAK,CAACgB,MAAM,CAACG,IAAR,CAAL,CACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF,CAHW,CAUX;AACA;;AACA,QAAMC,aAAa,GACjB5B,QAAQ,CAAC6B,EAAT,KAAgB,SAAhB,IACA7B,QAAQ,CAAC8B,OAAT,IAAoBtB,mBADpB,IAEAI,UAHF;;AAKA,MAAIH,eAAe,CAACsB,SAApB,EAA+B;AAC7B,wBACE,oBAAC,uBAAD,eACMZ,IADN;AAEE,MAAA,QAAQ,EAAEN,QAFZ;AAGE,MAAA,aAAa,EAAEe,aAHjB;AAIE,MAAA,UAAU,EACRjB,UAAU,IAAI,IAAd,GACIA,UADJ,GAEIT,uBAAuB,CAAC8B,MAAxB,CAA+BT,qBAA/B,EAAsDX,UAAtD;AAPR,qBAUE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAACA,UAAU,IAAIqB,MAAM,CAACC,cAAtB,EAAsCxB,KAAtC;AAAb,OACGX,KAAK,CAACoC,QAAN,CAAeC,IAAf,CAAoBnB,QAApB,CADH,CAVF,CADF;AAgBD;;AAED,sBACE,oBAAC,kBAAD,eACME,IADN;AAEE,IAAA,QAAQ,EAAEN,QAFZ;AAGE,IAAA,KAAK,EAAE,CAACD,UAAU,IAAIqB,MAAM,CAACC,cAAtB,EAAsCxB,KAAtC,CAHT;AAIE,IAAA,aAAa,EACXM,aAAa,IAAI,IAAjB,GACIA,aADJ,GAEIX,KAAK,CAACkB,qBAAD,CAAL,CAA6Bc,IAA7B,CAAkC,GAAlC,EAAuCX,GAAvC,GAA6CC,MAA7C;AAPR,MAUG5B,KAAK,CAACoC,QAAN,CAAeC,IAAf,CAAoBnB,QAApB,CAVH,CADF;AAcD,CA5DD;;AA8DAR,eAAe,CAACsB,SAAhB,GACE/B,QAAQ,CAAC6B,EAAT,KAAgB,SAAhB,IAA6B7B,QAAQ,CAAC8B,OAAT,IAAoBvB,wBADnD;AAGA,MAAM0B,MAAM,GAAG7B,UAAU,CAACkC,MAAX,CAAkB;AAC/BJ,EAAAA,cAAc,EAAE;AACdK,IAAAA,QAAQ,EAAE;AADI;AADe,CAAlB,CAAf;AAMA,eAAejC,SAAS,CAACG,eAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst TouchableRipple = ({\n  style,\n  background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const { dark, colors } = theme;\n  const disabled = disabledProp || !rest.onPress;\n  const calculatedRippleColor =\n    rippleColor ||\n    color(colors.text)\n      .alpha(dark ? 0.32 : 0.2)\n      .rgb()\n      .string();\n\n  // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n  // https://github.com/facebook/react-native/issues/6480\n  const useForeground =\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_PIE &&\n    borderless;\n\n  if (TouchableRipple.supported) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        disabled={disabled}\n        useForeground={useForeground}\n        background={\n          background != null\n            ? background\n            : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)\n        }\n      >\n        <View style={[borderless && styles.overflowHidden, style]}>\n          {React.Children.only(children)}\n        </View>\n      </TouchableNativeFeedback>\n    );\n  }\n\n  return (\n    <TouchableHighlight\n      {...rest}\n      disabled={disabled}\n      style={[borderless && styles.overflowHidden, style]}\n      underlayColor={\n        underlayColor != null\n          ? underlayColor\n          : color(calculatedRippleColor).fade(0.5).rgb().string()\n      }\n    >\n      {React.Children.only(children)}\n    </TouchableHighlight>\n  );\n};\n\nTouchableRipple.supported =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\nconst styles = StyleSheet.create({\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
+{"version":3,"sources":["TouchableRipple.native.tsx"],"names":["React","Platform","TouchableHighlight","TouchableNativeFeedback","View","StyleSheet","color","withTheme","TouchableRippleSupported","ANDROID_VERSION_PIE","TouchableRipple","forwardRef","ref","style","background","borderless","disabled","disabledProp","rippleColor","underlayColor","children","theme","rest","dark","colors","onPress","calculatedRippleColor","text","alpha","rgb","string","useForeground","OS","Version","supported","Ripple","styles","overflowHidden","Children","only","fade","create","overflow"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAGEC,QAHF,EAIEC,kBAJF,EAKEC,uBALF,EAOEC,IAPF,EASEC,UATF,QAUO,cAVP;AAWA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAO,2BAAP;AAEA,MAAMC,mBAAmB,GAAG,EAA5B;AAsBA,MAAMC,eAAe,gBAAGV,KAAK,CAACW,UAAN,CACtB,OAYEC,GAZF,KAaK;AAAA,MAZH;AACEC,IAAAA,KADF;AAEEC,IAAAA,UAFF;AAGEC,IAAAA,UAAU,GAAG,KAHf;AAIEC,IAAAA,QAAQ,EAAEC,YAJZ;AAKEC,IAAAA,WALF;AAMEC,IAAAA,aANF;AAOEC,IAAAA,QAPF;AAQEC,IAAAA,KARF;AASE,OAAGC;AATL,GAYG;AACH,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBH,KAAzB;AACA,QAAML,QAAQ,GAAGC,YAAY,IAAI,CAACK,IAAI,CAACG,OAAvC;AACA,QAAMC,qBAAqB,GACzBR,WAAW,IACXZ,KAAK,CAACkB,MAAM,CAACG,IAAR,CAAL,CACGC,KADH,CACSL,IAAI,GAAG,IAAH,GAAU,GADvB,EAEGM,GAFH,GAGGC,MAHH,EAFF,CAHG,CAUH;AACA;;AACA,QAAMC,aAAa,GACjB9B,QAAQ,CAAC+B,EAAT,KAAgB,SAAhB,IACA/B,QAAQ,CAACgC,OAAT,IAAoBxB,mBADpB,IAEAM,UAHF;;AAKA,MAAIP,wBAAwB,CAAC0B,SAA7B,EAAwC;AACtC,wBACE,oBAAC,uBAAD,eACMZ,IADN;AAEE,MAAA,GAAG,EAAEV,GAFP;AAGE,MAAA,QAAQ,EAAEI,QAHZ;AAIE,MAAA,aAAa,EAAEe,aAJjB;AAKE,MAAA,UAAU,EACRjB,UAAU,IAAI,IAAd,GACIA,UADJ,GAEIX,uBAAuB,CAACgC,MAAxB,CACET,qBADF,EAEEX,UAFF;AARR,qBAcE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAACA,UAAU,IAAIqB,MAAM,CAACC,cAAtB,EAAsCxB,KAAtC;AAAb,OACGb,KAAK,CAACsC,QAAN,CAAeC,IAAf,CAAoBnB,QAApB,CADH,CAdF,CADF;AAoBD;;AAED,sBACE,oBAAC,kBAAD,eACME,IADN;AAEE,IAAA,GAAG,EAAEV,GAFP;AAGE,IAAA,QAAQ,EAAEI,QAHZ;AAIE,IAAA,KAAK,EAAE,CAACD,UAAU,IAAIqB,MAAM,CAACC,cAAtB,EAAsCxB,KAAtC,CAJT;AAKE,IAAA,aAAa,EACXM,aAAa,IAAI,IAAjB,GACIA,aADJ,GAEIb,KAAK,CAACoB,qBAAD,CAAL,CAA6Bc,IAA7B,CAAkC,GAAlC,EAAuCX,GAAvC,GAA6CC,MAA7C;AARR,MAWG9B,KAAK,CAACsC,QAAN,CAAeC,IAAf,CAAoBnB,QAApB,CAXH,CADF;AAeD,CArEqB,CAAxB;AAwEA,MAAMgB,MAAM,GAAG/B,UAAU,CAACoC,MAAX,CAAkB;AAC/BJ,EAAAA,cAAc,EAAE;AACdK,IAAAA,QAAQ,EAAE;AADI;AADe,CAAlB,CAAf;AAMA,eAAenC,SAAS,CAACG,eAAD,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nimport TouchableRippleSupported from './TouchableRippleSupported';\nimport 'react-native/tvos-types.d';\n\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: ReactNativePaper.Theme;\n  tvParallaxProperties?: any;\n  hasTVPreferredFocus?: boolean;\n  onFocus?: any;\n  onBlur?: any;\n  nextFocusUp?: any;\n  nextFocusDown?: any;\n  nextFocusLeft?: any;\n  nextFocusRight?: any;\n};\n\nconst TouchableRipple = React.forwardRef(\n  (\n    {\n      style,\n      background,\n      borderless = false,\n      disabled: disabledProp,\n      rippleColor,\n      underlayColor,\n      children,\n      theme,\n      ...rest\n    }: Props,\n    ref: any\n  ) => {\n    const { dark, colors } = theme;\n    const disabled = disabledProp || !rest.onPress;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n    // https://github.com/facebook/react-native/issues/6480\n    const useForeground =\n      Platform.OS === 'android' &&\n      Platform.Version >= ANDROID_VERSION_PIE &&\n      borderless;\n\n    if (TouchableRippleSupported.supported) {\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          ref={ref}\n          disabled={disabled}\n          useForeground={useForeground}\n          background={\n            background != null\n              ? background\n              : TouchableNativeFeedback.Ripple(\n                  calculatedRippleColor,\n                  borderless\n                )\n          }\n        >\n          <View style={[borderless && styles.overflowHidden, style]}>\n            {React.Children.only(children)}\n          </View>\n        </TouchableNativeFeedback>\n      );\n    }\n\n    return (\n      <TouchableHighlight\n        {...rest}\n        ref={ref}\n        disabled={disabled}\n        style={[borderless && styles.overflowHidden, style]}\n        underlayColor={\n          underlayColor != null\n            ? underlayColor\n            : color(calculatedRippleColor).fade(0.5).rgb().string()\n        }\n      >\n        {React.Children.only(children)}\n      </TouchableHighlight>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRippleSupported.js b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRippleSupported.js
new file mode 100644
index 0000000..c15b58d
--- /dev/null
+++ b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRippleSupported.js
@@ -0,0 +1,6 @@
+import { Platform } from 'react-native';
+const ANDROID_VERSION_LOLLIPOP = 21;
+export default {
+  supported: Platform.OS === 'web' || Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP
+};
+//# sourceMappingURL=TouchableRippleSupported.js.map
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRippleSupported.js.map b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRippleSupported.js.map
new file mode 100644
index 0000000..f9998be
--- /dev/null
+++ b/node_modules/react-native-paper/lib/module/components/TouchableRipple/TouchableRippleSupported.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["TouchableRippleSupported.tsx"],"names":["Platform","ANDROID_VERSION_LOLLIPOP","supported","OS","Version"],"mappings":"AAAA,SAASA,QAAT,QAAyB,cAAzB;AAEA,MAAMC,wBAAwB,GAAG,EAAjC;AAEA,eAAe;AACbC,EAAAA,SAAS,EACPF,QAAQ,CAACG,EAAT,KAAgB,KAAhB,IACCH,QAAQ,CAACG,EAAT,KAAgB,SAAhB,IAA6BH,QAAQ,CAACI,OAAT,IAAoBH;AAHvC,CAAf","sourcesContent":["import { Platform } from 'react-native';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default {\n  supported:\n    Platform.OS === 'web' ||\n    (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP),\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/react-native-paper/lib/typescript/components/Appbar/AppbarContent.d.ts b/node_modules/react-native-paper/lib/typescript/components/Appbar/AppbarContent.d.ts
index 0aac009..f89a864 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Appbar/AppbarContent.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Appbar/AppbarContent.d.ts
@@ -70,7 +70,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<typeof View> &
      * @optional
      */
     theme: ReactNativePaper.Theme;
-}, "style" | "title" | "pointerEvents" | "color" | "onLayout" | "onPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "titleStyle" | "subtitle" | "subtitleStyle" | "titleRef"> & {
+}, "style" | "title" | "pointerEvents" | "color" | "onLayout" | "onPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "hitSlop" | "removeClippedSubviews" | "nextFocusDown" | "nextFocusForward" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "titleStyle" | "subtitle" | "subtitleStyle" | "titleRef"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<typeof View> & {
     /**
@@ -145,7 +145,7 @@ declare const AppbarContentWithTheme: React.ComponentType<Pick<$RemoveChildren<t
      * @optional
      */
     theme: ReactNativePaper.Theme;
-}, "style" | "title" | "pointerEvents" | "color" | "onLayout" | "onPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "titleStyle" | "subtitle" | "subtitleStyle" | "titleRef"> & {
+}, "style" | "title" | "pointerEvents" | "color" | "onLayout" | "onPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "hitSlop" | "removeClippedSubviews" | "nextFocusDown" | "nextFocusForward" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "titleStyle" | "subtitle" | "subtitleStyle" | "titleRef"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<typeof View> & {
     /**
diff --git a/node_modules/react-native-paper/lib/typescript/components/Appbar/index.d.ts b/node_modules/react-native-paper/lib/typescript/components/Appbar/index.d.ts
index e7ac254..4981d46 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Appbar/index.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Appbar/index.d.ts
@@ -27,7 +27,7 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
         onPress?: (() => void) | undefined;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, "style" | "title" | "pointerEvents" | "color" | "onLayout" | "onPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "titleStyle" | "subtitle" | "subtitleStyle" | "titleRef"> & {
+    }, "style" | "title" | "pointerEvents" | "color" | "onLayout" | "onPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "hitSlop" | "removeClippedSubviews" | "nextFocusDown" | "nextFocusForward" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "titleStyle" | "subtitle" | "subtitleStyle" | "titleRef"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
     }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<typeof import("react-native").View> & {
         color?: string | undefined;
@@ -54,7 +54,7 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
         displayName: string;
     }, {}>;
     Action: {
-        ({ size, color: iconColor, icon, disabled, onPress, accessibilityLabel, ...rest }: (Pick<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ size, color: iconColor, icon, disabled, onPress, accessibilityLabel, ...rest }: (Pick<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -66,9 +66,17 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -80,22 +88,35 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-                borderless?: boolean | undefined;
-                background?: Object | undefined;
-                centered?: boolean | undefined;
-                disabled?: boolean | undefined;
-                onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                rippleColor?: string | undefined;
-                underlayColor?: string | undefined;
-                children: import("react").ReactNode;
-                style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-                theme: ReactNativePaper.Theme;
-            }): JSX.Element;
-            supported: boolean;
-        }, {}>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            borderless?: boolean | undefined;
+            background?: Object | undefined;
+            centered?: boolean | undefined;
+            disabled?: boolean | undefined;
+            onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+            onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+            rippleColor?: string | undefined;
+            underlayColor?: string | undefined;
+            children: import("react").ReactNode;
+            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+            theme: ReactNativePaper.Theme;
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
             icon: import("../Icon").IconSource;
             color?: string | undefined;
             size?: number | undefined;
@@ -106,9 +127,9 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             ref?: import("react").RefObject<import("react-native").TouchableWithoutFeedback> | undefined;
             theme: ReactNativePaper.Theme;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> | Pick<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> | Pick<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -120,9 +141,37 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            borderless?: boolean | undefined;
+            background?: Object | undefined;
+            centered?: boolean | undefined;
+            disabled?: boolean | undefined;
+            onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+            onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+            rippleColor?: string | undefined;
+            underlayColor?: string | undefined;
+            children: import("react").ReactNode;
+            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+            theme: ReactNativePaper.Theme;
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -134,22 +183,15 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-                borderless?: boolean | undefined;
-                background?: Object | undefined;
-                centered?: boolean | undefined;
-                disabled?: boolean | undefined;
-                onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                rippleColor?: string | undefined;
-                underlayColor?: string | undefined;
-                children: import("react").ReactNode;
-                style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-                theme: ReactNativePaper.Theme;
-            }): JSX.Element;
-            supported: boolean;
-        }, {}>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
             icon: import("../Icon").IconSource;
             color?: string | undefined;
             size?: number | undefined;
@@ -160,11 +202,11 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             ref?: import("react").RefObject<import("react-native").TouchableWithoutFeedback> | undefined;
             theme: ReactNativePaper.Theme;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         } & {
             children?: import("react").ReactNode;
-        }, "style" | "children" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated">) & {
+        }, "style" | "children" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated">) & {
             color?: string | undefined;
             icon: import("../Icon").IconSource;
             size?: number | undefined;
@@ -177,7 +219,7 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
         displayName: string;
     };
     BackAction: {
-        ({ accessibilityLabel, ...rest }: import("../../types").$Omit<Pick<Pick<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ accessibilityLabel, ...rest }: import("../../types").$Omit<Pick<Pick<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -189,9 +231,17 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -203,22 +253,35 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-                borderless?: boolean | undefined;
-                background?: Object | undefined;
-                centered?: boolean | undefined;
-                disabled?: boolean | undefined;
-                onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                rippleColor?: string | undefined;
-                underlayColor?: string | undefined;
-                children: import("react").ReactNode;
-                style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-                theme: ReactNativePaper.Theme;
-            }): JSX.Element;
-            supported: boolean;
-        }, {}>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            borderless?: boolean | undefined;
+            background?: Object | undefined;
+            centered?: boolean | undefined;
+            disabled?: boolean | undefined;
+            onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+            onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+            rippleColor?: string | undefined;
+            underlayColor?: string | undefined;
+            children: import("react").ReactNode;
+            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+            theme: ReactNativePaper.Theme;
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
             icon: import("../Icon").IconSource;
             color?: string | undefined;
             size?: number | undefined;
@@ -229,9 +292,9 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             ref?: import("react").RefObject<import("react-native").TouchableWithoutFeedback> | undefined;
             theme: ReactNativePaper.Theme;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
             color?: string | undefined;
             icon: import("../Icon").IconSource;
             size?: number | undefined;
@@ -240,7 +303,7 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             onPress?: (() => void) | undefined;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             ref?: import("react").RefObject<import("react-native").TouchableWithoutFeedback> | undefined;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> | Pick<Pick<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> | Pick<Pick<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -252,9 +315,37 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            borderless?: boolean | undefined;
+            background?: Object | undefined;
+            centered?: boolean | undefined;
+            disabled?: boolean | undefined;
+            onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+            onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+            rippleColor?: string | undefined;
+            underlayColor?: string | undefined;
+            children: import("react").ReactNode;
+            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+            theme: ReactNativePaper.Theme;
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -266,22 +357,15 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-                borderless?: boolean | undefined;
-                background?: Object | undefined;
-                centered?: boolean | undefined;
-                disabled?: boolean | undefined;
-                onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                rippleColor?: string | undefined;
-                underlayColor?: string | undefined;
-                children: import("react").ReactNode;
-                style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-                theme: ReactNativePaper.Theme;
-            }): JSX.Element;
-            supported: boolean;
-        }, {}>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
             icon: import("../Icon").IconSource;
             color?: string | undefined;
             size?: number | undefined;
@@ -292,11 +376,11 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             ref?: import("react").RefObject<import("react-native").TouchableWithoutFeedback> | undefined;
             theme: ReactNativePaper.Theme;
-        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+        }, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
         } & {
             children?: import("react").ReactNode;
-        }, "style" | "children" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
+        }, "style" | "children" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
             color?: string | undefined;
             icon: import("../Icon").IconSource;
             size?: number | undefined;
@@ -305,7 +389,7 @@ declare const Appbar: (import("react").ComponentType<Pick<Partial<import("react-
             onPress?: (() => void) | undefined;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             ref?: import("react").RefObject<import("react-native").TouchableWithoutFeedback> | undefined;
-        }, "style" | "children" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated">, "icon"> & {
+        }, "style" | "children" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated">, "icon"> & {
             color?: string | undefined;
             size?: number | undefined;
             disabled?: boolean | undefined;
diff --git a/node_modules/react-native-paper/lib/typescript/components/Banner.d.ts b/node_modules/react-native-paper/lib/typescript/components/Banner.d.ts
index 0eb401d..69ff2d4 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Banner.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Banner.d.ts
@@ -89,32 +89,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      */
     actions: ({
         label: string;
-    } & Omit<((Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    } & Omit<(Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -141,34 +116,17 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }) | React.PropsWithChildren<(Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | keyof React.RefAttributes<unknown> | "compact" | "loading" | "contentStyle"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    }) | (Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -195,9 +153,19 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | keyof React.RefAttributes<unknown> | "compact" | "loading" | "contentStyle"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }>, "children">)[];
+    } & {
+        children?: React.ReactNode;
+    }), "children">)[];
     /**
      * Style of banner's inner content.
      * Use this prop to apply custom width for wide layouts.
@@ -219,7 +187,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * Optional callback that will be called after the closing animation finished running normally
      */
     onHideAnimationFinished?: Animated.EndCallback | undefined;
-}, "style" | "children" | "pointerEvents" | "onLayout" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "visible" | "ref" | "key" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "contentStyle" | "actions" | "onShowAnimationFinished" | "onHideAnimationFinished"> & {
+}, "style" | "children" | "pointerEvents" | "onLayout" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "visible" | "ref" | "key" | "hitSlop" | "removeClippedSubviews" | "nextFocusDown" | "nextFocusForward" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "contentStyle" | "actions" | "onShowAnimationFinished" | "onHideAnimationFinished"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
     children: React.ReactNode;
@@ -259,32 +227,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      */
     actions: ({
         label: string;
-    } & Omit<((Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    } & Omit<(Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -311,34 +254,17 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }) | React.PropsWithChildren<(Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | keyof React.RefAttributes<unknown> | "compact" | "loading" | "contentStyle"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    }) | (Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -365,9 +291,19 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | keyof React.RefAttributes<unknown> | "compact" | "loading" | "contentStyle"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }>, "children">)[];
+    } & {
+        children?: React.ReactNode;
+    }), "children">)[];
     /**
      * Style of banner's inner content.
      * Use this prop to apply custom width for wide layouts.
diff --git a/node_modules/react-native-paper/lib/typescript/components/Button.d.ts b/node_modules/react-native-paper/lib/typescript/components/Button.d.ts
index d22c40b..eb0c9f6 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Button.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Button.d.ts
@@ -1,39 +1,138 @@
 import * as React from 'react';
 import { Animated, View, ViewStyle, StyleProp, TextStyle } from 'react-native';
 import { IconSource } from './Icon';
-import Surface from './Surface';
-declare type Props = React.ComponentProps<typeof Surface> & {
+declare const _default: React.ComponentType<Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    children: React.ReactNode;
+    style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
+    theme: ReactNativePaper.Theme;
+}, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
+    theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
+} & {
+    children?: React.ReactNode;
+} & {
+    /**
+     * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.
+     * - `text` - flat button without background or outline (low emphasis)
+     * - `outlined` - button with an outline (medium emphasis)
+     * - `contained` - button with a background color and elevation shadow (high emphasis)
+     */
+    mode?: "text" | "outlined" | "contained" | undefined;
+    /**
+     * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.
+     */
+    dark?: boolean | undefined;
+    /**
+     * Use a compact look, useful for `text` buttons in a row.
+     */
+    compact?: boolean | undefined;
+    /**
+     * Custom text color for flat button, or background color for contained button.
+     */
+    color?: string | undefined;
+    /**
+     * Whether to show a loading indicator.
+     */
+    loading?: boolean | undefined;
+    /**
+     * Icon to display for the `Button`.
+     */
+    icon?: IconSource | undefined;
+    /**
+     * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.
+     */
+    disabled?: boolean | undefined;
+    /**
+     * Label text of the button.
+     */
+    children: React.ReactNode;
+    /**
+     * Make the label text uppercased. Note that this won't work if you pass React elements as children.
+     */
+    uppercase?: boolean | undefined;
+    /**
+     * Accessibility label for the button. This is read by the screen reader when the user taps the button.
+     */
+    accessibilityLabel?: string | undefined;
+    /**
+     * Accessibility hint for the button. This is read by the screen reader when the user taps the button.
+     */
+    accessibilityHint?: string | undefined;
+    /**
+     * Function to execute on press.
+     */
+    onPress?: (() => void) | undefined;
+    /**
+     * Function to execute on long press.
+     */
+    onLongPress?: (() => void) | undefined;
+    /**
+     * Style of button's inner content.
+     * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.
+     */
+    contentStyle?: StyleProp<ViewStyle>;
+    style?: StyleProp<ViewStyle>;
+    /**
+     * Style for the button text.
+     */
+    labelStyle?: StyleProp<TextStyle>;
+    /**
+     * @optional
+     */
+    theme: ReactNativePaper.Theme;
+    /**
+     * testID to be used on tests.
+     */
+    testID?: string | undefined;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | keyof React.RefAttributes<unknown> | "compact" | "loading" | "contentStyle"> & {
+    theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    children: React.ReactNode;
+    style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
+    theme: ReactNativePaper.Theme;
+}, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
+    theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
+} & {
+    children?: React.ReactNode;
+} & {
     /**
      * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.
      * - `text` - flat button without background or outline (low emphasis)
      * - `outlined` - button with an outline (medium emphasis)
      * - `contained` - button with a background color and elevation shadow (high emphasis)
      */
-    mode?: 'text' | 'outlined' | 'contained';
+    mode?: "text" | "outlined" | "contained" | undefined;
     /**
      * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.
      */
-    dark?: boolean;
+    dark?: boolean | undefined;
     /**
      * Use a compact look, useful for `text` buttons in a row.
      */
-    compact?: boolean;
+    compact?: boolean | undefined;
     /**
      * Custom text color for flat button, or background color for contained button.
      */
-    color?: string;
+    color?: string | undefined;
     /**
      * Whether to show a loading indicator.
      */
-    loading?: boolean;
+    loading?: boolean | undefined;
     /**
      * Icon to display for the `Button`.
      */
-    icon?: IconSource;
+    icon?: IconSource | undefined;
     /**
      * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.
      */
-    disabled?: boolean;
+    disabled?: boolean | undefined;
     /**
      * Label text of the button.
      */
@@ -41,23 +140,23 @@ declare type Props = React.ComponentProps<typeof Surface> & {
     /**
      * Make the label text uppercased. Note that this won't work if you pass React elements as children.
      */
-    uppercase?: boolean;
+    uppercase?: boolean | undefined;
     /**
      * Accessibility label for the button. This is read by the screen reader when the user taps the button.
      */
-    accessibilityLabel?: string;
+    accessibilityLabel?: string | undefined;
     /**
      * Accessibility hint for the button. This is read by the screen reader when the user taps the button.
      */
-    accessibilityHint?: string;
+    accessibilityHint?: string | undefined;
     /**
      * Function to execute on press.
      */
-    onPress?: () => void;
+    onPress?: (() => void) | undefined;
     /**
      * Function to execute on long press.
      */
-    onLongPress?: () => void;
+    onLongPress?: (() => void) | undefined;
     /**
      * Style of button's inner content.
      * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.
@@ -75,9 +174,16 @@ declare type Props = React.ComponentProps<typeof Surface> & {
     /**
      * testID to be used on tests.
      */
-    testID?: string;
-};
-declare const _default: React.ComponentType<(Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    testID?: string | undefined;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<(Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
     children: React.ReactNode;
     style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
     theme: ReactNativePaper.Theme;
@@ -157,7 +263,15 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
     children: React.ReactNode;
     style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
     theme: ReactNativePaper.Theme;
@@ -239,7 +353,13 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
-    theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Props> & (({ disabled, compact, mode, dark, loading, icon, color: buttonColor, children, uppercase, accessibilityLabel, accessibilityHint, onPress, onLongPress, style, theme, contentStyle, labelStyle, testID, accessible, ...rest }: Props) => JSX.Element), {}>;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "compact" | "loading" | "contentStyle">) & React.RefAttributes<unknown>>, {}>;
 export default _default;
diff --git a/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxAndroid.d.ts b/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxAndroid.d.ts
index 084817e..9fca375 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxAndroid.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxAndroid.d.ts
@@ -31,7 +31,7 @@ declare type Props = $RemoveChildren<typeof TouchableRipple> & {
      */
     testID?: string;
 };
-declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -46,11 +46,19 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined; /**
      * Custom color for unchecked checkbox.
      */
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -65,25 +73,38 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        /**
-         * @optional
-         */
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    /**
+     * @optional
+     */
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Status of checkbox.
      */
@@ -112,11 +133,11 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined; /**
      * Custom color for unchecked checkbox.
      */
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -131,11 +152,19 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined; /**
      * Custom color for unchecked checkbox.
      */
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -150,25 +179,38 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        /**
-         * @optional
-         */
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    /**
+     * @optional
+     */
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Status of checkbox.
      */
@@ -202,7 +244,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     displayName: string;
 }, {}>;
 export default _default;
-declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -217,11 +259,19 @@ declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined; /**
      * Custom color for unchecked checkbox.
      */
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -236,25 +286,38 @@ declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        /**
-         * @optional
-         */
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    /**
+     * @optional
+     */
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Status of checkbox.
      */
@@ -283,11 +346,11 @@ declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined; /**
      * Custom color for unchecked checkbox.
      */
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -302,11 +365,19 @@ declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined; /**
      * Custom color for unchecked checkbox.
      */
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -321,25 +392,38 @@ declare const CheckboxAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        /**
-         * @optional
-         */
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    /**
+     * @optional
+     */
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Status of checkbox.
      */
diff --git a/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxIOS.d.ts b/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxIOS.d.ts
index de1eed6..008cb69 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxIOS.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Checkbox/CheckboxIOS.d.ts
@@ -27,7 +27,7 @@ declare type Props = $RemoveChildren<typeof TouchableRipple> & {
      */
     testID?: string;
 };
-declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined; /**
@@ -41,9 +41,17 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined; /**
@@ -57,24 +65,37 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined; /**
-         * @optional
-         */
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined; /**
+     * @optional
+     */
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Status of checkbox.
      */
@@ -99,9 +120,9 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined; /**
@@ -115,9 +136,17 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined; /**
@@ -131,24 +160,37 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined; /**
-         * @optional
-         */
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined; /**
+     * @optional
+     */
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Status of checkbox.
      */
@@ -178,7 +220,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     displayName: string;
 }, {}>;
 export default _default;
-declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined; /**
@@ -192,9 +234,17 @@ declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<Rea
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined; /**
@@ -208,24 +258,37 @@ declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<Rea
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined; /**
-         * @optional
-         */
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined; /**
+     * @optional
+     */
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Status of checkbox.
      */
@@ -250,9 +313,9 @@ declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<Rea
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined; /**
@@ -266,9 +329,17 @@ declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<Rea
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined; /**
@@ -282,24 +353,37 @@ declare const CheckboxIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<Rea
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined; /**
-         * @optional
-         */
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined; /**
+     * @optional
+     */
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Status of checkbox.
      */
diff --git a/node_modules/react-native-paper/lib/typescript/components/Checkbox/index.d.ts b/node_modules/react-native-paper/lib/typescript/components/Checkbox/index.d.ts
index 71a7023..431903a 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Checkbox/index.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Checkbox/index.d.ts
@@ -71,7 +71,7 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         }): JSX.Element;
         displayName: string;
     }, {}>;
-    Android: import("react").ComponentType<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    Android: import("react").ComponentType<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -83,9 +83,17 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -97,22 +105,35 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-            borderless?: boolean | undefined;
-            background?: Object | undefined;
-            centered?: boolean | undefined;
-            disabled?: boolean | undefined;
-            onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-            onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-            rippleColor?: string | undefined;
-            underlayColor?: string | undefined;
-            children: import("react").ReactNode;
-            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-            theme: ReactNativePaper.Theme;
-        }): JSX.Element;
-        supported: boolean;
-    }, {}>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        borderless?: boolean | undefined;
+        background?: Object | undefined;
+        centered?: boolean | undefined;
+        disabled?: boolean | undefined;
+        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        rippleColor?: string | undefined;
+        underlayColor?: string | undefined;
+        children: import("react").ReactNode;
+        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+        theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
         status: "checked" | "unchecked" | "indeterminate";
         disabled?: boolean | undefined;
         onPress?: (() => void) | undefined;
@@ -120,9 +141,9 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         color?: string | undefined;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
+    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -134,9 +155,37 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        borderless?: boolean | undefined;
+        background?: Object | undefined;
+        centered?: boolean | undefined;
+        disabled?: boolean | undefined;
+        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        rippleColor?: string | undefined;
+        underlayColor?: string | undefined;
+        children: import("react").ReactNode;
+        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+        theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -148,8 +197,24 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
+        status: "checked" | "unchecked" | "indeterminate";
+        disabled?: boolean | undefined;
+        onPress?: (() => void) | undefined;
+        uncheckedColor?: string | undefined;
+        color?: string | undefined;
+        theme: ReactNativePaper.Theme;
+        testID?: string | undefined;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ status, theme, disabled, onPress, testID, ...rest }: import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -161,18 +226,17 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }): JSX.Element;
-        supported: boolean;
-    }, {}>> & {
-        status: "checked" | "unchecked" | "indeterminate";
-        disabled?: boolean | undefined;
-        onPress?: (() => void) | undefined;
-        uncheckedColor?: string | undefined;
-        color?: string | undefined;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }> & {
-        ({ status, theme, disabled, onPress, testID, ...rest }: import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
+            theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
+        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -184,9 +248,15 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
-            theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -198,22 +268,15 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-                borderless?: boolean | undefined;
-                background?: Object | undefined;
-                centered?: boolean | undefined;
-                disabled?: boolean | undefined;
-                onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                rippleColor?: string | undefined;
-                underlayColor?: string | undefined;
-                children: import("react").ReactNode;
-                style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-                theme: ReactNativePaper.Theme;
-            }): JSX.Element;
-            supported: boolean;
-        }, {}>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
             status: "checked" | "unchecked" | "indeterminate";
             disabled?: boolean | undefined;
             onPress?: (() => void) | undefined;
@@ -224,7 +287,7 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         }): JSX.Element;
         displayName: string;
     }, {}>;
-    IOS: import("react").ComponentType<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    IOS: import("react").ComponentType<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -236,9 +299,17 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -250,31 +321,44 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-            borderless?: boolean | undefined;
-            background?: Object | undefined;
-            centered?: boolean | undefined;
-            disabled?: boolean | undefined;
-            onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-            onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-            rippleColor?: string | undefined;
-            underlayColor?: string | undefined;
-            children: import("react").ReactNode;
-            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-            theme: ReactNativePaper.Theme;
-        }): JSX.Element;
-        supported: boolean;
-    }, {}>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        borderless?: boolean | undefined;
+        background?: Object | undefined;
+        centered?: boolean | undefined;
+        disabled?: boolean | undefined;
+        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        rippleColor?: string | undefined;
+        underlayColor?: string | undefined;
+        children: import("react").ReactNode;
+        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+        theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
         status: "checked" | "unchecked" | "indeterminate";
         disabled?: boolean | undefined;
         onPress?: (() => void) | undefined;
         color?: string | undefined;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
+    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -286,9 +370,37 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        borderless?: boolean | undefined;
+        background?: Object | undefined;
+        centered?: boolean | undefined;
+        disabled?: boolean | undefined;
+        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        rippleColor?: string | undefined;
+        underlayColor?: string | undefined;
+        children: import("react").ReactNode;
+        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+        theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -300,8 +412,23 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
+        status: "checked" | "unchecked" | "indeterminate";
+        disabled?: boolean | undefined;
+        onPress?: (() => void) | undefined;
+        color?: string | undefined;
+        theme: ReactNativePaper.Theme;
+        testID?: string | undefined;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ status, disabled, onPress, theme, testID, ...rest }: import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -313,17 +440,17 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }): JSX.Element;
-        supported: boolean;
-    }, {}>> & {
-        status: "checked" | "unchecked" | "indeterminate";
-        disabled?: boolean | undefined;
-        onPress?: (() => void) | undefined;
-        color?: string | undefined;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }> & {
-        ({ status, disabled, onPress, theme, testID, ...rest }: import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
+            theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
+        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -335,9 +462,15 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
-            theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -349,22 +482,15 @@ declare const Checkbox: (import("react").ComponentType<Pick<{
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-                borderless?: boolean | undefined;
-                background?: Object | undefined;
-                centered?: boolean | undefined;
-                disabled?: boolean | undefined;
-                onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                rippleColor?: string | undefined;
-                underlayColor?: string | undefined;
-                children: import("react").ReactNode;
-                style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-                theme: ReactNativePaper.Theme;
-            }): JSX.Element;
-            supported: boolean;
-        }, {}>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
             status: "checked" | "unchecked" | "indeterminate";
             disabled?: boolean | undefined;
             onPress?: (() => void) | undefined;
diff --git a/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTable.d.ts b/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTable.d.ts
index 963fe21..723c020 100644
--- a/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTable.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTable.d.ts
@@ -312,7 +312,7 @@ declare const DataTable: {
         }): JSX.Element;
         displayName: string;
     }, {}>;
-    Row: React.ComponentType<Pick<import("../../types").$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    Row: React.ComponentType<Pick<import("../../types").$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -324,9 +324,17 @@ declare const DataTable: {
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -338,22 +346,35 @@ declare const DataTable: {
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-            borderless?: boolean | undefined;
-            background?: Object | undefined;
-            centered?: boolean | undefined;
-            disabled?: boolean | undefined;
-            onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-            onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-            rippleColor?: string | undefined;
-            underlayColor?: string | undefined;
-            children: React.ReactNode;
-            style?: StyleProp<ViewStyle>;
-            theme: ReactNativePaper.Theme;
-        }): JSX.Element;
-        supported: boolean;
-    }, {}>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        borderless?: boolean | undefined;
+        background?: Object | undefined;
+        centered?: boolean | undefined;
+        disabled?: boolean | undefined;
+        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        rippleColor?: string | undefined;
+        underlayColor?: string | undefined;
+        children: React.ReactNode;
+        style?: StyleProp<ViewStyle>;
+        theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
         children: React.ReactNode;
         onPress?: (() => void) | undefined;
         style?: StyleProp<ViewStyle>;
@@ -361,9 +382,9 @@ declare const DataTable: {
         pointerEvents?: "box-none" | "none" | "box-only" | "auto" | undefined; /**
          * Content of the `DataTable`.
          */
-    }, "style" | "children" | "pointerEvents" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & {
+    }, "style" | "children" | "pointerEvents" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("../../types").$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("../../types").$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -375,9 +396,37 @@ declare const DataTable: {
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        borderless?: boolean | undefined;
+        background?: Object | undefined;
+        centered?: boolean | undefined;
+        disabled?: boolean | undefined;
+        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        rippleColor?: string | undefined;
+        underlayColor?: string | undefined;
+        children: React.ReactNode;
+        style?: StyleProp<ViewStyle>;
+        theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -389,8 +438,24 @@ declare const DataTable: {
         children: React.ReactNode;
         style?: StyleProp<ViewStyle>;
         theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
+        children: React.ReactNode;
+        onPress?: (() => void) | undefined;
+        style?: StyleProp<ViewStyle>;
+        theme: ReactNativePaper.Theme;
+        pointerEvents?: "box-none" | "none" | "box-only" | "auto" | undefined; /**
+         * Content of the `DataTable`.
+         */
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ onPress, style, theme, children, pointerEvents, ...rest }: import("../../types").$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -402,18 +467,17 @@ declare const DataTable: {
             children: React.ReactNode;
             style?: StyleProp<ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }): JSX.Element;
-        supported: boolean;
-    }, {}>> & {
-        children: React.ReactNode;
-        onPress?: (() => void) | undefined;
-        style?: StyleProp<ViewStyle>;
-        theme: ReactNativePaper.Theme;
-        pointerEvents?: "box-none" | "none" | "box-only" | "auto" | undefined; /**
-         * Content of the `DataTable`.
-         */
-    }> & {
-        ({ onPress, style, theme, children, pointerEvents, ...rest }: import("../../types").$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
+            theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
+        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -425,9 +489,15 @@ declare const DataTable: {
             children: React.ReactNode;
             style?: StyleProp<ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
-            theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -439,22 +509,15 @@ declare const DataTable: {
             children: React.ReactNode;
             style?: StyleProp<ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-                borderless?: boolean | undefined;
-                background?: Object | undefined;
-                centered?: boolean | undefined;
-                disabled?: boolean | undefined;
-                onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                rippleColor?: string | undefined;
-                underlayColor?: string | undefined;
-                children: React.ReactNode;
-                style?: StyleProp<ViewStyle>;
-                theme: ReactNativePaper.Theme;
-            }): JSX.Element;
-            supported: boolean;
-        }, {}>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
             children: React.ReactNode;
             onPress?: (() => void) | undefined;
             style?: StyleProp<ViewStyle>;
@@ -466,7 +529,7 @@ declare const DataTable: {
         displayName: string;
     }, {}>;
     Cell: {
-        ({ children, textStyle, style, numeric, ...rest }: import("../../types").$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ children, textStyle, style, numeric, ...rest }: import("../../types").$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -478,9 +541,37 @@ declare const DataTable: {
             children: React.ReactNode;
             style?: StyleProp<ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
             theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            borderless?: boolean | undefined;
+            background?: Object | undefined;
+            centered?: boolean | undefined;
+            disabled?: boolean | undefined;
+            onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+            onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+            rippleColor?: string | undefined;
+            underlayColor?: string | undefined;
+            children: React.ReactNode;
+            style?: StyleProp<ViewStyle>;
+            theme: ReactNativePaper.Theme;
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -492,22 +583,15 @@ declare const DataTable: {
             children: React.ReactNode;
             style?: StyleProp<ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-                borderless?: boolean | undefined;
-                background?: Object | undefined;
-                centered?: boolean | undefined;
-                disabled?: boolean | undefined;
-                onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                rippleColor?: string | undefined;
-                underlayColor?: string | undefined;
-                children: React.ReactNode;
-                style?: StyleProp<ViewStyle>;
-                theme: ReactNativePaper.Theme;
-            }): JSX.Element;
-            supported: boolean;
-        }, {}>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
             children: React.ReactNode;
             numeric?: boolean | undefined;
             onPress?: (() => void) | undefined;
diff --git a/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTableRow.d.ts b/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTableRow.d.ts
index 64add12..14a3e62 100644
--- a/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTableRow.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/DataTable/DataTableRow.d.ts
@@ -52,7 +52,7 @@ declare const DataTableRow: {
     ({ onPress, style, theme, children, pointerEvents, ...rest }: Props): JSX.Element;
     displayName: string;
 };
-declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -64,9 +64,17 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -78,22 +86,35 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: StyleProp<ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: StyleProp<ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Content of the `DataTableRow`.
      */
@@ -111,9 +132,9 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * `pointerEvents` passed to the `View` container, which is wrapping children within `TouchableRipple`.
      */
     pointerEvents?: "box-none" | "none" | "box-only" | "auto" | undefined;
-}, "style" | "children" | "pointerEvents" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & {
+}, "style" | "children" | "pointerEvents" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -125,9 +146,17 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -139,22 +168,35 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: StyleProp<ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: StyleProp<ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Content of the `DataTableRow`.
      */
diff --git a/node_modules/react-native-paper/lib/typescript/components/Divider.d.ts b/node_modules/react-native-paper/lib/typescript/components/Divider.d.ts
index be18323..7f90452 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Divider.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Divider.d.ts
@@ -22,7 +22,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<typeof View> &
      * @optional
      */
     theme: ReactNativePaper.Theme;
-}, "style" | "pointerEvents" | "onLayout" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "inset"> & {
+}, "style" | "pointerEvents" | "onLayout" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "hitSlop" | "removeClippedSubviews" | "nextFocusDown" | "nextFocusForward" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "inset"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<typeof View> & {
     /**
diff --git a/node_modules/react-native-paper/lib/typescript/components/FAB/AnimatedFAB/AnimatedFAB.d.ts b/node_modules/react-native-paper/lib/typescript/components/FAB/AnimatedFAB/AnimatedFAB.d.ts
index 2b669db..be0383d 100644
--- a/node_modules/react-native-paper/lib/typescript/components/FAB/AnimatedFAB/AnimatedFAB.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/FAB/AnimatedFAB/AnimatedFAB.d.ts
@@ -141,7 +141,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      */
     theme: ReactNativePaper.Theme;
     testID?: string | undefined;
-}, "label" | "style" | "pointerEvents" | "color" | "onLayout" | "onPress" | "onLongPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "visible" | "key" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "uppercase" | "disabled" | "animateFrom" | "extended" | "iconMode"> & {
+}, "label" | "style" | "pointerEvents" | "color" | "onLayout" | "onPress" | "onLongPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "visible" | "key" | "hitSlop" | "removeClippedSubviews" | "nextFocusDown" | "nextFocusForward" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "uppercase" | "disabled" | "animateFrom" | "extended" | "iconMode"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
     children: React.ReactNode;
diff --git a/node_modules/react-native-paper/lib/typescript/components/FAB/FAB.d.ts b/node_modules/react-native-paper/lib/typescript/components/FAB/FAB.d.ts
index 0212ba3..ddc14e7 100644
--- a/node_modules/react-native-paper/lib/typescript/components/FAB/FAB.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/FAB/FAB.d.ts
@@ -138,7 +138,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      */
     theme: ReactNativePaper.Theme;
     testID?: string | undefined;
-}, "label" | "small" | "style" | "pointerEvents" | "color" | "onLayout" | "onPress" | "onLongPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "visible" | "key" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "uppercase" | "disabled" | "loading" | "animated"> & {
+}, "label" | "small" | "style" | "pointerEvents" | "color" | "onLayout" | "onPress" | "onLongPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "visible" | "key" | "hitSlop" | "removeClippedSubviews" | "nextFocusDown" | "nextFocusForward" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "uppercase" | "disabled" | "loading" | "animated"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
     children: React.ReactNode;
@@ -290,7 +290,7 @@ declare const FABWithTheme: React.ComponentType<Pick<$RemoveChildren<React.Compo
      */
     theme: ReactNativePaper.Theme;
     testID?: string | undefined;
-}, "label" | "small" | "style" | "pointerEvents" | "color" | "onLayout" | "onPress" | "onLongPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "visible" | "key" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "uppercase" | "disabled" | "loading" | "animated"> & {
+}, "label" | "small" | "style" | "pointerEvents" | "color" | "onLayout" | "onPress" | "onLongPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "visible" | "key" | "hitSlop" | "removeClippedSubviews" | "nextFocusDown" | "nextFocusForward" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "uppercase" | "disabled" | "loading" | "animated"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
     children: React.ReactNode;
diff --git a/node_modules/react-native-paper/lib/typescript/components/FAB/index.d.ts b/node_modules/react-native-paper/lib/typescript/components/FAB/index.d.ts
index b8bc0b0..69b9293 100644
--- a/node_modules/react-native-paper/lib/typescript/components/FAB/index.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/FAB/index.d.ts
@@ -30,7 +30,7 @@ declare const FAB: (import("react").ComponentType<Pick<import("../../types").$Re
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
     testID?: string | undefined;
-}, "label" | "small" | "style" | "pointerEvents" | "color" | "onLayout" | "onPress" | "onLongPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "visible" | "key" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "uppercase" | "disabled" | "loading" | "animated"> & {
+}, "label" | "small" | "style" | "pointerEvents" | "color" | "onLayout" | "onPress" | "onLongPress" | "testID" | "nativeID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "visible" | "key" | "hitSlop" | "removeClippedSubviews" | "nextFocusDown" | "nextFocusForward" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "uppercase" | "disabled" | "loading" | "animated"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").ViewProps & import("react").RefAttributes<import("react-native").View> & {
     children: import("react").ReactNode;
diff --git a/node_modules/react-native-paper/lib/typescript/components/IconButton.d.ts b/node_modules/react-native-paper/lib/typescript/components/IconButton.d.ts
index e45e8dc..2bf23b4 100644
--- a/node_modules/react-native-paper/lib/typescript/components/IconButton.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/IconButton.d.ts
@@ -39,7 +39,7 @@ declare type Props = $RemoveChildren<typeof TouchableRipple> & {
      */
     theme: ReactNativePaper.Theme;
 };
-declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
+declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -49,14 +49,52 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     rippleColor?: string | undefined;
     underlayColor?: string | undefined;
     children: React.ReactNode;
-    style?: StyleProp<ViewStyle>;
-    theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<TouchableWithoutFeedback>> & {
-    /**
-     * Size of the icon.
+    style?: StyleProp<ViewStyle>; /**
+     * An icon button is a button which displays only an icon without a label.
+     * By default button has 150% size of the icon.
+     *
+     * <div class="screenshots">
+     *   <figure>
+     *     <img src="screenshots/icon-button-1.png" />
+     *     <figcaption>Icon button</figcaption>
+     *   </figure>
+     *   <figure>
+     *     <img src="screenshots/icon-button-2.png" />
+     *     <figcaption>Pressed icon button</figcaption>
+     *   </figure>
+     * </div>
+     *
+     * ## Usage
+     * ```js
+     * import * as React from 'react';
+     * import { IconButton, Colors } from 'react-native-paper';
+     *
+     * const MyComponent = () => (
+     *   <IconButton
+     *     icon="camera"
+     *     color={Colors.red500}
+     *     size={20}
+     *     onPress={() => console.log('Pressed')}
+     *   />
+     * );
+     *
+     * export default MyComponent;
+     * ```
+     *
+     * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html
      */
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -66,24 +104,103 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     rippleColor?: string | undefined;
     underlayColor?: string | undefined;
     children: React.ReactNode;
-    style?: StyleProp<ViewStyle>;
+    style?: StyleProp<ViewStyle>; /**
+     * An icon button is a button which displays only an icon without a label.
+     * By default button has 150% size of the icon.
+     *
+     * <div class="screenshots">
+     *   <figure>
+     *     <img src="screenshots/icon-button-1.png" />
+     *     <figcaption>Icon button</figcaption>
+     *   </figure>
+     *   <figure>
+     *     <img src="screenshots/icon-button-2.png" />
+     *     <figcaption>Pressed icon button</figcaption>
+     *   </figure>
+     * </div>
+     *
+     * ## Usage
+     * ```js
+     * import * as React from 'react';
+     * import { IconButton, Colors } from 'react-native-paper';
+     *
+     * const MyComponent = () => (
+     *   <IconButton
+     *     icon="camera"
+     *     color={Colors.red500}
+     *     size={20}
+     *     onPress={() => console.log('Pressed')}
+     *   />
+     * );
+     *
+     * export default MyComponent;
+     * ```
+     *
+     * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html
+     */
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: StyleProp<ViewStyle>; /**
+     * An icon button is a button which displays only an icon without a label.
+     * By default button has 150% size of the icon.
+     *
+     * <div class="screenshots">
+     *   <figure>
+     *     <img src="screenshots/icon-button-1.png" />
+     *     <figcaption>Icon button</figcaption>
+     *   </figure>
+     *   <figure>
+     *     <img src="screenshots/icon-button-2.png" />
+     *     <figcaption>Pressed icon button</figcaption>
+     *   </figure>
+     * </div>
+     *
+     * ## Usage
+     * ```js
+     * import * as React from 'react';
+     * import { IconButton, Colors } from 'react-native-paper';
+     *
+     * const MyComponent = () => (
+     *   <IconButton
+     *     icon="camera"
+     *     color={Colors.red500}
+     *     size={20}
+     *     onPress={() => console.log('Pressed')}
+     *   />
+     * );
+     *
+     * export default MyComponent;
+     * ```
+     *
+     * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html
+     */
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: StyleProp<ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Icon to display.
      */
@@ -118,12 +235,9 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * @optional
      */
     theme: ReactNativePaper.Theme;
-}, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
-    /**
-     * Size of the icon.
-     */
+}, "style" | "color" | "size" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "icon" | "ref" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "animated"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -133,14 +247,52 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     rippleColor?: string | undefined;
     underlayColor?: string | undefined;
     children: React.ReactNode;
-    style?: StyleProp<ViewStyle>;
-    theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<TouchableWithoutFeedback>> & {
-    /**
-     * Size of the icon.
+    style?: StyleProp<ViewStyle>; /**
+     * An icon button is a button which displays only an icon without a label.
+     * By default button has 150% size of the icon.
+     *
+     * <div class="screenshots">
+     *   <figure>
+     *     <img src="screenshots/icon-button-1.png" />
+     *     <figcaption>Icon button</figcaption>
+     *   </figure>
+     *   <figure>
+     *     <img src="screenshots/icon-button-2.png" />
+     *     <figcaption>Pressed icon button</figcaption>
+     *   </figure>
+     * </div>
+     *
+     * ## Usage
+     * ```js
+     * import * as React from 'react';
+     * import { IconButton, Colors } from 'react-native-paper';
+     *
+     * const MyComponent = () => (
+     *   <IconButton
+     *     icon="camera"
+     *     color={Colors.red500}
+     *     size={20}
+     *     onPress={() => console.log('Pressed')}
+     *   />
+     * );
+     *
+     * export default MyComponent;
+     * ```
+     *
+     * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html
      */
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -150,24 +302,103 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     rippleColor?: string | undefined;
     underlayColor?: string | undefined;
     children: React.ReactNode;
-    style?: StyleProp<ViewStyle>;
+    style?: StyleProp<ViewStyle>; /**
+     * An icon button is a button which displays only an icon without a label.
+     * By default button has 150% size of the icon.
+     *
+     * <div class="screenshots">
+     *   <figure>
+     *     <img src="screenshots/icon-button-1.png" />
+     *     <figcaption>Icon button</figcaption>
+     *   </figure>
+     *   <figure>
+     *     <img src="screenshots/icon-button-2.png" />
+     *     <figcaption>Pressed icon button</figcaption>
+     *   </figure>
+     * </div>
+     *
+     * ## Usage
+     * ```js
+     * import * as React from 'react';
+     * import { IconButton, Colors } from 'react-native-paper';
+     *
+     * const MyComponent = () => (
+     *   <IconButton
+     *     icon="camera"
+     *     color={Colors.red500}
+     *     size={20}
+     *     onPress={() => console.log('Pressed')}
+     *   />
+     * );
+     *
+     * export default MyComponent;
+     * ```
+     *
+     * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html
+     */
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: StyleProp<ViewStyle>; /**
+     * An icon button is a button which displays only an icon without a label.
+     * By default button has 150% size of the icon.
+     *
+     * <div class="screenshots">
+     *   <figure>
+     *     <img src="screenshots/icon-button-1.png" />
+     *     <figcaption>Icon button</figcaption>
+     *   </figure>
+     *   <figure>
+     *     <img src="screenshots/icon-button-2.png" />
+     *     <figcaption>Pressed icon button</figcaption>
+     *   </figure>
+     * </div>
+     *
+     * ## Usage
+     * ```js
+     * import * as React from 'react';
+     * import { IconButton, Colors } from 'react-native-paper';
+     *
+     * const MyComponent = () => (
+     *   <IconButton
+     *     icon="camera"
+     *     color={Colors.red500}
+     *     size={20}
+     *     onPress={() => console.log('Pressed')}
+     *   />
+     * );
+     *
+     * export default MyComponent;
+     * ```
+     *
+     * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html
+     */
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: StyleProp<ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Icon to display.
      */
diff --git a/node_modules/react-native-paper/lib/typescript/components/List/ListItem.d.ts b/node_modules/react-native-paper/lib/typescript/components/List/ListItem.d.ts
index 8c70ed7..3f329f4 100644
--- a/node_modules/react-native-paper/lib/typescript/components/List/ListItem.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/List/ListItem.d.ts
@@ -87,7 +87,7 @@ declare type Props = $RemoveChildren<typeof TouchableRipple> & {
      */
     descriptionEllipsizeMode?: EllipsizeProp;
 };
-declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -99,9 +99,19 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any; /**
+     * Function to execute on press.
+     */
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -113,22 +123,39 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: StyleProp<ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any; /**
+     * Function to execute on press.
+     */
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: StyleProp<ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any; /**
+     * Function to execute on press.
+     */
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Title text for the list item.
      */
@@ -200,9 +227,9 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)
      */
     descriptionEllipsizeMode?: EllipsizeProp | undefined;
-}, "style" | "title" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "left" | "right" | "key" | "hitSlop" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "description" | "titleStyle" | "descriptionStyle" | "titleNumberOfLines" | "descriptionNumberOfLines" | "titleEllipsizeMode" | "descriptionEllipsizeMode"> & {
+}, "style" | "title" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "left" | "right" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "description" | "titleStyle" | "descriptionStyle" | "titleNumberOfLines" | "descriptionNumberOfLines" | "titleEllipsizeMode" | "descriptionEllipsizeMode"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -214,9 +241,19 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any; /**
+     * Function to execute on press.
+     */
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -228,22 +265,39 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: StyleProp<ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any; /**
+     * Function to execute on press.
+     */
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: StyleProp<ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any; /**
+     * Function to execute on press.
+     */
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Title text for the list item.
      */
diff --git a/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonAndroid.d.ts b/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonAndroid.d.ts
index 0a41ab0..3e3503e 100644
--- a/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonAndroid.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonAndroid.d.ts
@@ -35,7 +35,7 @@ declare type Props = $RemoveChildren<typeof TouchableRipple> & {
      */
     testID?: string;
 };
-declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -47,9 +47,17 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -61,22 +69,35 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Value of the radio button
      */
@@ -109,9 +130,9 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -123,9 +144,17 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -137,22 +166,35 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Value of the radio button
      */
@@ -190,7 +232,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     displayName: string;
 }, {}>;
 export default _default;
-declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -202,9 +244,17 @@ declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChild
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -216,22 +266,35 @@ declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChild
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Value of the radio button
      */
@@ -264,9 +327,9 @@ declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChild
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -278,9 +341,17 @@ declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChild
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -292,22 +363,35 @@ declare const RadioButtonAndroidWithTheme: React.ComponentType<Pick<$RemoveChild
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Value of the radio button
      */
diff --git a/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonIOS.d.ts b/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonIOS.d.ts
index 93773de..edf4059 100644
--- a/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonIOS.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/RadioButton/RadioButtonIOS.d.ts
@@ -31,7 +31,7 @@ declare type Props = $RemoveChildren<typeof TouchableRipple> & {
      */
     testID?: string;
 };
-declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+declare const _default: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -43,9 +43,17 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -57,22 +65,35 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Value of the radio button
      */
@@ -101,9 +122,9 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -115,9 +136,17 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -129,22 +158,35 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Value of the radio button
      */
@@ -178,7 +220,7 @@ declare const _default: React.ComponentType<Pick<$RemoveChildren<React.Component
     displayName: string;
 }, {}>;
 export default _default;
-declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -190,9 +232,17 @@ declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -204,22 +254,35 @@ declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Value of the radio button
      */
@@ -248,9 +311,9 @@ declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<
      * testID to be used on tests.
      */
     testID?: string | undefined;
-}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
+}, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<$RemoveChildren<React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -262,9 +325,17 @@ declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
     borderless?: boolean | undefined;
     background?: Object | undefined;
     centered?: boolean | undefined;
@@ -276,22 +347,35 @@ declare const RadioButtonIOSWithTheme: React.ComponentType<Pick<$RemoveChildren<
     children: React.ReactNode;
     style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-        borderless?: boolean | undefined;
-        background?: Object | undefined;
-        centered?: boolean | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-        rippleColor?: string | undefined;
-        underlayColor?: string | undefined;
-        children: React.ReactNode;
-        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-        theme: ReactNativePaper.Theme;
-    }): JSX.Element;
-    supported: boolean;
-}, {}>> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    borderless?: boolean | undefined;
+    background?: Object | undefined;
+    centered?: boolean | undefined;
+    disabled?: boolean | undefined;
+    onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>> & {
     /**
      * Value of the radio button
      */
diff --git a/node_modules/react-native-paper/lib/typescript/components/RadioButton/index.d.ts b/node_modules/react-native-paper/lib/typescript/components/RadioButton/index.d.ts
index e532e96..bfbc89b 100644
--- a/node_modules/react-native-paper/lib/typescript/components/RadioButton/index.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/RadioButton/index.d.ts
@@ -10,7 +10,7 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         }): JSX.Element;
         displayName: string;
     };
-    Android: import("react").ComponentType<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    Android: import("react").ComponentType<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -22,9 +22,17 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -36,22 +44,35 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-            borderless?: boolean | undefined;
-            background?: Object | undefined;
-            centered?: boolean | undefined;
-            disabled?: boolean | undefined;
-            onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-            onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-            rippleColor?: string | undefined;
-            underlayColor?: string | undefined;
-            children: import("react").ReactNode;
-            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-            theme: ReactNativePaper.Theme;
-        }): JSX.Element;
-        supported: boolean;
-    }, {}>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        borderless?: boolean | undefined;
+        background?: Object | undefined;
+        centered?: boolean | undefined;
+        disabled?: boolean | undefined;
+        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        rippleColor?: string | undefined;
+        underlayColor?: string | undefined;
+        children: import("react").ReactNode;
+        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+        theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
         value: string;
         status?: "checked" | "unchecked" | undefined;
         disabled?: boolean | undefined;
@@ -60,9 +81,9 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         color?: string | undefined;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
+    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status" | "uncheckedColor"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -74,9 +95,37 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        borderless?: boolean | undefined;
+        background?: Object | undefined;
+        centered?: boolean | undefined;
+        disabled?: boolean | undefined;
+        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        rippleColor?: string | undefined;
+        underlayColor?: string | undefined;
+        children: import("react").ReactNode;
+        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+        theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -88,8 +137,25 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
+        value: string;
+        status?: "checked" | "unchecked" | undefined;
+        disabled?: boolean | undefined;
+        onPress?: ((param?: any) => void) | undefined;
+        uncheckedColor?: string | undefined;
+        color?: string | undefined;
+        theme: ReactNativePaper.Theme;
+        testID?: string | undefined;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ disabled, onPress, theme, value, status, testID, ...rest }: import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -101,19 +167,17 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }): JSX.Element;
-        supported: boolean;
-    }, {}>> & {
-        value: string;
-        status?: "checked" | "unchecked" | undefined;
-        disabled?: boolean | undefined;
-        onPress?: ((param?: any) => void) | undefined;
-        uncheckedColor?: string | undefined;
-        color?: string | undefined;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }> & {
-        ({ disabled, onPress, theme, value, status, testID, ...rest }: import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
+            theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
+        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -125,9 +189,15 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
-            theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -139,22 +209,15 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-                borderless?: boolean | undefined;
-                background?: Object | undefined;
-                centered?: boolean | undefined;
-                disabled?: boolean | undefined;
-                onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                rippleColor?: string | undefined;
-                underlayColor?: string | undefined;
-                children: import("react").ReactNode;
-                style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-                theme: ReactNativePaper.Theme;
-            }): JSX.Element;
-            supported: boolean;
-        }, {}>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
             value: string;
             status?: "checked" | "unchecked" | undefined;
             disabled?: boolean | undefined;
@@ -166,7 +229,7 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         }): JSX.Element;
         displayName: string;
     }, {}>;
-    IOS: import("react").ComponentType<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    IOS: import("react").ComponentType<Pick<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -178,9 +241,17 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -192,22 +263,35 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-            borderless?: boolean | undefined;
-            background?: Object | undefined;
-            centered?: boolean | undefined;
-            disabled?: boolean | undefined;
-            onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-            onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-            rippleColor?: string | undefined;
-            underlayColor?: string | undefined;
-            children: import("react").ReactNode;
-            style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-            theme: ReactNativePaper.Theme;
-        }): JSX.Element;
-        supported: boolean;
-    }, {}>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        borderless?: boolean | undefined;
+        background?: Object | undefined;
+        centered?: boolean | undefined;
+        disabled?: boolean | undefined;
+        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        rippleColor?: string | undefined;
+        underlayColor?: string | undefined;
+        children: import("react").ReactNode;
+        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+        theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
         value: string;
         status?: "checked" | "unchecked" | undefined;
         disabled?: boolean | undefined;
@@ -215,9 +299,9 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         color?: string | undefined;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
+    }, "style" | "color" | "onLayout" | "onPress" | "onPressIn" | "onPressOut" | "onLongPress" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "key" | "hitSlop" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "value" | "delayLongPress" | "delayPressIn" | "delayPressOut" | "disabled" | "onBlur" | "onFocus" | "pressRetentionOffset" | "touchSoundDisabled" | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | "status"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -229,9 +313,37 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+    }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        borderless?: boolean | undefined;
+        background?: Object | undefined;
+        centered?: boolean | undefined;
+        disabled?: boolean | undefined;
+        onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
+        rippleColor?: string | undefined;
+        underlayColor?: string | undefined;
+        children: import("react").ReactNode;
+        style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
+        theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
         borderless?: boolean | undefined;
         background?: Object | undefined;
         centered?: boolean | undefined;
@@ -243,8 +355,24 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
         children: import("react").ReactNode;
         style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
         theme: ReactNativePaper.Theme;
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
+        value: string;
+        status?: "checked" | "unchecked" | undefined;
+        disabled?: boolean | undefined;
+        onPress?: (() => void) | undefined;
+        color?: string | undefined;
+        theme: ReactNativePaper.Theme;
+        testID?: string | undefined;
     }> & {
-        ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+        ({ disabled, onPress, theme, status, value, testID, ...rest }: import("../../types").$RemoveChildren<import("react").ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -256,18 +384,17 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }): JSX.Element;
-        supported: boolean;
-    }, {}>> & {
-        value: string;
-        status?: "checked" | "unchecked" | undefined;
-        disabled?: boolean | undefined;
-        onPress?: (() => void) | undefined;
-        color?: string | undefined;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }> & {
-        ({ disabled, onPress, theme, status, value, testID, ...rest }: import("../../types").$RemoveChildren<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<unknown>> & {
+            theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
+        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -279,9 +406,15 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof import("react").RefAttributes<import("react-native").TouchableWithoutFeedback>> & {
-            theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-        }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<import("react").ComponentType<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>> & import("react").ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
             borderless?: boolean | undefined;
             background?: Object | undefined;
             centered?: boolean | undefined;
@@ -293,22 +426,15 @@ declare const RadioButton: (import("react").ComponentType<Pick<import("./RadioBu
             children: import("react").ReactNode;
             style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
             theme: ReactNativePaper.Theme;
-        }> & {
-            ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: import("react-native").TouchableWithoutFeedbackProps & import("react").RefAttributes<import("react-native").TouchableWithoutFeedback> & {
-                borderless?: boolean | undefined;
-                background?: Object | undefined;
-                centered?: boolean | undefined;
-                disabled?: boolean | undefined;
-                onPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                onLongPress?: ((e: import("react-native").GestureResponderEvent) => void) | undefined;
-                rippleColor?: string | undefined;
-                underlayColor?: string | undefined;
-                children: import("react").ReactNode;
-                style?: import("react-native").StyleProp<import("react-native").ViewStyle>;
-                theme: ReactNativePaper.Theme;
-            }): JSX.Element;
-            supported: boolean;
-        }, {}>> & {
+            tvParallaxProperties?: any;
+            hasTVPreferredFocus?: boolean | undefined;
+            onFocus?: any;
+            onBlur?: any;
+            nextFocusUp?: any;
+            nextFocusDown?: any;
+            nextFocusLeft?: any;
+            nextFocusRight?: any;
+        }, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & import("react").RefAttributes<unknown>>, {}>> & {
             value: string;
             status?: "checked" | "unchecked" | undefined;
             disabled?: boolean | undefined;
diff --git a/node_modules/react-native-paper/lib/typescript/components/Snackbar.d.ts b/node_modules/react-native-paper/lib/typescript/components/Snackbar.d.ts
index dd0d7bb..c2fc78f 100644
--- a/node_modules/react-native-paper/lib/typescript/components/Snackbar.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/Snackbar.d.ts
@@ -54,32 +54,7 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
      * - `label` - Label of the action button
      * - `onPress` - Callback that is called when action button is pressed.
      */
-    action?: (Omit<((Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: import("./Icon").IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    action?: (Omit<(Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -106,34 +81,17 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }) | React.PropsWithChildren<(Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | keyof React.RefAttributes<unknown> | "compact" | "loading" | "contentStyle"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: import("./Icon").IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    }) | (Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -160,9 +118,19 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | keyof React.RefAttributes<unknown> | "compact" | "loading" | "contentStyle"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }>, "children"> & {
+    } & {
+        children?: React.ReactNode;
+    }), "children"> & {
         label: string;
     }) | undefined;
     /**
@@ -205,32 +173,7 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
      * - `label` - Label of the action button
      * - `onPress` - Callback that is called when action button is pressed.
      */
-    action?: (Omit<((Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: import("./Icon").IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    action?: (Omit<(Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -257,34 +200,17 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
-        theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }) | React.PropsWithChildren<(Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
-        children: React.ReactNode;
-        style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
-        theme: ReactNativePaper.Theme;
-    }, keyof import("react-native").ViewProps | keyof React.RefAttributes<View>> & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | keyof React.RefAttributes<unknown> | "compact" | "loading" | "contentStyle"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    } & {
-        mode?: "text" | "outlined" | "contained" | undefined;
-        dark?: boolean | undefined;
-        compact?: boolean | undefined;
-        color?: string | undefined;
-        loading?: boolean | undefined;
-        icon?: import("./Icon").IconSource | undefined;
-        disabled?: boolean | undefined;
-        children: React.ReactNode;
-        uppercase?: boolean | undefined;
-        accessibilityLabel?: string | undefined;
-        accessibilityHint?: string | undefined;
-        onPress?: (() => void) | undefined;
-        onLongPress?: (() => void) | undefined;
-        contentStyle?: StyleProp<ViewStyle>;
-        style?: StyleProp<ViewStyle>;
-        labelStyle?: StyleProp<import("react-native").TextStyle>;
-        theme: ReactNativePaper.Theme;
-        testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle"> | Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
+    }) | (Pick<Pick<Pick<import("react-native").ViewProps & React.RefAttributes<View> & {
         children: React.ReactNode;
         style?: false | import("react-native").RegisteredStyle<ViewStyle> | Animated.Value | Animated.AnimatedInterpolation | Animated.WithAnimatedObject<ViewStyle> | Animated.WithAnimatedArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle> | import("react-native").RecursiveArray<ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>> | readonly (ViewStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<ViewStyle>)[]> | null | undefined;
         theme: ReactNativePaper.Theme;
@@ -311,9 +237,19 @@ declare const _default: React.ComponentType<(Pick<Pick<import("react-native").Vi
         labelStyle?: StyleProp<import("react-native").TextStyle>;
         theme: ReactNativePaper.Theme;
         testID?: string | undefined;
-    }, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | keyof React.RefAttributes<View> | "mode" | "uppercase" | "labelStyle" | "disabled" | "compact" | "loading" | "contentStyle">) & {
+        tvParallaxProperties?: any;
+        hasTVPreferredFocus?: boolean | undefined;
+        onFocus?: any;
+        onBlur?: any;
+        nextFocusUp?: any;
+        nextFocusDown?: any;
+        nextFocusLeft?: any;
+        nextFocusRight?: any;
+    }, "color" | "onPress" | "onLongPress" | "icon" | "key" | keyof import("react-native").ViewProps | "theme" | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | "compact" | "loading" | "contentStyle"> & React.RefAttributes<unknown>, "color" | "onPress" | "onLongPress" | "icon" | keyof import("react-native").ViewProps | "dark" | "mode" | "uppercase" | "labelStyle" | "disabled" | "onBlur" | "onFocus" | keyof React.RefAttributes<unknown> | "compact" | "loading" | "contentStyle"> & {
         theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-    }>, "children"> & {
+    } & {
+        children?: React.ReactNode;
+    }), "children"> & {
         label: string;
     }) | undefined;
     /**
diff --git a/node_modules/react-native-paper/lib/typescript/components/TextInput/TextInput.d.ts b/node_modules/react-native-paper/lib/typescript/components/TextInput/TextInput.d.ts
index bb442be..2706c95 100644
--- a/node_modules/react-native-paper/lib/typescript/components/TextInput/TextInput.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/TextInput/TextInput.d.ts
@@ -231,7 +231,7 @@ declare const _default: React.ComponentType<Pick<import("react-native").TextInpu
      * @optional
      */
     theme: ReactNativePaper.Theme;
-} & React.RefAttributes<TextInputHandles>, "label" | "style" | "children" | "pointerEvents" | "allowFontScaling" | "numberOfLines" | "onLayout" | "onPressIn" | "onPressOut" | "testID" | "nativeID" | "maxFontSizeMultiplier" | "selectionColor" | "textBreakStrategy" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "left" | "right" | "ref" | "key" | "hitSlop" | "removeClippedSubviews" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "value" | "mode" | "textAlign" | "render" | "textAlignVertical" | "disabled" | "onBlur" | "onFocus" | "multiline" | "error" | "placeholder" | "onContentSizeChange" | "onScroll" | "scrollEnabled" | "autoCapitalize" | "autoCorrect" | "autoFocus" | "blurOnSubmit" | "caretHidden" | "contextMenuHidden" | "defaultValue" | "editable" | "keyboardType" | "maxLength" | "onChange" | "onChangeText" | "onEndEditing" | "onSelectionChange" | "onSubmitEditing" | "onTextInput" | "onKeyPress" | "placeholderTextColor" | "returnKeyType" | "secureTextEntry" | "selectTextOnFocus" | "selection" | "inputAccessoryViewID" | "clearButtonMode" | "clearTextOnFocus" | "dataDetectorTypes" | "enablesReturnKeyAutomatically" | "keyboardAppearance" | "passwordRules" | "rejectResponderTermination" | "selectionState" | "spellCheck" | "textContentType" | "autoComplete" | "importantForAutofill" | "disableFullscreenUI" | "inlineImageLeft" | "inlineImagePadding" | "returnKeyLabel" | "underlineColorAndroid" | "showSoftInputOnFocus" | "underlineColor" | "activeUnderlineColor" | "outlineColor" | "activeOutlineColor" | "dense"> & {
+} & React.RefAttributes<TextInputHandles>, "label" | "style" | "children" | "pointerEvents" | "allowFontScaling" | "numberOfLines" | "onLayout" | "onPressIn" | "onPressOut" | "testID" | "nativeID" | "maxFontSizeMultiplier" | "selectionColor" | "textBreakStrategy" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "left" | "right" | "ref" | "key" | "hitSlop" | "removeClippedSubviews" | "nextFocusDown" | "nextFocusForward" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "focusable" | "shouldRasterizeIOS" | "isTVSelectable" | "hasTVPreferredFocus" | "tvParallaxProperties" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "value" | "mode" | "textAlign" | "render" | "textAlignVertical" | "disabled" | "onBlur" | "onFocus" | "multiline" | "error" | "placeholder" | "onContentSizeChange" | "onScroll" | "scrollEnabled" | "autoCapitalize" | "autoCorrect" | "autoFocus" | "blurOnSubmit" | "caretHidden" | "contextMenuHidden" | "defaultValue" | "editable" | "keyboardType" | "maxLength" | "onChange" | "onChangeText" | "onEndEditing" | "onSelectionChange" | "onSubmitEditing" | "onTextInput" | "onKeyPress" | "placeholderTextColor" | "returnKeyType" | "secureTextEntry" | "selectTextOnFocus" | "selection" | "inputAccessoryViewID" | "clearButtonMode" | "clearTextOnFocus" | "dataDetectorTypes" | "enablesReturnKeyAutomatically" | "keyboardAppearance" | "passwordRules" | "rejectResponderTermination" | "selectionState" | "spellCheck" | "textContentType" | "autoComplete" | "importantForAutofill" | "disableFullscreenUI" | "inlineImageLeft" | "inlineImagePadding" | "returnKeyLabel" | "underlineColorAndroid" | "showSoftInputOnFocus" | "underlineColor" | "activeUnderlineColor" | "outlineColor" | "activeOutlineColor" | "dense"> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TextInputProps & React.RefAttributes<NativeTextInput> & {
     /**
diff --git a/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.d.ts b/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.d.ts
index 6740ef4..962be34 100644
--- a/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.d.ts
@@ -1,39 +1,39 @@
 import * as React from 'react';
 import { TouchableWithoutFeedback, ViewStyle, StyleProp, GestureResponderEvent } from 'react-native';
-declare type Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {
+declare const _default: React.ComponentType<Pick<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
     /**
      * Whether to render the ripple outside the view bounds.
      */
-    borderless?: boolean;
+    borderless?: boolean | undefined;
     /**
      * Type of background drawabale to display the feedback (Android).
      * https://reactnative.dev/docs/touchablenativefeedback#background
      */
-    background?: Object;
+    background?: Object | undefined;
     /**
      * Whether to start the ripple at the center (Web).
      */
-    centered?: boolean;
+    centered?: boolean | undefined;
     /**
      * Whether to prevent interaction with the touchable.
      */
-    disabled?: boolean;
+    disabled?: boolean | undefined;
     /**
      * Function to execute on press. If not set, will cause the touchable to be disabled.
      */
-    onPress?: (e: GestureResponderEvent) => void;
+    onPress?: ((e: GestureResponderEvent) => void) | undefined;
     /**
      * Function to execute on long press.
      */
-    onLongPress?: (e: GestureResponderEvent) => void;
+    onLongPress?: ((e: GestureResponderEvent) => void) | undefined;
     /**
      * Color of the ripple effect (Android >= 5.0 and Web).
      */
-    rippleColor?: string;
+    rippleColor?: string | undefined;
     /**
      * Color of the underlay for the highlight effect (Android < 5.0 and iOS).
      */
-    underlayColor?: string;
+    underlayColor?: string | undefined;
     /**
      * Content of the `TouchableRipple`.
      */
@@ -43,8 +43,17 @@ declare type Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback
      * @optional
      */
     theme: ReactNativePaper.Theme;
-};
-declare const _default: React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<unknown>> & {
+    theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
+}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
     /**
      * Whether to render the ripple outside the view bounds.
      */
@@ -87,9 +96,15 @@ declare const _default: React.ComponentType<Pick<import("react-native").Touchabl
      * @optional
      */
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered" | keyof React.RefAttributes<TouchableWithoutFeedback>> & {
-    theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
-}> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<Pick<import("react-native").TouchableWithoutFeedbackProps & React.RefAttributes<TouchableWithoutFeedback> & {
     /**
      * Whether to render the ripple outside the view bounds.
      */
@@ -132,11 +147,13 @@ declare const _default: React.ComponentType<Pick<import("react-native").Touchabl
      * @optional
      */
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background: _background, borderless, disabled: disabledProp, rippleColor, underlayColor: _underlayColor, children, theme, ...rest }: Props): JSX.Element;
-    /**
-     * Whether ripple effect is supported.
-     */
-    supported: boolean;
-}, {}>;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+}, "key" | "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | "theme" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | "centered"> & React.RefAttributes<unknown>>, {}>;
 export default _default;
diff --git a/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.native.d.ts b/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.native.d.ts
index c3f56b3..43fe07c 100644
--- a/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.native.d.ts
+++ b/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRipple.native.d.ts
@@ -1,16 +1,6 @@
 import * as React from 'react';
-import { BackgroundPropType, StyleProp, TouchableWithoutFeedback, ViewStyle } from 'react-native';
-declare type Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {
-    borderless?: boolean;
-    background?: BackgroundPropType;
-    disabled?: boolean;
-    onPress?: () => void | null;
-    rippleColor?: string;
-    underlayColor?: string;
-    children: React.ReactNode;
-    style?: StyleProp<ViewStyle>;
-    theme: ReactNativePaper.Theme;
-};
+import { BackgroundPropType, StyleProp, ViewStyle } from 'react-native';
+import 'react-native/tvos-types.d';
 declare const _default: React.ComponentType<Pick<import("react-native").TouchableWithoutFeedbackProps & {
     borderless?: boolean | undefined;
     background?: BackgroundPropType | undefined;
@@ -21,7 +11,15 @@ declare const _default: React.ComponentType<Pick<import("react-native").Touchabl
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}, keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor"> & {
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+} & React.RefAttributes<unknown>, "nextFocusDown" | "nextFocusLeft" | "nextFocusRight" | "nextFocusUp" | "hasTVPreferredFocus" | "tvParallaxProperties" | keyof import("react-native").TouchableWithoutFeedbackProps | "background" | "borderless" | "rippleColor" | "underlayColor" | keyof React.RefAttributes<unknown>> & {
     theme?: import("@callstack/react-theme-provider").$DeepPartial<ReactNativePaper.Theme> | undefined;
 }> & import("@callstack/react-theme-provider/typings/hoist-non-react-statics").NonReactStatics<React.ComponentType<import("react-native").TouchableWithoutFeedbackProps & {
     borderless?: boolean | undefined;
@@ -33,8 +31,31 @@ declare const _default: React.ComponentType<Pick<import("react-native").Touchabl
     children: React.ReactNode;
     style?: StyleProp<ViewStyle>;
     theme: ReactNativePaper.Theme;
-}> & {
-    ({ style, background, borderless, disabled: disabledProp, rippleColor, underlayColor, children, theme, ...rest }: Props): JSX.Element;
-    supported: boolean;
-}, {}>;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+} & React.RefAttributes<unknown>> & React.ForwardRefExoticComponent<import("react-native").TouchableWithoutFeedbackProps & {
+    borderless?: boolean | undefined;
+    background?: BackgroundPropType | undefined;
+    disabled?: boolean | undefined;
+    onPress?: (() => void | null) | undefined;
+    rippleColor?: string | undefined;
+    underlayColor?: string | undefined;
+    children: React.ReactNode;
+    style?: StyleProp<ViewStyle>;
+    theme: ReactNativePaper.Theme;
+    tvParallaxProperties?: any;
+    hasTVPreferredFocus?: boolean | undefined;
+    onFocus?: any;
+    onBlur?: any;
+    nextFocusUp?: any;
+    nextFocusDown?: any;
+    nextFocusLeft?: any;
+    nextFocusRight?: any;
+} & React.RefAttributes<unknown>>, {}>;
 export default _default;
diff --git a/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRippleSupported.d.ts b/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRippleSupported.d.ts
new file mode 100644
index 0000000..a23f096
--- /dev/null
+++ b/node_modules/react-native-paper/lib/typescript/components/TouchableRipple/TouchableRippleSupported.d.ts
@@ -0,0 +1,4 @@
+declare const _default: {
+    supported: boolean;
+};
+export default _default;
diff --git a/node_modules/react-native-paper/src/.npmignore b/node_modules/react-native-paper/src/.npmignore
new file mode 100644
index 0000000..c912533
--- /dev/null
+++ b/node_modules/react-native-paper/src/.npmignore
@@ -0,0 +1 @@
+__tests__
diff --git a/node_modules/react-native-paper/src/babel/__tests__/index.js b/node_modules/react-native-paper/src/babel/__tests__/index.js
new file mode 100644
index 0000000..0e59a4e
--- /dev/null
+++ b/node_modules/react-native-paper/src/babel/__tests__/index.js
@@ -0,0 +1,21 @@
+const path = require('path');
+const { spawnSync } = require('child_process');
+const { create } = require('babel-test');
+const { toMatchFile } = require('jest-file-snapshot');
+
+expect.extend({ toMatchFile });
+
+spawnSync('node', [
+  path.resolve(__dirname, '../../../scripts/generate-mappings.js'),
+]);
+
+const { fixtures } = create({
+  plugins: [
+    [
+      require.resolve('../index'),
+      { mappings: require.resolve('../../../lib/mappings.json') },
+    ],
+  ],
+});
+
+fixtures('generate mappings', path.join(__dirname, '..', '__fixtures__'));
diff --git a/node_modules/react-native-paper/src/components/BottomNavigation/BottomNavigation.tsx b/node_modules/react-native-paper/src/components/BottomNavigation/BottomNavigation.tsx
index a0464f7..55e1411 100644
--- a/node_modules/react-native-paper/src/components/BottomNavigation/BottomNavigation.tsx
+++ b/node_modules/react-native-paper/src/components/BottomNavigation/BottomNavigation.tsx
@@ -16,6 +16,7 @@ import Icon, { IconSource } from '../Icon';
 import Surface from '../Surface';
 import Badge from '../Badge';
 import TouchableRipple from '../TouchableRipple/TouchableRipple';
+import TouchableRippleSupported from '../TouchableRipple/TouchableRippleSupported';
 import Text from '../Typography/Text';
 import { black, white } from '../../styles/colors';
 import { withTheme } from '../../core/theming';
@@ -253,7 +254,7 @@ const Touchable = ({
   rippleColor,
   ...rest
 }: TouchableProps) =>
-  TouchableRipple.supported ? (
+  TouchableRippleSupported.supported ? (
     <TouchableRipple
       {...rest}
       disabled={rest.disabled || undefined}
diff --git a/node_modules/react-native-paper/src/components/Button.tsx b/node_modules/react-native-paper/src/components/Button.tsx
index 5f839ef..30c1692 100644
--- a/node_modules/react-native-paper/src/components/Button.tsx
+++ b/node_modules/react-native-paper/src/components/Button.tsx
@@ -1,6 +1,7 @@
 import * as React from 'react';
 import {
   Animated,
+  Platform,
   View,
   ViewStyle,
   StyleSheet,
@@ -91,6 +92,14 @@ type Props = React.ComponentProps<typeof Surface> & {
    * testID to be used on tests.
    */
   testID?: string;
+  tvParallaxProperties?: any;
+  hasTVPreferredFocus?: boolean;
+  onFocus?: any;
+  onBlur?: any;
+  nextFocusUp?: any;
+  nextFocusDown?: any;
+  nextFocusLeft?: any;
+  nextFocusRight?: any;
 };
 
 /**
@@ -125,213 +134,269 @@ type Props = React.ComponentProps<typeof Surface> & {
  * export default MyComponent;
  * ```
  */
-const Button = ({
-  disabled,
-  compact,
-  mode = 'text',
-  dark,
-  loading,
-  icon,
-  color: buttonColor,
-  children,
-  uppercase = true,
-  accessibilityLabel,
-  accessibilityHint,
-  onPress,
-  onLongPress,
-  style,
-  theme,
-  contentStyle,
-  labelStyle,
-  testID,
-  accessible,
-  ...rest
-}: Props) => {
-  const { current: elevation } = React.useRef<Animated.Value>(
-    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)
-  );
-  React.useEffect(() => {
-    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);
-  }, [mode, elevation, disabled]);
+const Button = React.forwardRef(
+  (
+    {
+      disabled,
+      compact,
+      mode = 'text',
+      dark,
+      loading,
+      icon,
+      color: buttonColor,
+      children,
+      uppercase = true,
+      accessibilityLabel,
+      accessibilityHint,
+      onPress,
+      onLongPress,
+      style,
+      theme,
+      contentStyle,
+      labelStyle,
+      testID,
+      accessible,
+      tvParallaxProperties,
+      hasTVPreferredFocus,
+      onFocus,
+      onBlur,
+      nextFocusUp,
+      nextFocusDown,
+      nextFocusLeft,
+      nextFocusRight,
+      ...rest
+    }: Props,
+    ref: any
+  ) => {
+    const { current: elevation } = React.useRef<Animated.Value>(
+      new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)
+    );
+    React.useEffect(() => {
+      elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);
+    }, [mode, elevation, disabled]);
 
-  const handlePressIn = () => {
-    if (mode === 'contained') {
-      const { scale } = theme.animation;
-      Animated.timing(elevation, {
-        toValue: 8,
-        duration: 200 * scale,
-        useNativeDriver: true,
-      }).start();
-    }
-  };
+    const handleFocus = () => {
+      onFocus && onFocus();
+      handlePressIn();
+    };
 
-  const handlePressOut = () => {
-    if (mode === 'contained') {
-      const { scale } = theme.animation;
-      Animated.timing(elevation, {
-        toValue: 2,
-        duration: 150 * scale,
-        useNativeDriver: true,
-      }).start();
-    }
-  };
+    const handleBlur = () => {
+      onBlur && onBlur();
+      handlePressOut();
+    };
 
-  const { colors, roundness } = theme;
-  const font = theme.fonts.medium;
+    const handlePress = () => {
+      onPress && onPress();
+      // Show animation on press for Android (TouchableRipple)
+      if (Platform.isTV && Platform.OS === 'android') {
+        const { scale } = theme.animation;
+        Animated.timing(elevation, {
+          toValue: 8,
+          duration: 150 * scale,
+          useNativeDriver: true,
+        }).start(({finished}) => {
+          if (finished) {
+            Animated.timing(elevation, {
+              toValue: mode !== 'contained' ? 0 : 2,
+              duration: 150 * scale,
+              useNativeDriver: true,
+            }).start();
+          }
+        });
+      }
+    };
         
-  let backgroundColor: string,
-    borderColor: string,
-    textColor: string,
-    borderWidth: number;
+    const handlePressIn = () => {
+      if (mode === 'contained') {
+        const { scale } = theme.animation;
+        Animated.timing(elevation, {
+          toValue: 8,
+          duration: 200 * scale,
+          useNativeDriver: true,
+        }).start();
+      }
+    };
 
-  if (mode === 'contained') {
-    if (disabled) {
-      backgroundColor = color(theme.dark ? white : black)
-        .alpha(0.12)
+    const handlePressOut = () => {
+      if (mode === 'contained') {
+        const { scale } = theme.animation;
+        Animated.timing(elevation, {
+          toValue: 2,
+          duration: 150 * scale,
+          useNativeDriver: true,
+        }).start();
+      }
+    };
+
+    const { colors, roundness } = theme;
+    const font = theme.fonts.medium;
+
+    let backgroundColor: string,
+      borderColor: string,
+      textColor: string,
+      borderWidth: number;
+
+    if (mode === 'contained') {
+      if (disabled) {
+        backgroundColor = color(theme.dark ? white : black)
+          .alpha(0.12)
+          .rgb()
+          .string();
+      } else if (buttonColor) {
+        backgroundColor = buttonColor;
+      } else {
+        backgroundColor = colors.primary;
+      }
+    } else {
+      backgroundColor = 'transparent';
+    }
+
+    if (mode === 'outlined') {
+      borderColor = color(theme.dark ? white : black)
+        .alpha(0.29)
         .rgb()
         .string();
-    } else if (buttonColor) {
-      backgroundColor = buttonColor;
+      borderWidth = StyleSheet.hairlineWidth;
     } else {
-      backgroundColor = colors.primary;
+      borderColor = 'transparent';
+      borderWidth = 0;
     }
-  } else {
-    backgroundColor = 'transparent';
-  }
 
-  if (mode === 'outlined') {
-    borderColor = color(theme.dark ? white : black)
-      .alpha(0.29)
-      .rgb()
-      .string();
-    borderWidth = StyleSheet.hairlineWidth;
-  } else {
-    borderColor = 'transparent';
-    borderWidth = 0;
-  }
+    if (disabled) {
+      textColor = color(theme.dark ? white : black)
+        .alpha(0.32)
+        .rgb()
+        .string();
+    } else if (mode === 'contained') {
+      let isDark;
 
-  if (disabled) {
-    textColor = color(theme.dark ? white : black)
-      .alpha(0.32)
-      .rgb()
-      .string();
-  } else if (mode === 'contained') {
-    let isDark;
+      if (typeof dark === 'boolean') {
+        isDark = dark;
+      } else {
+        isDark =
+          backgroundColor === 'transparent'
+            ? false
+            : !color(backgroundColor).isLight();
+      }
 
-    if (typeof dark === 'boolean') {
-      isDark = dark;
+      textColor = isDark ? white : black;
+    } else if (buttonColor) {
+      textColor = buttonColor;
     } else {
-      isDark =
-        backgroundColor === 'transparent'
-          ? false
-          : !color(backgroundColor).isLight();
+      textColor = colors.primary;
     }
 
-    textColor = isDark ? white : black;
-  } else if (buttonColor) {
-    textColor = buttonColor;
-  } else {
-    textColor = colors.primary;
-  }
-
-  const rippleColor = color(textColor).alpha(0.32).rgb().string();
-  const buttonStyle = {
-    backgroundColor,
-    borderColor,
-    borderWidth,
-    borderRadius: roundness,
-  };
-  const touchableStyle = {
-    borderRadius: style
-      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||
-        roundness
-      : roundness,
-  };
+    const rippleColor = color(textColor).alpha(0.32).rgb().string();
+    const buttonStyle = {
+      backgroundColor,
+      borderColor,
+      borderWidth,
+      borderRadius: roundness,
+    };
+    const touchableStyle = {
+      borderRadius: style
+        ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||
+          roundness
+        : roundness,
+    };
 
-  const { color: customLabelColor, fontSize: customLabelSize } =
-    StyleSheet.flatten(labelStyle) || {};
+    const { color: customLabelColor, fontSize: customLabelSize } =
+      StyleSheet.flatten(labelStyle) || {};
 
-  const textStyle = { color: textColor, ...font };
-  const iconStyle =
-    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'
-      ? styles.iconReverse
-      : styles.icon;
+    const textStyle = { color: textColor, ...font };
+    const iconStyle =
+      StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'
+        ? styles.iconReverse
+        : styles.icon;
 
-  return (
-    <Surface
-      {...rest}
-      style={[
-        styles.button,
-        compact && styles.compact,
-        { elevation },
-        buttonStyle,
-        style,
-      ]}
-    >
-      <TouchableRipple
-        borderless
-        delayPressIn={0}
-        onPress={onPress}
-        onLongPress={onLongPress}
-        onPressIn={handlePressIn}
-        onPressOut={handlePressOut}
-        accessibilityLabel={accessibilityLabel}
-        accessibilityHint={accessibilityHint}
-        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
-        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}
-        accessibilityComponentType="button"
-        accessibilityRole="button"
-        accessibilityState={{ disabled }}
-        accessible={accessible}
-        disabled={disabled}
-        rippleColor={rippleColor}
-        style={touchableStyle}
-        testID={testID}
+    return (
+      <Surface
+        {...rest}
+        style={[
+          styles.button,
+          compact && styles.compact,
+          { elevation },
+          buttonStyle,
+          style,
+        ]}
       >
-        <View style={[styles.content, contentStyle]}>
-          {icon && loading !== true ? (
-            <View style={iconStyle}>
-              <Icon
-                source={icon}
+        <TouchableRipple
+          ref={ref}
+          nextFocusUp={nextFocusUp}
+          nextFocusDown={nextFocusDown}
+          nextFocusLeft={nextFocusLeft}
+          nextFocusRight={nextFocusRight}
+          borderless
+          delayPressIn={0}
+          onPress={handlePress}
+          onLongPress={onLongPress}
+          onPressIn={handlePressIn}
+          onPressOut={handlePressOut}
+          onFocus={handleFocus}
+          onBlur={handleBlur}
+          tvParallaxProperties={
+            /* Show animation on press for Apple TV */
+            tvParallaxProperties || {pressMagnification: 1.05}
+          }
+          hasTVPreferredFocus={hasTVPreferredFocus}
+          accessibilityLabel={accessibilityLabel}
+          accessibilityHint={accessibilityHint}
+          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions
+          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}
+          accessibilityComponentType="button"
+          accessibilityRole="button"
+          accessibilityState={{ disabled }}
+          accessible={accessible}
+          disabled={disabled}
+          rippleColor={rippleColor}
+          style={touchableStyle}
+          testID={testID}
+        >
+          <View style={[styles.content, contentStyle]}>
+            {icon && loading !== true ? (
+              <View style={iconStyle}>
+                <Icon
+                  source={icon}
+                  size={customLabelSize ?? 16}
+                  color={
+                    typeof customLabelColor === 'string'
+                      ? customLabelColor
+                      : textColor
+                  }
+                />
+              </View>
+            ) : null}
+            {loading ? (
+              <ActivityIndicator
                 size={customLabelSize ?? 16}
                 color={
                   typeof customLabelColor === 'string'
                     ? customLabelColor
                     : textColor
                 }
+                style={iconStyle}
               />
-            </View>
-          ) : null}
-          {loading ? (
-            <ActivityIndicator
-              size={customLabelSize ?? 16}
-              color={
-                typeof customLabelColor === 'string'
-                  ? customLabelColor
-                  : textColor
-              }
-              style={iconStyle}
-            />
-          ) : null}
-          <Text
-            selectable={false}
-            numberOfLines={1}
-            style={[
-              styles.label,
-              compact && styles.compactLabel,
-              uppercase && styles.uppercaseLabel,
-              textStyle,
-              font,
-              labelStyle,
-            ]}
-          >
-            {children}
-          </Text>
-        </View>
-      </TouchableRipple>
-    </Surface>
-  );
-};
+            ) : null}
+            <Text
+              selectable={false}
+              numberOfLines={1}
+              style={[
+                styles.label,
+                compact && styles.compactLabel,
+                uppercase && styles.uppercaseLabel,
+                textStyle,
+                font,
+                labelStyle,
+              ]}
+            >
+              {children}
+            </Text>
+          </View>
+        </TouchableRipple>
+      </Surface>
+    );
+  }
+);
 
 const styles = StyleSheet.create({
   button: {
diff --git a/node_modules/react-native-paper/src/components/IconButton.tsx b/node_modules/react-native-paper/src/components/IconButton.tsx
index 0c50225..174d6e2 100644
--- a/node_modules/react-native-paper/src/components/IconButton.tsx
+++ b/node_modules/react-native-paper/src/components/IconButton.tsx
@@ -10,6 +10,7 @@ import {
 import color from 'color';
 
 import TouchableRipple from './TouchableRipple/TouchableRipple';
+import TouchableRippleSupported from './TouchableRipple/TouchableRippleSupported';
 import Icon, { IconSource } from './Icon';
 import CrossFadeIcon from './CrossFadeIcon';
 import { withTheme } from '../core/theming';
@@ -124,7 +125,7 @@ const IconButton = ({
       accessibilityState={{ disabled }}
       disabled={disabled}
       hitSlop={
-        TouchableRipple.supported
+        TouchableRippleSupported.supported
           ? { top: 10, left: 10, bottom: 10, right: 10 }
           : { top: 6, left: 6, bottom: 6, right: 6 }
       }
diff --git a/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.native.tsx b/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.native.tsx
index 2342881..824f3f0 100644
--- a/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.native.tsx
+++ b/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.native.tsx
@@ -12,8 +12,9 @@ import {
 } from 'react-native';
 import color from 'color';
 import { withTheme } from '../../core/theming';
+import TouchableRippleSupported from './TouchableRippleSupported';
+import 'react-native/tvos-types.d';
 
-const ANDROID_VERSION_LOLLIPOP = 21;
 const ANDROID_VERSION_PIE = 28;
 
 type Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {
@@ -26,72 +27,87 @@ type Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {
   children: React.ReactNode;
   style?: StyleProp<ViewStyle>;
   theme: ReactNativePaper.Theme;
+  tvParallaxProperties?: any;
+  hasTVPreferredFocus?: boolean;
+  onFocus?: any;
+  onBlur?: any;
+  nextFocusUp?: any;
+  nextFocusDown?: any;
+  nextFocusLeft?: any;
+  nextFocusRight?: any;
 };
 
-const TouchableRipple = ({
-  style,
-  background,
-  borderless = false,
-  disabled: disabledProp,
-  rippleColor,
-  underlayColor,
-  children,
-  theme,
-  ...rest
-}: Props) => {
-  const { dark, colors } = theme;
-  const disabled = disabledProp || !rest.onPress;
-  const calculatedRippleColor =
-    rippleColor ||
-    color(colors.text)
-      .alpha(dark ? 0.32 : 0.2)
-      .rgb()
-      .string();
+const TouchableRipple = React.forwardRef(
+  (
+    {
+      style,
+      background,
+      borderless = false,
+      disabled: disabledProp,
+      rippleColor,
+      underlayColor,
+      children,
+      theme,
+      ...rest
+    }: Props,
+    ref: any
+  ) => {
+    const { dark, colors } = theme;
+    const disabled = disabledProp || !rest.onPress;
+    const calculatedRippleColor =
+      rippleColor ||
+      color(colors.text)
+        .alpha(dark ? 0.32 : 0.2)
+        .rgb()
+        .string();
 
-  // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'
-  // https://github.com/facebook/react-native/issues/6480
-  const useForeground =
-    Platform.OS === 'android' &&
-    Platform.Version >= ANDROID_VERSION_PIE &&
-    borderless;
+    // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'
+    // https://github.com/facebook/react-native/issues/6480
+    const useForeground =
+      Platform.OS === 'android' &&
+      Platform.Version >= ANDROID_VERSION_PIE &&
+      borderless;
+
+    if (TouchableRippleSupported.supported) {
+      return (
+        <TouchableNativeFeedback
+          {...rest}
+          ref={ref}
+          disabled={disabled}
+          useForeground={useForeground}
+          background={
+            background != null
+              ? background
+              : TouchableNativeFeedback.Ripple(
+                  calculatedRippleColor,
+                  borderless
+                )
+          }
+        >
+          <View style={[borderless && styles.overflowHidden, style]}>
+            {React.Children.only(children)}
+          </View>
+        </TouchableNativeFeedback>
+      );
+    }
 
-  if (TouchableRipple.supported) {
     return (
-      <TouchableNativeFeedback
+      <TouchableHighlight
         {...rest}
+        ref={ref}
         disabled={disabled}
-        useForeground={useForeground}
-        background={
-          background != null
-            ? background
-            : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)
+        style={[borderless && styles.overflowHidden, style]}
+        underlayColor={
+          underlayColor != null
+            ? underlayColor
+            : color(calculatedRippleColor).fade(0.5).rgb().string()
         }
       >
-        <View style={[borderless && styles.overflowHidden, style]}>
-          {React.Children.only(children)}
-        </View>
-      </TouchableNativeFeedback>
+        {React.Children.only(children)}
+      </TouchableHighlight>
     );
   }
-
-  return (
-    <TouchableHighlight
-      {...rest}
-      disabled={disabled}
-      style={[borderless && styles.overflowHidden, style]}
-      underlayColor={
-        underlayColor != null
-          ? underlayColor
-          : color(calculatedRippleColor).fade(0.5).rgb().string()
-      }
-    >
-      {React.Children.only(children)}
-    </TouchableHighlight>
-  );
-};
-
-TouchableRipple.supported =
-  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;
+);
 
 const styles = StyleSheet.create({
   overflowHidden: {
diff --git a/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.tsx b/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.tsx
index 8e2ac70..04c2564 100644
--- a/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.tsx
+++ b/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRipple.tsx
@@ -54,6 +54,14 @@ type Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {
    * @optional
    */
   theme: ReactNativePaper.Theme;
+  tvParallaxProperties?: any;
+  hasTVPreferredFocus?: boolean;
+  onFocus?: any;
+  onBlur?: any;
+  nextFocusUp?: any;
+  nextFocusDown?: any;
+  nextFocusLeft?: any;
+  nextFocusRight?: any;
 };
 
 /**
@@ -87,168 +95,171 @@ type Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {
  *
  * @extends TouchableWithoutFeedback props https://reactnative.dev/docs/touchablewithoutfeedback#props
  */
-const TouchableRipple = ({
-  style,
-  background: _background,
-  borderless = false,
-  disabled: disabledProp,
-  rippleColor,
-  underlayColor: _underlayColor,
-  children,
-  theme,
-  ...rest
-}: Props) => {
-  const handlePressIn = (e: any) => {
-    const { centered, onPressIn } = rest;
+const TouchableRipple = React.forwardRef(
+  (
+    {
+      style,
+      background: _background,
+      borderless = false,
+      disabled: disabledProp,
+      rippleColor,
+      underlayColor: _underlayColor,
+      children,
+      theme,
+      ...rest
+    }: Props,
+    ref: any
+  ) => {
+    const handlePressIn = (e: any) => {
+      const { centered, onPressIn } = rest;
 
-    onPressIn?.(e);
+      onPressIn?.(e);
 
-    const { dark, colors } = theme;
-    const calculatedRippleColor =
-      rippleColor ||
-      color(colors.text)
-        .alpha(dark ? 0.32 : 0.2)
-        .rgb()
-        .string();
+      const { dark, colors } = theme;
+      const calculatedRippleColor =
+        rippleColor ||
+        color(colors.text)
+          .alpha(dark ? 0.32 : 0.2)
+          .rgb()
+          .string();
 
-    const button = e.currentTarget;
-    const style = window.getComputedStyle(button);
-    const dimensions = button.getBoundingClientRect();
+      const button = e.currentTarget;
+      const style = window.getComputedStyle(button);
+      const dimensions = button.getBoundingClientRect();
 
-    let touchX;
-    let touchY;
+      let touchX;
+      let touchY;
 
-    const { changedTouches, touches } = e.nativeEvent;
-    const touch = touches?.[0] ?? changedTouches?.[0];
+      const { changedTouches, touches } = e.nativeEvent;
+      const touch = touches?.[0] ?? changedTouches?.[0];
 
-    // If centered or it was pressed using keyboard - enter or space
-    if (centered || !touch) {
-      touchX = dimensions.width / 2;
-      touchY = dimensions.height / 2;
-    } else {
-      touchX = touch.locationX ?? e.pageX;
-      touchY = touch.locationY ?? e.pageY;
-    }
+      // If centered or it was pressed using keyboard - enter or space
+      if (centered || !touch) {
+        touchX = dimensions.width / 2;
+        touchY = dimensions.height / 2;
+      } else {
+        touchX = touch.locationX ?? e.pageX;
+        touchY = touch.locationY ?? e.pageY;
+      }
 
-    // Get the size of the button to determine how big the ripple should be
-    const size = centered
-      ? // If ripple is always centered, we don't need to make it too big
-        Math.min(dimensions.width, dimensions.height) * 1.25
-      : // Otherwise make it twice as big so clicking on one end spreads ripple to other
-        Math.max(dimensions.width, dimensions.height) * 2;
+      // Get the size of the button to determine how big the ripple should be
+      const size = centered
+        ? // If ripple is always centered, we don't need to make it too big
+          Math.min(dimensions.width, dimensions.height) * 1.25
+        : // Otherwise make it twice as big so clicking on one end spreads ripple to other
+          Math.max(dimensions.width, dimensions.height) * 2;
 
-    // Create a container for our ripple effect so we don't need to change the parent's style
-    const container = document.createElement('span');
+      // Create a container for our ripple effect so we don't need to change the parent's style
+      const container = document.createElement('span');
 
-    container.setAttribute('data-paper-ripple', '');
+      container.setAttribute('data-paper-ripple', '');
 
-    Object.assign(container.style, {
-      position: 'absolute',
-      pointerEvents: 'none',
-      top: '0',
-      left: '0',
-      right: '0',
-      bottom: '0',
-      borderTopLeftRadius: style.borderTopLeftRadius,
-      borderTopRightRadius: style.borderTopRightRadius,
-      borderBottomRightRadius: style.borderBottomRightRadius,
-      borderBottomLeftRadius: style.borderBottomLeftRadius,
-      overflow: centered ? 'visible' : 'hidden',
-    });
+      Object.assign(container.style, {
+        position: 'absolute',
+        pointerEvents: 'none',
+        top: '0',
+        left: '0',
+        right: '0',
+        bottom: '0',
+        borderTopLeftRadius: style.borderTopLeftRadius,
+        borderTopRightRadius: style.borderTopRightRadius,
+        borderBottomRightRadius: style.borderBottomRightRadius,
+        borderBottomLeftRadius: style.borderBottomLeftRadius,
+        overflow: centered ? 'visible' : 'hidden',
+      });
 
-    // Create span to show the ripple effect
-    const ripple = document.createElement('span');
+      // Create span to show the ripple effect
+      const ripple = document.createElement('span');
 
-    Object.assign(ripple.style, {
-      position: 'absolute',
-      pointerEvents: 'none',
-      backgroundColor: calculatedRippleColor,
-      borderRadius: '50%',
+      Object.assign(ripple.style, {
+        position: 'absolute',
+        pointerEvents: 'none',
+        backgroundColor: calculatedRippleColor,
+        borderRadius: '50%',
 
-      /* Transition configuration */
-      transitionProperty: 'transform opacity',
-      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,
-      transitionTimingFunction: 'linear',
-      transformOrigin: 'center',
+        /* Transition configuration */
+        transitionProperty: 'transform opacity',
+        transitionDuration: `${Math.min(size * 1.5, 350)}ms`,
+        transitionTimingFunction: 'linear',
+        transformOrigin: 'center',
 
-      /* We'll animate these properties */
-      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',
-      opacity: '0.5',
+        /* We'll animate these properties */
+        transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',
+        opacity: '0.5',
 
-      // Position the ripple where cursor was
-      left: `${touchX}px`,
-      top: `${touchY}px`,
-      width: `${size}px`,
-      height: `${size}px`,
-    });
+        // Position the ripple where cursor was
+        left: `${touchX}px`,
+        top: `${touchY}px`,
+        width: `${size}px`,
+        height: `${size}px`,
+      });
 
-    // Finally, append it to DOM
-    container.appendChild(ripple);
-    button.appendChild(container);
+      // Finally, append it to DOM
+      container.appendChild(ripple);
+      button.appendChild(container);
 
-    // rAF runs in the same frame as the event handler
-    // Use double rAF to ensure the transition class is added in next frame
-    // This will make sure that the transition animation is triggered
-    requestAnimationFrame(() => {
+      // rAF runs in the same frame as the event handler
+      // Use double rAF to ensure the transition class is added in next frame
+      // This will make sure that the transition animation is triggered
       requestAnimationFrame(() => {
-        Object.assign(ripple.style, {
-          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',
-          opacity: '1',
+        requestAnimationFrame(() => {
+          Object.assign(ripple.style, {
+            transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',
+            opacity: '1',
+          });
         });
       });
-    });
-  };
+    };
 
-  const handlePressOut = (e: any) => {
-    rest.onPressOut?.(e);
+    const handlePressOut = (e: any) => {
+      rest.onPressOut?.(e);
 
-    const containers = e.currentTarget.querySelectorAll(
-      '[data-paper-ripple]'
-    ) as HTMLElement[];
+      const containers = e.currentTarget.querySelectorAll(
+        '[data-paper-ripple]'
+      ) as HTMLElement[];
 
-    requestAnimationFrame(() => {
       requestAnimationFrame(() => {
-        containers.forEach((container) => {
-          const ripple = container.firstChild as HTMLSpanElement;
+        requestAnimationFrame(() => {
+          containers.forEach((container) => {
+            const ripple = container.firstChild as HTMLSpanElement;
 
-          Object.assign(ripple.style, {
-            transitionDuration: '250ms',
-            opacity: 0,
-          });
+            Object.assign(ripple.style, {
+              transitionDuration: '250ms',
+              opacity: 0,
+            });
 
-          // Finally remove the span after the transition
-          setTimeout(() => {
-            const { parentNode } = container;
+            // Finally remove the span after the transition
+            setTimeout(() => {
+              const { parentNode } = container;
 
-            if (parentNode) {
-              parentNode.removeChild(container);
-            }
-          }, 500);
+              if (parentNode) {
+                parentNode.removeChild(container);
+              }
+            }, 500);
+          });
         });
       });
-    });
-  };
-
-  const disabled = disabledProp || !rest.onPress;
+    };
 
-  return (
-    <TouchableWithoutFeedback
-      {...rest}
-      onPressIn={handlePressIn}
-      onPressOut={handlePressOut}
-      disabled={disabled}
-    >
-      <View style={[styles.touchable, borderless && styles.borderless, style]}>
-        {React.Children.only(children)}
-      </View>
-    </TouchableWithoutFeedback>
-  );
-};
+    const disabled = disabledProp || !rest.onPress;
 
-/**
- * Whether ripple effect is supported.
- */
-TouchableRipple.supported = true;
+    return (
+      <TouchableWithoutFeedback
+        {...rest}
+        ref={ref}
+        onPressIn={handlePressIn}
+        onPressOut={handlePressOut}
+        disabled={disabled}
+      >
+        <View
+          style={[styles.touchable, borderless && styles.borderless, style]}
+        >
+          {React.Children.only(children)}
+        </View>
+      </TouchableWithoutFeedback>
+    );
+  }
+);
 
 const styles = StyleSheet.create({
   touchable: {
diff --git a/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRippleSupported.tsx b/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRippleSupported.tsx
new file mode 100644
index 0000000..c0af51a
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/TouchableRipple/TouchableRippleSupported.tsx
@@ -0,0 +1,9 @@
+import { Platform } from 'react-native';
+
+const ANDROID_VERSION_LOLLIPOP = 21;
+
+export default {
+  supported:
+    Platform.OS === 'web' ||
+    (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP),
+};
diff --git a/node_modules/react-native-paper/src/components/__tests__/ActivityIndicator.test.js b/node_modules/react-native-paper/src/components/__tests__/ActivityIndicator.test.js
new file mode 100644
index 0000000..e90aeb9
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/ActivityIndicator.test.js
@@ -0,0 +1,29 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import ActivityIndicator from '../ActivityIndicator.tsx';
+
+it('renders indicator', () => {
+  const tree = renderer.create(<ActivityIndicator animating />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders hidden indicator', () => {
+  const tree = renderer
+    .create(<ActivityIndicator animating={false} hidesWhenStopped />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders large indicator', () => {
+  const tree = renderer.create(<ActivityIndicator size="large" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders colored indicator', () => {
+  const tree = renderer.create(<ActivityIndicator color="#FF0000" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/AnimatedFAB.test.js b/node_modules/react-native-paper/src/components/__tests__/AnimatedFAB.test.js
new file mode 100644
index 0000000..9dd39ce
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/AnimatedFAB.test.js
@@ -0,0 +1,37 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import AnimatedFAB from '../FAB/AnimatedFAB';
+
+it('renders animated fab', () => {
+  const tree = renderer
+    .create(<AnimatedFAB onPress={() => {}} icon="plus" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders animated fab with label on the right by default', () => {
+  const tree = renderer
+    .create(
+      <AnimatedFAB label="text" extended onPress={() => {}} icon="plus" />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders animated fab with label on the left', () => {
+  const tree = renderer
+    .create(
+      <AnimatedFAB
+        label="text"
+        extended
+        animateFrom="left"
+        onPress={() => {}}
+        icon="plus"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Appbar/Appbar.test.js b/node_modules/react-native-paper/src/components/__tests__/Appbar/Appbar.test.js
new file mode 100644
index 0000000..8f980c6
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Appbar/Appbar.test.js
@@ -0,0 +1,32 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import Appbar from '../../Appbar';
+import Searchbar from '../../Searchbar';
+
+describe('Appbar', () => {
+  it('does not pass any additional props to Searchbar', () => {
+    const tree = renderer
+      .create(
+        <Appbar>
+          <Searchbar placeholder="Search" />
+        </Appbar>
+      )
+      .toJSON();
+
+    expect(tree).toMatchSnapshot();
+  });
+
+  it('passes additional props to AppbarBackAction, AppbarContent and AppbarAction', () => {
+    const tree = renderer
+      .create(
+        <Appbar>
+          <Appbar.BackAction onPress={() => {}} />
+          <Appbar.Content title="Examples" />
+          <Appbar.Action icon="menu" onPress={() => {}} />
+        </Appbar>
+      )
+      .toJSON();
+
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Appbar/__snapshots__/Appbar.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/Appbar/__snapshots__/Appbar.test.js.snap
new file mode 100644
index 0000000..d895911
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Appbar/__snapshots__/Appbar.test.js.snap
@@ -0,0 +1,523 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Appbar does not pass any additional props to Searchbar 1`] = `
+<View
+  style={
+    Object {
+      "alignItems": "center",
+      "backgroundColor": "#6200ee",
+      "elevation": 4,
+      "flexDirection": "row",
+      "height": 56,
+      "paddingHorizontal": 4,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 3,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 4,
+    }
+  }
+>
+  <View
+    style={
+      Object {
+        "alignItems": "center",
+        "backgroundColor": "#ffffff",
+        "borderRadius": 4,
+        "elevation": 4,
+        "flexDirection": "row",
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+      }
+    }
+  >
+    <View
+      accessibilityLabel="search"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            undefined,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <TextInput
+      accessibilityRole="search"
+      accessibilityTraits="search"
+      allowFontScaling={true}
+      keyboardAppearance="light"
+      placeholder="Search"
+      placeholderTextColor="rgba(0, 0, 0, 0.54)"
+      rejectResponderTermination={true}
+      returnKeyType="search"
+      selectionColor="#6200ee"
+      style={
+        Array [
+          Object {
+            "alignSelf": "stretch",
+            "flex": 1,
+            "fontSize": 18,
+            "minWidth": 0,
+            "paddingLeft": 8,
+            "textAlign": "left",
+          },
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          undefined,
+        ]
+      }
+      underlineColorAndroid="transparent"
+    />
+    <View
+      accessibilityLabel="clear"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": true,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            Object {
+              "opacity": 0.32,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(255, 255, 255, 0)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`Appbar passes additional props to AppbarBackAction, AppbarContent and AppbarAction 1`] = `
+<View
+  style={
+    Object {
+      "alignItems": "center",
+      "backgroundColor": "#6200ee",
+      "elevation": 4,
+      "flexDirection": "row",
+      "height": 56,
+      "paddingHorizontal": 4,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 3,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 4,
+    }
+  }
+>
+  <View
+    accessibilityLabel="Back"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    hitSlop={
+      Object {
+        "bottom": 6,
+        "left": 6,
+        "right": 6,
+        "top": 6,
+      }
+    }
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+            "margin": 6,
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "width": 36,
+          },
+          undefined,
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View>
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <View
+            style={
+              Array [
+                Object {
+                  "alignItems": "center",
+                  "justifyContent": "center",
+                },
+                Object {
+                  "height": 24,
+                  "transform": Array [
+                    Object {
+                      "scaleX": 1,
+                    },
+                  ],
+                  "width": 24,
+                },
+              ]
+            }
+          >
+            <Image
+              source={
+                Object {
+                  "testUri": "../../../src/assets/back-chevron.png",
+                }
+              }
+              style={
+                Array [
+                  Object {
+                    "resizeMode": "contain",
+                  },
+                  Object {
+                    "height": 21,
+                    "tintColor": "#ffffff",
+                    "width": 21,
+                  },
+                ]
+              }
+            />
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "flex": 1,
+          "paddingHorizontal": 12,
+        },
+        Array [
+          Object {
+            "marginLeft": 8,
+          },
+          Object {
+            "alignItems": "center",
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <Text
+      accessibilityRole="header"
+      accessibilityTraits="header"
+      accessible={true}
+      numberOfLines={1}
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "color": "#ffffff",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "fontSize": 17,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Examples
+    </Text>
+  </View>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    hitSlop={
+      Object {
+        "bottom": 6,
+        "left": 6,
+        "right": 6,
+        "top": 6,
+      }
+    }
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+            "margin": 6,
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "width": 36,
+          },
+          undefined,
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View>
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "#ffffff",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/Avatar.test.js b/node_modules/react-native-paper/src/components/__tests__/Avatar.test.js
new file mode 100644
index 0000000..774bacd
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Avatar.test.js
@@ -0,0 +1,107 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import { fireEvent, render } from 'react-native-testing-library';
+import * as Avatar from '../Avatar/Avatar.tsx';
+import { red500 } from '../../styles/colors';
+
+const styles = StyleSheet.create({
+  bgColor: {
+    backgroundColor: red500,
+  },
+});
+
+it('renders avatar with text', () => {
+  const tree = renderer.create(<Avatar.Text label="XD" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders avatar with text and custom size', () => {
+  const tree = renderer.create(<Avatar.Text size={96} label="XD" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders avatar with text and custom background color', () => {
+  const tree = renderer
+    .create(<Avatar.Text style={styles.bgColor} label="XD" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders avatar with text and custom colors', () => {
+  const tree = renderer
+    .create(<Avatar.Text color="#FFFFFF" label="XD" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders avatar with icon', () => {
+  const tree = renderer.create(<Avatar.Icon icon="information" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders avatar with icon and custom background color', () => {
+  const tree = renderer
+    .create(<Avatar.Icon style={styles.bgColor} icon="information" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders avatar with image', () => {
+  const tree = renderer
+    .create(<Avatar.Image source={{ src: 'avatar.png' }} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+describe('AvatarImage listener', () => {
+  const onListenerMock = jest.fn();
+  const { getByTestId } = render(
+    <Avatar.Image
+      testID={'avatar-image'}
+      onError={onListenerMock}
+      onLayout={onListenerMock}
+      onLoad={onListenerMock}
+      onLoadEnd={onListenerMock}
+      onLoadStart={onListenerMock}
+      onProgress={onListenerMock}
+    />
+  );
+
+  it('onError should be called', () => {
+    fireEvent(getByTestId('avatar-image'), 'onError');
+    expect(onListenerMock).toHaveBeenCalled();
+  });
+
+  it('onLayout should be called', () => {
+    fireEvent(getByTestId('avatar-image'), 'onLayout');
+    expect(onListenerMock).toHaveBeenCalled();
+  });
+
+  it('onLoad should be called', () => {
+    fireEvent(getByTestId('avatar-image'), 'onLoad');
+    expect(onListenerMock).toHaveBeenCalled();
+  });
+
+  it('onLoadEnd should be called', () => {
+    fireEvent(getByTestId('avatar-image'), 'onLoadEnd');
+    expect(onListenerMock).toHaveBeenCalled();
+  });
+
+  it('onLoadStart should be called', () => {
+    fireEvent(getByTestId('avatar-image'), 'onLoadStart');
+    expect(onListenerMock).toHaveBeenCalled();
+  });
+
+  it('onProgress should be called', () => {
+    fireEvent(getByTestId('avatar-image'), 'onProgress');
+    expect(onListenerMock).toHaveBeenCalled();
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Badge.test.js b/node_modules/react-native-paper/src/components/__tests__/Badge.test.js
new file mode 100644
index 0000000..7c2ec7a
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Badge.test.js
@@ -0,0 +1,42 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import Badge from '../Badge.tsx';
+import { red500 } from '../../styles/colors.tsx';
+
+it('renders badge', () => {
+  const tree = renderer.create(<Badge />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders badge with content', () => {
+  const tree = renderer.create(<Badge>3</Badge>).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders badge in different size', () => {
+  const tree = renderer.create(<Badge size={12}>3</Badge>).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders badge as hidden', () => {
+  const tree = renderer
+    .create(
+      <Badge visible={false} size={12}>
+        3
+      </Badge>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders badge in different color', () => {
+  const tree = renderer
+    .create(<Badge style={{ backgroundColor: red500 }}>3</Badge>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Banner.test.js b/node_modules/react-native-paper/src/components/__tests__/Banner.test.js
new file mode 100644
index 0000000..66746bc
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Banner.test.js
@@ -0,0 +1,115 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import { Image } from 'react-native';
+import Banner from '../Banner.tsx';
+
+it('renders hidden banner, without action buttons and without image', () => {
+  const tree = renderer
+    .create(
+      <Banner visible={false} actions={[]}>
+        Two line text string with two actions. One to two lines is preferable on
+        mobile.
+      </Banner>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders visible banner, without action buttons and without image', () => {
+  const tree = renderer
+    .create(
+      <Banner visible actions={[]}>
+        Two line text string with two actions. One to two lines is preferable on
+        mobile.
+      </Banner>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders visible banner, with action buttons and without image', () => {
+  const tree = renderer
+    .create(
+      <Banner
+        visible
+        actions={[
+          { label: 'first', onPress: () => {} },
+          { label: 'second', onPress: () => {} },
+        ]}
+      >
+        Two line text string with two actions. One to two lines is preferable on
+        mobile.
+      </Banner>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders visible banner, without action buttons and with image', () => {
+  const tree = renderer
+    .create(
+      <Banner
+        visible
+        image={({ size }) => (
+          <Image
+            source={{ uri: 'https://callstack.com/images/team/Satya.png' }}
+            style={{ width: size, height: size }}
+          />
+        )}
+        actions={[]}
+      >
+        Two line text string with two actions. One to two lines is preferable on
+        mobile.
+      </Banner>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders visible banner, with action buttons and with image', () => {
+  const tree = renderer
+    .create(
+      <Banner
+        visible
+        image={({ size }) => (
+          <Image
+            source={{ uri: 'https://callstack.com/images/team/Satya.png' }}
+            style={{ width: size, height: size }}
+          />
+        )}
+        actions={[{ label: 'first', onPress: () => {} }]}
+      >
+        Two line text string with two actions. One to two lines is preferable on
+        mobile.
+      </Banner>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('render visible banner, with custom theme', () => {
+  const tree = renderer
+    .create(
+      <Banner
+        visible
+        theme={{
+          colors: {
+            text: '#00f',
+            surface: '#ccc',
+            primary: '#043',
+          },
+        }}
+        actions={[{ label: 'first', onPress: () => {} }]}
+      >
+        Custom theme
+      </Banner>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/BottomNavigation.test.js b/node_modules/react-native-paper/src/components/__tests__/BottomNavigation.test.js
new file mode 100644
index 0000000..fe25ff0
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/BottomNavigation.test.js
@@ -0,0 +1,214 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import { render } from 'react-native-testing-library';
+import renderer from 'react-test-renderer';
+import BottomNavigation from '../BottomNavigation/BottomNavigation.tsx';
+import BottomNavigationRouteScreen from '../BottomNavigation/BottomNavigationRouteScreen.tsx';
+import { red300 } from '../../styles/colors';
+
+const styles = StyleSheet.create({
+  bgColor: {
+    color: red300,
+  },
+});
+
+// Make sure any animation finishes before checking the snapshot results
+jest.mock('react-native', () => {
+  const RN = jest.requireActual('react-native');
+
+  RN.Animated.timing = (value, config) => ({
+    start: (callback) => {
+      value.setValue(config.toValue);
+      callback && callback({ finished: true });
+    },
+  });
+
+  return RN;
+});
+
+const icons = ['magnify', 'camera', 'inbox', 'heart', 'shopping-music'];
+
+const createState = (index, length) => ({
+  index,
+  routes: Array.from({ length }, (_, i) => ({
+    key: `key-${i}`,
+    icon: icons[i],
+    title: `Route: ${i}`,
+  })),
+});
+
+it('renders shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting
+        navigationState={createState(0, 5)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders non-shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting={false}
+        navigationState={createState(0, 3)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders custom icon and label in shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting
+        navigationState={createState(0, 5)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+        renderIcon={({ route, color }) => (
+          <icon color={color}>{route.icon}</icon>
+        )}
+        renderLabel={({ route, color }) => (
+          <text color={color}>{route.label}</text>
+        )}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders custom icon and label in non-shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting={false}
+        navigationState={createState(0, 3)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+        renderIcon={({ route, color }) => (
+          <icon color={color}>{route.icon}</icon>
+        )}
+        renderLabel={({ route, color }) => (
+          <text color={color}>{route.label}</text>
+        )}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders custom icon and label with custom colors in shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting
+        navigationState={createState(0, 3)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+        activeColor="#FBF7DB"
+        inactiveColor="#853D4B"
+        barStyle={styles.bgColor}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders custom icon and label with custom colors in non-shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting={false}
+        navigationState={createState(0, 3)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+        activeColor="#FBF7DB"
+        inactiveColor="#853D4B"
+        barStyle={styles.bgColor}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('hides labels in shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting
+        labeled={false}
+        navigationState={createState(0, 3)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('hides labels in non-shifting bottom navigation', () => {
+  const tree = renderer
+    .create(
+      <BottomNavigation
+        shifting={false}
+        labeled={false}
+        navigationState={createState(0, 3)}
+        onIndexChange={jest.fn()}
+        renderScene={({ route }) => route.title}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('should have appropriate display style according to the visibility', () => {
+  const { getByTestId, rerender } = render(
+    <BottomNavigationRouteScreen visibility={1} index={0} />
+  );
+
+  const wrapper = getByTestId('RouteScreen: 0');
+
+  expect(wrapper.props.style).toEqual(
+    expect.arrayContaining([expect.objectContaining({ display: 'flex' })])
+  );
+
+  rerender(<BottomNavigationRouteScreen visibility={0} index={0} />);
+
+  expect(wrapper.props.style).toEqual(
+    expect.arrayContaining([expect.objectContaining({ display: 'none' })])
+  );
+});
+
+it('should have labelMaxFontSizeMultiplier passed to label', () => {
+  const labelMaxFontSizeMultiplier = 2;
+  const { getAllByText } = render(
+    <BottomNavigation
+      shifting={false}
+      labeled={true}
+      labelMaxFontSizeMultiplier={labelMaxFontSizeMultiplier}
+      navigationState={createState(0, 3)}
+      onIndexChange={jest.fn()}
+      renderScene={({ route }) => route.title}
+    />
+  );
+
+  const label = getAllByText('Route: 0')[0];
+
+  expect(label.props.maxFontSizeMultiplier).toBe(labelMaxFontSizeMultiplier);
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Button.test.js b/node_modules/react-native-paper/src/components/__tests__/Button.test.js
new file mode 100644
index 0000000..dc7e4cc
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Button.test.js
@@ -0,0 +1,115 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import Button from '../Button.tsx';
+import { pink500 } from '../../styles/colors.tsx';
+
+const styles = StyleSheet.create({
+  flexing: {
+    flexDirection: 'row-reverse',
+  },
+});
+
+it('renders text button by default', () => {
+  const tree = renderer.create(<Button>Text Button</Button>).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders text button with mode', () => {
+  const tree = renderer
+    .create(<Button mode="text">Text Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders outlined button with mode', () => {
+  const tree = renderer
+    .create(<Button mode="outlined">Outlined Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders contained contained with mode', () => {
+  const tree = renderer
+    .create(<Button mode="contained">Contained Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders button with icon', () => {
+  const tree = renderer
+    .create(<Button icon="camera">Icon Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders button with icon in reverse order', () => {
+  const tree = renderer
+    .create(
+      <Button icon="chevron-right" contentStyle={styles.flexing}>
+        Right Icon
+      </Button>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders loading button', () => {
+  const tree = renderer
+    .create(<Button loading>Loading Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders disabled button', () => {
+  const tree = renderer
+    .create(<Button disabled>Disabled Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders button with color', () => {
+  const tree = renderer
+    .create(<Button color={pink500}>Custom Button</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders button with custom testID', () => {
+  const tree = renderer
+    .create(<Button testID={'custom:testID'}>Button with custom testID</Button>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders button with an accessibility label', () => {
+  const tree = renderer
+    .create(
+      <Button accessibilityLabel={'label'}>
+        Button with accessibility label
+      </Button>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders button with an accessibility hint', () => {
+  const tree = renderer
+    .create(
+      <Button accessibilityHint={'hint'}>Button with accessibility hint</Button>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Card/Card.test.js b/node_modules/react-native-paper/src/components/__tests__/Card/Card.test.js
new file mode 100644
index 0000000..6e7e71a
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Card/Card.test.js
@@ -0,0 +1,26 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import { render } from 'react-native-testing-library';
+import Card from '../../Card/Card';
+
+describe('Card', () => {
+  it('renders an outlined card', () => {
+    const tree = renderer.create(<Card mode="outlined" />).toJSON();
+
+    expect(tree).toMatchSnapshot();
+  });
+
+  it('renders with a custom theme', () => {
+    const { getByA11yLabel } = render(
+      <Card
+        mode="outlined"
+        accessibilityLabel="card"
+        theme={{ colors: { surface: '#0000FF' } }}
+      />
+    );
+
+    expect(getByA11yLabel('card').props.style.backgroundColor).toEqual(
+      '#0000FF'
+    );
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Card/__snapshots__/Card.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/Card/__snapshots__/Card.test.js.snap
new file mode 100644
index 0000000..999596f
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Card/__snapshots__/Card.test.js.snap
@@ -0,0 +1,33 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Card renders an outlined card 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "borderColor": "rgba(0, 0, 0, 0.12)",
+      "borderRadius": 4,
+      "borderWidth": 1,
+      "elevation": 0,
+    }
+  }
+>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Object {
+        "flexGrow": 1,
+        "flexShrink": 1,
+      }
+    }
+  />
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/Checkbox/Checkbox.test.js b/node_modules/react-native-paper/src/components/__tests__/Checkbox/Checkbox.test.js
new file mode 100644
index 0000000..12b4e27
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Checkbox/Checkbox.test.js
@@ -0,0 +1,59 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import Checkbox from '../../Checkbox';
+
+it('renders checked Checkbox with onPress', () => {
+  const tree = renderer
+    .create(<Checkbox status="checked" onPress={() => {}} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders unchecked Checkbox with onPress', () => {
+  const tree = renderer
+    .create(<Checkbox status="unchecked" onPress={() => {}} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders indeterminate Checkbox', () => {
+  const tree = renderer
+    .create(<Checkbox status="indeterminate" onPress={() => {}} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders checked Checkbox with color', () => {
+  const tree = renderer
+    .create(<Checkbox status="checked" color="red" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders unchecked Checkbox with color', () => {
+  const tree = renderer
+    .create(<Checkbox status="checked" color="red" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders indeterminate Checkbox with color', () => {
+  const tree = renderer
+    .create(<Checkbox status="indeterminate" color="red" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders Checkbox with custom testID', () => {
+  const tree = renderer
+    .create(<Checkbox status="checked" testID={'custom:testID'} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Checkbox/CheckboxItem.test.js b/node_modules/react-native-paper/src/components/__tests__/Checkbox/CheckboxItem.test.js
new file mode 100644
index 0000000..88b6328
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Checkbox/CheckboxItem.test.js
@@ -0,0 +1,89 @@
+import * as React from 'react';
+import { Platform } from 'react-native';
+import renderer from 'react-test-renderer';
+import { render } from 'react-native-testing-library';
+import Checkbox from '../../Checkbox';
+
+it('renders unchecked', () => {
+  const tree = renderer
+    .create(<Checkbox.Item status="unchecked" label="Unchecked Button" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('can render the iOS checkbox on different platforms', () => {
+  Platform.OS = 'android';
+  const tree = renderer
+    .create(
+      <Checkbox.Item status="unchecked" label="iOS Checkbox" mode="ios" />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('can render the Android checkbox on different platforms', () => {
+  Platform.OS = 'ios';
+  const tree = renderer
+    .create(
+      <Checkbox.Item status="unchecked" label="iOS Checkbox" mode="android" />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('can render leading checkbox control', () => {
+  Platform.OS = 'ios';
+  const tree = renderer
+    .create(
+      <Checkbox.Item
+        label="Default with leading control"
+        status={'unchecked'}
+        mode="ios"
+        position="leading"
+      />
+    )
+    .toJSON();
+  expect(tree).toMatchSnapshot();
+});
+
+it('should have `accessibilityState={ checked: true }` when `status="checked"`', () => {
+  const { getByA11yState } = render(
+    <Checkbox.Item status="checked" label="Checked Button" />
+  );
+
+  const element = getByA11yState({ checked: true });
+  expect(element).toBeTruthy();
+});
+
+it('should have `accessibilityState={ checked: false }` when `status="unchecked"', () => {
+  const { getByA11yState } = render(
+    <Checkbox.Item status="unchecked" label="Unchecked Button" />
+  );
+
+  const element = getByA11yState({ checked: false });
+  expect(element).toBeTruthy();
+});
+
+it('should have `accessibilityState={ checked: false }` when `status="indeterminate"', () => {
+  const { getByA11yState } = render(
+    <Checkbox.Item status="indeterminate" label="Indeterminate Button" />
+  );
+
+  const element = getByA11yState({ checked: false });
+  expect(element).toBeTruthy();
+});
+
+it('disables the row when the prop disabled is true', () => {
+  const { getByA11yLabel } = render(
+    <Checkbox.Item accessibilityLabel="some checkbox" disabled />
+  );
+
+  const touchable = getByA11yLabel('some checkbox');
+
+  expect(touchable.props).toMatchObject({
+    accessibilityState: { disabled: true },
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Checkbox/__snapshots__/Checkbox.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/Checkbox/__snapshots__/Checkbox.test.js.snap
new file mode 100644
index 0000000..ca4d57a
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Checkbox/__snapshots__/Checkbox.test.js.snap
@@ -0,0 +1,436 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders Checkbox with custom testID 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": true,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+  testID="custom:testID"
+>
+  <View
+    style={
+      Object {
+        "opacity": 1,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders checked Checkbox with color 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": true,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 1,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "red",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders checked Checkbox with onPress 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": true,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 1,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders indeterminate Checkbox 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 1,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders indeterminate Checkbox with color 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 1,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "red",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders unchecked Checkbox with color 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": true,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 1,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "red",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders unchecked Checkbox with onPress 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 0,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/Checkbox/__snapshots__/CheckboxItem.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/Checkbox/__snapshots__/CheckboxItem.test.js.snap
new file mode 100644
index 0000000..e5b3832
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Checkbox/__snapshots__/CheckboxItem.test.js.snap
@@ -0,0 +1,567 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`can render leading checkbox control 1`] = `
+<View
+  accessibilityLabel="Default with leading control"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    importantForAccessibility="no-hide-descendants"
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="checkbox"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "padding": 6,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "opacity": 0,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#03dac4",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "right",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Default with leading control
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`can render the Android checkbox on different platforms 1`] = `
+<View
+  accessibilityLabel="iOS Checkbox"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    importantForAccessibility="no-hide-descendants"
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "left",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      iOS Checkbox
+    </Text>
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="checkbox"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "padding": 6,
+            "width": 36,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "transform": Array [
+              Object {
+                "scale": 1,
+              },
+            ],
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+        <View
+          style={
+            Array [
+              Object {
+                "bottom": 0,
+                "left": 0,
+                "position": "absolute",
+                "right": 0,
+                "top": 0,
+              },
+              Object {
+                "alignItems": "center",
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <View
+            style={
+              Object {
+                "borderColor": "rgba(0, 0, 0, 0.54)",
+                "borderWidth": 0,
+                "height": 14,
+                "width": 14,
+              }
+            }
+          />
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`can render the iOS checkbox on different platforms 1`] = `
+<View
+  accessibilityLabel="iOS Checkbox"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    importantForAccessibility="no-hide-descendants"
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "left",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      iOS Checkbox
+    </Text>
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="checkbox"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "padding": 6,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "opacity": 0,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#03dac4",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders unchecked 1`] = `
+<View
+  accessibilityLabel="Unchecked Button"
+  accessibilityRole="checkbox"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    importantForAccessibility="no-hide-descendants"
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "left",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Unchecked Button
+    </Text>
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="checkbox"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "padding": 6,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "opacity": 0,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#03dac4",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/Chip.test.js b/node_modules/react-native-paper/src/components/__tests__/Chip.test.js
new file mode 100644
index 0000000..584dedd
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Chip.test.js
@@ -0,0 +1,61 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import Chip from '../Chip.tsx';
+
+it('renders chip with onPress', () => {
+  const tree = renderer
+    .create(<Chip onPress={() => {}}>Example Chip</Chip>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders chip with icon', () => {
+  const tree = renderer
+    .create(<Chip icon="information">Example Chip</Chip>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders chip with close button', () => {
+  const tree = renderer
+    .create(
+      <Chip icon="information" onClose={() => {}}>
+        Example Chip
+      </Chip>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders chip with custom close button', () => {
+  const tree = renderer
+    .create(
+      <Chip icon="information" onClose={() => {}} closeIcon="arrow-down">
+        Example Chip
+      </Chip>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders outlined disabled chip', () => {
+  const tree = renderer
+    .create(
+      <Chip mode="outlined" disabled>
+        Example Chip
+      </Chip>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders selected chip', () => {
+  const tree = renderer.create(<Chip selected>Example Chip</Chip>).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/DataTable.test.js b/node_modules/react-native-paper/src/components/__tests__/DataTable.test.js
new file mode 100644
index 0000000..010739a
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/DataTable.test.js
@@ -0,0 +1,143 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import { render } from 'react-native-testing-library';
+import DataTable from '../DataTable/DataTable.tsx';
+
+it('renders data table header', () => {
+  const tree = renderer
+    .create(
+      <DataTable.Header>
+        <DataTable.Title>Dessert</DataTable.Title>
+        <DataTable.Title>Calories</DataTable.Title>
+      </DataTable.Header>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders data table title with sort icon', () => {
+  const tree = renderer
+    .create(
+      <DataTable.Title sortDirection="descending">Dessert</DataTable.Title>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders right aligned data table title', () => {
+  const tree = renderer
+    .create(<DataTable.Title numeric>Calories</DataTable.Title>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders data table title with press handler', () => {
+  const tree = renderer
+    .create(
+      <DataTable.Title sortDirection="descending" onPress={() => {}}>
+        Dessert
+      </DataTable.Title>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders data table cell', () => {
+  const tree = renderer
+    .create(<DataTable.Cell>Cupcake</DataTable.Cell>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders right aligned data table cell', () => {
+  const tree = renderer
+    .create(<DataTable.Cell numeric>356</DataTable.Cell>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders data table pagination', () => {
+  const tree = renderer
+    .create(
+      <DataTable.Pagination
+        page={3}
+        numberOfPages={15}
+        onPageChange={() => {}}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders data table pagination with label', () => {
+  const tree = renderer
+    .create(
+      <DataTable.Pagination
+        page={3}
+        numberOfPages={15}
+        onPageChange={() => {}}
+        label="11-20 of 150"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders data table pagination with fast-forward buttons', () => {
+  const { getByA11yLabel, toJSON } = render(
+    <DataTable.Pagination
+      page={3}
+      numberOfPages={15}
+      onPageChange={() => {}}
+      label="11-20 of 150"
+      showFastPaginationControls
+    />
+  );
+
+  expect(() => getByA11yLabel('page-first')).not.toThrow();
+  expect(() => getByA11yLabel('page-last')).not.toThrow();
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('renders data table pagination without options select', () => {
+  const { getByA11yLabel } = render(
+    <DataTable.Pagination
+      page={3}
+      numberOfPages={15}
+      onPageChange={() => {}}
+      label="11-20 of 150"
+      showFastPaginationControls
+    />
+  );
+
+  expect(() => getByA11yLabel('Options Select')).toThrow();
+});
+
+it('renders data table pagination with options select', () => {
+  const { getByA11yLabel, toJSON } = render(
+    <DataTable.Pagination
+      page={3}
+      numberOfPages={15}
+      onPageChange={() => {}}
+      label="11-20 of 150"
+      showFastPaginationControls
+      numberOfItemsPerPageList={[2, 4, 6]}
+      numberOfItemsPerPage={2}
+      onItemsPerPageChange={() => {}}
+      selectPageDropdownLabel={'Rows per page'}
+    />
+  );
+
+  expect(() => getByA11yLabel('Options Select')).not.toThrow();
+  expect(() => getByA11yLabel('selectPageDropdownLabel')).not.toThrow();
+
+  expect(toJSON()).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Drawer/DrawerSection.test.js b/node_modules/react-native-paper/src/components/__tests__/Drawer/DrawerSection.test.js
new file mode 100644
index 0000000..a61e531
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Drawer/DrawerSection.test.js
@@ -0,0 +1,18 @@
+import React from 'react';
+import { View } from 'react-native';
+import renderer from 'react-test-renderer';
+import DrawerSection from '../../Drawer/DrawerSection.tsx';
+
+describe('DrawerSection', () => {
+  it('renders properly', () => {
+    const tree = renderer
+      .create(
+        <DrawerSection>
+          <View />
+        </DrawerSection>
+      )
+      .toJSON();
+
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Drawer/__snapshots__/DrawerSection.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/Drawer/__snapshots__/DrawerSection.test.js.snap
new file mode 100644
index 0000000..98bb911
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Drawer/__snapshots__/DrawerSection.test.js.snap
@@ -0,0 +1,30 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`DrawerSection renders properly 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "marginBottom": 4,
+      },
+      undefined,
+    ]
+  }
+>
+  <View />
+  <View
+    style={
+      Array [
+        Object {
+          "backgroundColor": "rgba(0, 0, 0, 0.12)",
+          "height": 0.5,
+        },
+        undefined,
+        Object {
+          "marginTop": 4,
+        },
+      ]
+    }
+  />
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/DrawerItem.test.js b/node_modules/react-native-paper/src/components/__tests__/DrawerItem.test.js
new file mode 100644
index 0000000..99ec51f
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/DrawerItem.test.js
@@ -0,0 +1,27 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import DrawerItem from '../Drawer/DrawerItem.tsx';
+
+it('renders basic DrawerItem', () => {
+  const tree = renderer
+    .create(<DrawerItem onPress={() => {}} label="Example item" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders DrawerItem with icon', () => {
+  const tree = renderer
+    .create(<DrawerItem icon="information" label="Example item" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders active DrawerItem', () => {
+  const tree = renderer
+    .create(<DrawerItem icon="information" active label="Example item" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/FAB.test.js b/node_modules/react-native-paper/src/components/__tests__/FAB.test.js
new file mode 100644
index 0000000..58d3f3a
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/FAB.test.js
@@ -0,0 +1,68 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import FAB from '../FAB';
+
+it('renders normal FAB', () => {
+  const tree = renderer.create(<FAB onPress={() => {}} icon="plus" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders small FAB', () => {
+  const tree = renderer
+    .create(<FAB small onPress={() => {}} icon="plus" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders extended FAB', () => {
+  const tree = renderer
+    .create(<FAB onPress={() => {}} icon="plus" label="Add items" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders loading FAB', () => {
+  const tree = renderer
+    .create(<FAB onPress={() => {}} icon="plus" loading={true} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders disabled FAB', () => {
+  const tree = renderer
+    .create(<FAB onPress={() => {}} icon="plus" disabled />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders custom color for the icon and label of the FAB', () => {
+  const tree = renderer
+    .create(<FAB onPress={() => {}} icon="plus" color="#AA0114" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders not visible FAB', () => {
+  const { update, toJSON } = renderer.create(
+    <FAB onPress={() => {}} icon="plus" />
+  );
+  update(<FAB onPress={() => {}} icon="plus" visible={false} />);
+
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('renders visible FAB', () => {
+  const { update, toJSON } = renderer.create(
+    <FAB onPress={() => {}} icon="plus" visible={false} />
+  );
+
+  update(<FAB onPress={() => {}} icon="plus" visible={true} />);
+
+  expect(toJSON()).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/IconButton.test.js b/node_modules/react-native-paper/src/components/__tests__/IconButton.test.js
new file mode 100644
index 0000000..b1ae823
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/IconButton.test.js
@@ -0,0 +1,36 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import IconButton from '../IconButton.tsx';
+import { pink500 } from '../../styles/colors.tsx';
+
+it('renders icon button by default', () => {
+  const tree = renderer.create(<IconButton icon="camera" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders icon button with color', () => {
+  const tree = renderer
+    .create(<IconButton icon="camera" color={pink500} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders icon button with size', () => {
+  const tree = renderer.create(<IconButton icon="camera" size={30} />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders disabled icon button', () => {
+  const tree = renderer.create(<IconButton icon="camera" disabled />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders icon change animated', () => {
+  const tree = renderer.create(<IconButton icon="camera" animated />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/ListAccordion.test.js b/node_modules/react-native-paper/src/components/__tests__/ListAccordion.test.js
new file mode 100644
index 0000000..c72e396
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/ListAccordion.test.js
@@ -0,0 +1,90 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import ListAccordion from '../List/ListAccordion.tsx';
+import ListItem from '../List/ListItem.tsx';
+import ListIcon from '../List/ListIcon.tsx';
+import { red500 } from '../../styles/colors';
+
+const styles = StyleSheet.create({
+  coloring: {
+    color: red500,
+  },
+});
+
+it('renders list accordion with children', () => {
+  const tree = renderer
+    .create(
+      <ListAccordion
+        left={(props) => <ListIcon {...props} icon="folder" />}
+        title="Expandable list item"
+      >
+        <ListItem title="First Item" />
+      </ListAccordion>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders multiline list accordion', () => {
+  const tree = renderer
+    .create(
+      <ListAccordion
+        title="Expandable list item"
+        description="Describes the expandable list item"
+      >
+        <ListItem title="List item 1" />
+      </ListAccordion>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list accordion with left items', () => {
+  const tree = renderer
+    .create(
+      <ListAccordion
+        left={(props) => <ListIcon {...props} icon="star" />}
+        title="Accordion item 1"
+      >
+        <ListItem
+          left={(props) => <ListIcon {...props} icon="thumb-up" />}
+          title="List item 1"
+        />
+      </ListAccordion>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders expanded accordion', () => {
+  const tree = renderer
+    .create(
+      <ListAccordion title="Accordion item 1" expanded>
+        <ListItem title="List item 1" />
+      </ListAccordion>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list accordion with custom title and description styles', () => {
+  const tree = renderer
+    .create(
+      <ListAccordion
+        title="Accordion item 1"
+        description="Describes the expandable list item"
+        titleStyle={styles.coloring}
+        descriptionStyle={styles.coloring}
+      >
+        <ListItem title="List item 1" />
+      </ListAccordion>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/ListItem.test.js b/node_modules/react-native-paper/src/components/__tests__/ListItem.test.js
new file mode 100644
index 0000000..e924336
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/ListItem.test.js
@@ -0,0 +1,122 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import { Text, View } from 'react-native';
+import ListItem from '../List/ListItem.tsx';
+import ListIcon from '../List/ListIcon.tsx';
+import Chip from '../Chip';
+import { red500 } from '../../styles/colors';
+
+const styles = StyleSheet.create({
+  title: {
+    fontSize: 20,
+  },
+  description: {
+    color: red500,
+  },
+});
+
+it('renders list item with title and description', () => {
+  const tree = renderer
+    .create(
+      <ListItem title="First Item" description="Description for first item" />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list item with left item', () => {
+  const tree = renderer
+    .create(
+      <ListItem
+        title="First Item"
+        left={(props) => <ListIcon {...props} icon="folder" />}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list item with right item', () => {
+  const tree = renderer
+    .create(<ListItem title="First Item" right={() => <Text>GG</Text>} />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list item with left and right items', () => {
+  const tree = renderer
+    .create(
+      <ListItem
+        title="First Item"
+        description="Item description"
+        left={() => <Text>GG</Text>}
+        right={(props) => <ListIcon {...props} icon="folder" />}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list item with custom title and description styles', () => {
+  const tree = renderer
+    .create(
+      <ListItem
+        title="First Item"
+        description="Item description"
+        titleStyle={styles.title}
+        descriptionStyle={styles.description}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list item with custom description', () => {
+  const tree = renderer
+    .create(
+      <ListItem
+        title="List Item with custom description"
+        description={({ ellipsizeMode, color: descriptionColor, fontSize }) => (
+          <View>
+            <Text
+              numberOfLines={2}
+              ellipsizeMode={ellipsizeMode}
+              style={{ color: descriptionColor, fontSize }}
+            >
+              React Native Paper is a high-quality, standard-compliant Design
+              Design library that has you covered in all major use-cases.
+            </Text>
+            <View>
+              <Chip icon="file-pdf" onPress={() => {}}>
+                DOCS.pdf
+              </Chip>
+            </View>
+          </View>
+        )}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders with a description with typeof number', () => {
+  const tree = renderer
+    .create(
+      <ListItem
+        title="First Item"
+        description={123}
+        titleStyle={styles.title}
+        descriptionStyle={styles.description}
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/ListSection.test.js b/node_modules/react-native-paper/src/components/__tests__/ListSection.test.js
new file mode 100644
index 0000000..e2cc833
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/ListSection.test.js
@@ -0,0 +1,72 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import ListSection from '../List/ListSection.tsx';
+import ListItem from '../List/ListItem.tsx';
+import ListIcon from '../List/ListIcon.tsx';
+import ListSubheader from '../List/ListSubheader.tsx';
+import { red500 } from '../../styles/colors';
+
+const styles = StyleSheet.create({
+  itemColor: {
+    color: red500,
+  },
+});
+
+it('renders list section without subheader', () => {
+  const tree = renderer
+    .create(
+      <ListSection>
+        <ListItem
+          title="First Item"
+          left={(props) => <ListIcon {...props} icon="folder" />}
+        />
+        <ListItem
+          title="Second Item"
+          left={(props) => <ListIcon {...props} icon="folder" />}
+        />
+      </ListSection>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list section with subheader', () => {
+  const tree = renderer
+    .create(
+      <ListSection>
+        <ListSubheader>Some title</ListSubheader>
+        <ListItem
+          title="First Item"
+          left={(props) => <ListIcon {...props} icon="folder" />}
+        />
+        <ListItem
+          title="Second Item"
+          left={(props) => <ListIcon {...props} icon="folder" />}
+        />
+      </ListSection>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders list section with custom title style', () => {
+  const tree = renderer
+    .create(
+      <ListSection title="Some title" titleStyle={styles.itemColor}>
+        <ListItem
+          title="First Item"
+          left={(props) => <ListIcon {...props} icon="folder" />}
+        />
+        <ListItem
+          title="Second Item"
+          left={(props) => <ListIcon {...props} icon="folder" />}
+        />
+      </ListSection>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Menu.test.js b/node_modules/react-native-paper/src/components/__tests__/Menu.test.js
new file mode 100644
index 0000000..f264ae0
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Menu.test.js
@@ -0,0 +1,64 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import Menu from '../Menu/Menu.tsx';
+import Button from '../Button.tsx';
+
+const styles = StyleSheet.create({
+  contentStyle: {
+    borderTopLeftRadius: 0,
+    borderTopRightRadius: 0,
+  },
+});
+
+it('renders visible menu', () => {
+  const tree = renderer
+    .create(
+      <Menu
+        visible
+        onDismiss={jest.fn()}
+        anchor={<Button mode="outlined">Open menu</Button>}
+      >
+        <Menu.Item onPress={jest.fn()} title="Undo" />
+        <Menu.Item onPress={jest.fn()} title="Redo" />
+      </Menu>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders not visible menu', () => {
+  const tree = renderer
+    .create(
+      <Menu
+        visible={false}
+        onDismiss={jest.fn()}
+        anchor={<Button mode="outlined">Open menu</Button>}
+      >
+        <Menu.Item onPress={jest.fn()} title="Undo" />
+        <Menu.Item onPress={jest.fn()} title="Redo" />
+      </Menu>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders menu with content styles', () => {
+  const tree = renderer
+    .create(
+      <Menu
+        visible
+        onDismiss={jest.fn()}
+        anchor={<Button mode="outlined">Open menu</Button>}
+        contentStyle={styles.contentStyle}
+      >
+        <Menu.Item onPress={jest.fn()} title="Undo" />
+        <Menu.Item onPress={jest.fn()} title="Redo" />
+      </Menu>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Portal.test.js b/node_modules/react-native-paper/src/components/__tests__/Portal.test.js
new file mode 100644
index 0000000..b1f067e
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Portal.test.js
@@ -0,0 +1,21 @@
+import * as React from 'react';
+import { render, waitForElement } from 'react-native-testing-library';
+import { Text } from 'react-native';
+import Portal from '../Portal/Portal.tsx';
+
+jest.useRealTimers();
+
+it('renders portal with siblings', async () => {
+  const { toJSON, getByTestId } = render(
+    <Portal.Host>
+      <Text>Outside content</Text>
+      <Portal>
+        <Text testID="content">Portal content</Text>
+      </Portal>
+    </Portal.Host>
+  );
+
+  await waitForElement(() => getByTestId('content'));
+
+  expect(toJSON()).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/ProgressBar.test.js b/node_modules/react-native-paper/src/components/__tests__/ProgressBar.test.js
new file mode 100644
index 0000000..eabe9cb
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/ProgressBar.test.js
@@ -0,0 +1,48 @@
+import * as React from 'react';
+import { View } from 'react-native';
+import { act } from 'react-native-testing-library';
+import renderer from 'react-test-renderer';
+import ProgressBar from '../ProgressBar.tsx';
+
+const layoutEvent = {
+  nativeEvent: {
+    layout: {
+      width: 100,
+    },
+  },
+};
+
+it('renders progress bar with specific progress', () => {
+  const tree = renderer.create(<ProgressBar progress={0.2} />);
+  act(() => {
+    tree.root.findByType(View).props.onLayout(layoutEvent);
+  });
+
+  expect(tree.toJSON()).toMatchSnapshot();
+});
+
+it('renders hidden progress bar', () => {
+  const tree = renderer.create(<ProgressBar progress={0.2} visible={false} />);
+  act(() => {
+    tree.root.findByType(View).props.onLayout(layoutEvent);
+  });
+
+  expect(tree.toJSON()).toMatchSnapshot();
+});
+
+it('renders colored progress bar', () => {
+  const tree = renderer.create(<ProgressBar progress={0.2} color="red" />);
+  act(() => {
+    tree.root.findByType(View).props.onLayout(layoutEvent);
+  });
+
+  expect(tree.toJSON()).toMatchSnapshot();
+});
+
+it('renders indeterminate progress bar', () => {
+  const tree = renderer.create(<ProgressBar indeterminate />);
+  act(() => {
+    tree.root.findByType(View).props.onLayout(layoutEvent);
+  });
+  expect(tree.toJSON()).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButton.test.js b/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButton.test.js
new file mode 100644
index 0000000..bd7f435
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButton.test.js
@@ -0,0 +1,72 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import { RadioButtonContext } from '../../RadioButton/RadioButtonGroup';
+import RadioButton from '../../RadioButton';
+
+describe('RadioButton', () => {
+  afterEach(() => jest.resetModules());
+
+  describe('on default platform', () => {
+    beforeAll(() => {
+      jest.mock('react-native', () => {
+        const RN = jest.requireActual('react-native');
+
+        RN.Platform = () => ({
+          select: (objs) => objs.default,
+        });
+
+        return RN;
+      });
+    });
+
+    it('renders properly', () => {
+      const tree = renderer.create(<RadioButton value="first" />).toJSON();
+
+      expect(tree).toMatchSnapshot();
+    });
+  });
+
+  describe('on ios platform', () => {
+    beforeAll(() => {
+      jest.mock('react-native', () => {
+        const RN = jest.requireActual('react-native');
+
+        RN.Platform = () => ({
+          select: (objs) => objs.ios,
+        });
+
+        return RN;
+      });
+    });
+
+    it('renders properly', () => {
+      const tree = renderer.create(<RadioButton value="first" />).toJSON();
+
+      expect(tree).toMatchSnapshot();
+    });
+  });
+
+  describe('when RadioButton is wrapped by RadioButtonContext.Provider', () => {
+    it('renders properly', () => {
+      const tree = renderer
+        .create(
+          <RadioButtonContext.Provider value="first" onValueChange={() => {}}>
+            <RadioButton value="first" />
+          </RadioButtonContext.Provider>
+        )
+        .toJSON();
+
+      expect(tree).toMatchSnapshot();
+    });
+  });
+
+  describe('RadioButton with custom testID', () => {
+    it('renders properly', () => {
+      const tree = renderer
+        .create(<RadioButton value="first" testID={'custom:testID'} />)
+        .toJSON();
+
+      expect(tree).toMatchSnapshot();
+    });
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButtonGroup.test.js b/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButtonGroup.test.js
new file mode 100644
index 0000000..b204f43
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButtonGroup.test.js
@@ -0,0 +1,17 @@
+import React from 'react';
+import renderer from 'react-test-renderer';
+import RadioButton from '../../RadioButton';
+
+describe('RadioButtonGroup', () => {
+  it('renders properly', () => {
+    const tree = renderer
+      .create(
+        <RadioButton.Group value="first" onValueChange={() => {}}>
+          <RadioButton value="first" />
+        </RadioButton.Group>
+      )
+      .toJSON();
+
+    expect(tree).toMatchSnapshot();
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButtonItem.test.js b/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButtonItem.test.js
new file mode 100644
index 0000000..e1e4263
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/RadioButton/RadioButtonItem.test.js
@@ -0,0 +1,66 @@
+import * as React from 'react';
+import { Platform } from 'react-native';
+import renderer from 'react-test-renderer';
+import RadioButton from '../../RadioButton';
+
+it('renders unchecked', () => {
+  const tree = renderer
+    .create(
+      <RadioButton.Item
+        status="unchecked"
+        label="Unchecked Button"
+        value="unchecked"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('can render the iOS radio button on different platforms', () => {
+  Platform.OS = 'android';
+  const tree = renderer
+    .create(
+      <RadioButton.Item
+        status="unchecked"
+        label="iOS Radio button"
+        mode="ios"
+        value="ios"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('can render the Android radio button on different platforms', () => {
+  Platform.OS = 'ios';
+  const tree = renderer
+    .create(
+      <RadioButton.Item
+        status="unchecked"
+        label="iOS Checkbox"
+        mode="android"
+        value="android"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('can render leading radio button control', () => {
+  Platform.OS = 'ios';
+  const tree = renderer
+    .create(
+      <RadioButton.Item
+        label="Default with leading control"
+        status={'unchecked'}
+        value="iOS"
+        position="leading"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButton.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButton.test.js.snap
new file mode 100644
index 0000000..cbd500b
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButton.test.js.snap
@@ -0,0 +1,250 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`RadioButton RadioButton with custom testID renders properly 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="radio"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+  testID="custom:testID"
+>
+  <View
+    style={
+      Object {
+        "opacity": 0,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`RadioButton on default platform renders properly 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="radio"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 0,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`RadioButton on ios platform renders properly 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="radio"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 0,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`RadioButton when RadioButton is wrapped by RadioButtonContext.Provider renders properly 1`] = `
+<View
+  accessibilityLiveRegion="polite"
+  accessibilityRole="radio"
+  accessibilityState={
+    Object {
+      "checked": false,
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Object {
+        "borderRadius": 18,
+        "padding": 6,
+      },
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "opacity": 0,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      allowFontScaling={false}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#03dac4",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButtonGroup.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButtonGroup.test.js.snap
new file mode 100644
index 0000000..dcfb1ad
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButtonGroup.test.js.snap
@@ -0,0 +1,67 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`RadioButtonGroup renders properly 1`] = `
+<View
+  accessibilityRole="radiogroup"
+>
+  <View
+    accessibilityLiveRegion="polite"
+    accessibilityRole="radio"
+    accessibilityState={
+      Object {
+        "checked": true,
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "padding": 6,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "opacity": 1,
+        }
+      }
+    >
+      <Text
+        accessibilityElementsHidden={true}
+        allowFontScaling={false}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "#03dac4",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButtonItem.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButtonItem.test.js.snap
new file mode 100644
index 0000000..3980e16
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/RadioButton/__snapshots__/RadioButtonItem.test.js.snap
@@ -0,0 +1,480 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`can render leading radio button control 1`] = `
+<View
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="radio"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "padding": 6,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "opacity": 0,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#03dac4",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "right",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Default with leading control
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`can render the Android radio button on different platforms 1`] = `
+<View
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "left",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      iOS Checkbox
+    </Text>
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="radio"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "borderColor": "rgba(0, 0, 0, 0.54)",
+            "borderRadius": 10,
+            "borderWidth": 2,
+            "height": 20,
+            "margin": 8,
+            "width": 20,
+          }
+        }
+      />
+    </View>
+  </View>
+</View>
+`;
+
+exports[`can render the iOS radio button on different platforms 1`] = `
+<View
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "left",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      iOS Radio button
+    </Text>
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="radio"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "padding": 6,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "opacity": 0,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#03dac4",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders unchecked 1`] = `
+<View
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      undefined,
+    ]
+  }
+>
+  <View
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "justifyContent": "space-between",
+          "paddingHorizontal": 16,
+          "paddingVertical": 8,
+        },
+        undefined,
+      ]
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flexGrow": 1,
+              "flexShrink": 1,
+              "fontSize": 16,
+            },
+            Object {
+              "color": "#000000",
+              "textAlign": "left",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Unchecked Button
+    </Text>
+    <View
+      accessibilityLiveRegion="polite"
+      accessibilityRole="radio"
+      accessibilityState={
+        Object {
+          "checked": false,
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "padding": 6,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "opacity": 0,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          allowFontScaling={false}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#03dac4",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/Searchbar.test.js b/node_modules/react-native-paper/src/components/__tests__/Searchbar.test.js
new file mode 100644
index 0000000..1d17e51
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Searchbar.test.js
@@ -0,0 +1,17 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import Searchbar from '../Searchbar.tsx';
+
+it('renders with placeholder', () => {
+  const tree = renderer.create(<Searchbar placeholder="Search" />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders with text', () => {
+  const tree = renderer
+    .create(<Searchbar placeholder="Search" value="query" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Snackbar.test.js b/node_modules/react-native-paper/src/components/__tests__/Snackbar.test.js
new file mode 100644
index 0000000..0b66ac5
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Snackbar.test.js
@@ -0,0 +1,70 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import { Text } from 'react-native';
+import Snackbar from '../Snackbar.tsx';
+
+// Make sure any animation finishes before checking the snapshot results
+jest.mock('react-native', () => {
+  const RN = jest.requireActual('react-native');
+
+  RN.Animated.timing = (value, config) => ({
+    start: (callback) => {
+      value.setValue(config.toValue);
+      callback && callback({ finished: true });
+    },
+  });
+
+  return RN;
+});
+
+it('renders snackbar with content', () => {
+  const tree = renderer
+    .create(
+      <Snackbar visible onDismiss={jest.fn()}>
+        Snackbar content
+      </Snackbar>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders not visible snackbar with content wrapper but no actual content', () => {
+  const tree = renderer
+    .create(
+      <Snackbar visible={false} onDismiss={jest.fn()}>
+        Snackbar content
+      </Snackbar>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders snackbar with Text as a child', () => {
+  const tree = renderer
+    .create(
+      <Snackbar visible onDismiss={jest.fn()}>
+        <Text>Snackbar content</Text>
+      </Snackbar>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders snackbar with action button', () => {
+  const tree = renderer
+    .create(
+      <Snackbar
+        visible
+        onDismiss={() => {}}
+        action={{ label: 'Undo', onPress: jest.fn() }}
+      >
+        Snackbar content
+      </Snackbar>
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Switch.test.js b/node_modules/react-native-paper/src/components/__tests__/Switch.test.js
new file mode 100644
index 0000000..92910cd
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Switch.test.js
@@ -0,0 +1,28 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import Switch from '../Switch.tsx';
+import { pink500 } from '../../styles/colors.tsx';
+
+it('renders on switch', () => {
+  const tree = renderer.create(<Switch value />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders off switch', () => {
+  const tree = renderer.create(<Switch value={false} />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders disabled switch', () => {
+  const tree = renderer.create(<Switch disabled value />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders switch with color', () => {
+  const tree = renderer.create(<Switch value color={pink500} />).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/TextInput.test.js b/node_modules/react-native-paper/src/components/__tests__/TextInput.test.js
new file mode 100644
index 0000000..a1b04c6
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/TextInput.test.js
@@ -0,0 +1,230 @@
+import * as React from 'react';
+import { StyleSheet, Text, Platform } from 'react-native';
+import { fireEvent, render } from 'react-native-testing-library';
+import TextInput from '../TextInput/TextInput';
+import { red500 } from '../../styles/colors';
+
+const style = StyleSheet.create({
+  inputStyle: {
+    color: red500,
+  },
+  centered: {
+    textAlign: 'center',
+  },
+  height: {
+    height: 100,
+  },
+});
+
+const affixTextValue = '/100';
+it('correctly renders left-side icon adornment, and right-side affix adornment', () => {
+  const { getByText, getByTestId, toJSON } = render(
+    <TextInput
+      label="Flat input"
+      placeholder="Type something"
+      value={'Some test value'}
+      onChangeText={(text) => this.setState({ text })}
+      left={
+        <TextInput.Icon
+          name="heart"
+          onPress={() => {
+            console.log('!@# press left');
+          }}
+        />
+      }
+      right={
+        <TextInput.Affix text={affixTextValue} textStyle={style.inputStyle} />
+      }
+    />
+  );
+  expect(() => getByText(affixTextValue)).not.toThrow();
+  expect(() => getByTestId('left-icon-adornment')).not.toThrow();
+  expect(() => getByTestId('right-affix-adornment')).not.toThrow();
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('correctly renders left-side icon adornment, and right-side affix adornment ', () => {
+  const { getByText, getByTestId, toJSON } = render(
+    <TextInput
+      label="Flat input"
+      placeholder="Type something"
+      value={'Some test value'}
+      onChangeText={(text) => this.setState({ text })}
+      left={
+        <TextInput.Affix text={affixTextValue} textStyle={style.inputStyle} />
+      }
+      right={
+        <TextInput.Icon
+          name="heart"
+          onPress={() => {
+            console.log('!@# press left');
+          }}
+        />
+      }
+    />
+  );
+  expect(() => getByText(affixTextValue)).not.toThrow();
+  expect(() => getByTestId('right-icon-adornment')).not.toThrow();
+  expect(() => getByTestId('left-affix-adornment')).not.toThrow();
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('correctly applies default textAlign based on default RTL', () => {
+  const { toJSON } = render(
+    <TextInput
+      label="Flat input"
+      placeholder="Type something"
+      value={'Some test value'}
+    />
+  );
+
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('correctly applies textAlign center', () => {
+  const { toJSON } = render(
+    <TextInput
+      label="Flat input"
+      placeholder="Type something"
+      value={'Some test value'}
+      style={style.centered}
+    />
+  );
+
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('correctly applies height to multiline Outline TextInput', () => {
+  const { toJSON } = render(
+    <TextInput
+      mode="outlined"
+      label="Outline Input"
+      placeholder="Type Something"
+      value={'Some test value'}
+      style={style.height}
+      multiline
+    />
+  );
+
+  expect(toJSON()).toMatchSnapshot();
+});
+
+it('correctly applies error state Outline TextInput', () => {
+  const { getByTestId } = render(
+    <TextInput
+      mode="outlined"
+      label="Outline Input with error"
+      placeholder="Type Something"
+      value={'Some test value'}
+      error
+    />
+  );
+
+  const outline = getByTestId('text-input-outline');
+  expect(outline.props.style).toEqual(
+    expect.arrayContaining([expect.objectContaining({ borderWidth: 1 })])
+  );
+});
+
+it('correctly applies focused state Outline TextInput', () => {
+  const { getByTestId } = render(
+    <TextInput
+      mode="outlined"
+      label="Outline Input with error"
+      placeholder="Type Something"
+      value={'Some test value'}
+      error
+    />
+  );
+
+  const outline = getByTestId('text-input-outline');
+  expect(outline.props.style).toEqual(
+    expect.arrayContaining([expect.objectContaining({ borderWidth: 1 })])
+  );
+
+  fireEvent(getByTestId('text-input-outlined'), 'focus');
+
+  expect(outline.props.style).toEqual(
+    expect.arrayContaining([expect.objectContaining({ borderWidth: 2 })])
+  );
+});
+
+it('contains patch spacing for flat input when ios and multiline', () => {
+  Platform.OS = 'ios';
+  const { getByTestId } = render(
+    <TextInput
+      label="Flat input"
+      multiline
+      placeholder="Type something"
+      value={'Some test value'}
+      onChangeText={(text) => this.setState({ text })}
+    />
+  );
+  expect(() => getByTestId('patch-container')).not.toThrow();
+});
+
+it('correctly applies a component as the text label', () => {
+  const { toJSON } = render(
+    <TextInput
+      label={<Text style={style.inputStyle}>Flat input</Text>}
+      placeholder="Type something"
+      value={'Some test value'}
+    />
+  );
+
+  expect(toJSON()).toMatchSnapshot();
+});
+
+describe('maxFontSizeMultiplier', () => {
+  const createInput = (type, maxFontSizeMultiplier) => {
+    return (
+      <TextInput mode={type} maxFontSizeMultiplier={maxFontSizeMultiplier} />
+    );
+  };
+
+  it('should have default value in flat input', () => {
+    const { getByTestId } = render(createInput('flat'));
+
+    expect(getByTestId('text-input-flat').props.maxFontSizeMultiplier).toBe(
+      1.5
+    );
+  });
+
+  it('should have default value in outlined input', () => {
+    const { getByTestId } = render(createInput('outlined'));
+
+    expect(getByTestId('text-input-outlined').props.maxFontSizeMultiplier).toBe(
+      1.5
+    );
+  });
+
+  it('should have correct passed value in flat input', () => {
+    const { getByTestId } = render(createInput('flat', 2));
+
+    expect(getByTestId('text-input-flat').props.maxFontSizeMultiplier).toBe(2);
+  });
+
+  it('should have correct passed value in outlined input', () => {
+    const { getByTestId } = render(createInput('outlined', 2));
+
+    expect(getByTestId('text-input-outlined').props.maxFontSizeMultiplier).toBe(
+      2
+    );
+  });
+
+  it('should have passed null value in flat input', () => {
+    const { getByTestId } = render(createInput('flat', null));
+
+    expect(getByTestId('text-input-flat').props.maxFontSizeMultiplier).toBe(
+      null
+    );
+  });
+
+  it('should have passed null value in outlined input', () => {
+    const { getByTestId } = render(createInput('outlined', null));
+
+    expect(getByTestId('text-input-outlined').props.maxFontSizeMultiplier).toBe(
+      null
+    );
+  });
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/ToggleButton.test.js b/node_modules/react-native-paper/src/components/__tests__/ToggleButton.test.js
new file mode 100644
index 0000000..5506006
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/ToggleButton.test.js
@@ -0,0 +1,42 @@
+import * as React from 'react';
+import renderer from 'react-test-renderer';
+import ToggleButton from '../ToggleButton';
+
+it('renders toggle button', () => {
+  const tree = renderer
+    .create(<ToggleButton status="checked" onPress={() => {}} icon="heart" />)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders disabled toggle button', () => {
+  const tree = renderer
+    .create(
+      <ToggleButton
+        disabled
+        value="toggle"
+        status="checked"
+        onValueChange={() => {}}
+        icon="heart"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders unchecked toggle button', () => {
+  const tree = renderer
+    .create(
+      <ToggleButton
+        disabled
+        status="unchecked"
+        onValueChange={() => {}}
+        icon="heart"
+      />
+    )
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Typography/Caption.test.js b/node_modules/react-native-paper/src/components/__tests__/Typography/Caption.test.js
new file mode 100644
index 0000000..2dbe99c
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Typography/Caption.test.js
@@ -0,0 +1,26 @@
+import * as React from 'react';
+import { StyleSheet } from 'react-native';
+import renderer from 'react-test-renderer';
+import Caption from '../../Typography/Caption.tsx';
+import { red500 } from '../../../styles/colors';
+
+const style = StyleSheet.create({
+  caption: {
+    fontSize: 20,
+    color: red500,
+  },
+});
+
+it('renders caption with children as content', () => {
+  const tree = renderer.create(<Caption>Caption content</Caption>).toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
+
+it('renders caption applying style', () => {
+  const tree = renderer
+    .create(<Caption style={style.caption}>Big and red caption</Caption>)
+    .toJSON();
+
+  expect(tree).toMatchSnapshot();
+});
diff --git a/node_modules/react-native-paper/src/components/__tests__/Typography/__snapshots__/Caption.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/Typography/__snapshots__/Caption.test.js.snap
new file mode 100644
index 0000000..b5b98dd
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/Typography/__snapshots__/Caption.test.js.snap
@@ -0,0 +1,82 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders caption applying style 1`] = `
+<Text
+  style={
+    Array [
+      Object {
+        "color": "#000000",
+        "fontFamily": "System",
+        "fontWeight": "400",
+      },
+      Object {
+        "textAlign": "left",
+      },
+      Array [
+        Object {
+          "textAlign": "left",
+        },
+        Object {
+          "color": "rgba(0, 0, 0, 0.54)",
+          "fontFamily": "System",
+          "fontWeight": "400",
+          "writingDirection": "ltr",
+        },
+        Array [
+          Object {
+            "fontSize": 12,
+            "letterSpacing": 0.4,
+            "lineHeight": 20,
+            "marginVertical": 2,
+          },
+          Object {
+            "color": "#f44336",
+            "fontSize": 20,
+          },
+        ],
+      ],
+    ]
+  }
+>
+  Big and red caption
+</Text>
+`;
+
+exports[`renders caption with children as content 1`] = `
+<Text
+  style={
+    Array [
+      Object {
+        "color": "#000000",
+        "fontFamily": "System",
+        "fontWeight": "400",
+      },
+      Object {
+        "textAlign": "left",
+      },
+      Array [
+        Object {
+          "textAlign": "left",
+        },
+        Object {
+          "color": "rgba(0, 0, 0, 0.54)",
+          "fontFamily": "System",
+          "fontWeight": "400",
+          "writingDirection": "ltr",
+        },
+        Array [
+          Object {
+            "fontSize": 12,
+            "letterSpacing": 0.4,
+            "lineHeight": 20,
+            "marginVertical": 2,
+          },
+          undefined,
+        ],
+      ],
+    ]
+  }
+>
+  Caption content
+</Text>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ActivityIndicator.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ActivityIndicator.test.js.snap
new file mode 100644
index 0000000..9cccb93
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ActivityIndicator.test.js.snap
@@ -0,0 +1,761 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders colored indicator 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": true,
+    }
+  }
+  accessible={true}
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    collapsable={false}
+    style={
+      Object {
+        "height": 24,
+        "opacity": 1,
+        "width": 24,
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 24,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 24,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 12,
+              "overflow": "hidden",
+              "width": 24,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 24,
+                "transform": Array [
+                  Object {
+                    "translateY": 0,
+                  },
+                  Object {
+                    "rotate": "-165deg",
+                  },
+                ],
+                "width": 24,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 12,
+                  "overflow": "hidden",
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#FF0000",
+                    "borderRadius": 12,
+                    "borderWidth": 2.4,
+                    "height": 24,
+                    "width": 24,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 24,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 24,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 12,
+              "overflow": "hidden",
+              "top": 12,
+              "width": 24,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 24,
+                "transform": Array [
+                  Object {
+                    "translateY": -12,
+                  },
+                  Object {
+                    "rotate": "345deg",
+                  },
+                ],
+                "width": 24,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 12,
+                  "overflow": "hidden",
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#FF0000",
+                    "borderRadius": 12,
+                    "borderWidth": 2.4,
+                    "height": 24,
+                    "width": 24,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders hidden indicator 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": false,
+    }
+  }
+  accessible={true}
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    collapsable={false}
+    style={
+      Object {
+        "height": 24,
+        "opacity": 0,
+        "width": 24,
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 24,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 24,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 12,
+              "overflow": "hidden",
+              "width": 24,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 24,
+                "transform": Array [
+                  Object {
+                    "translateY": 0,
+                  },
+                  Object {
+                    "rotate": "-165deg",
+                  },
+                ],
+                "width": 24,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 12,
+                  "overflow": "hidden",
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#6200ee",
+                    "borderRadius": 12,
+                    "borderWidth": 2.4,
+                    "height": 24,
+                    "width": 24,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 24,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 24,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 12,
+              "overflow": "hidden",
+              "top": 12,
+              "width": 24,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 24,
+                "transform": Array [
+                  Object {
+                    "translateY": -12,
+                  },
+                  Object {
+                    "rotate": "345deg",
+                  },
+                ],
+                "width": 24,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 12,
+                  "overflow": "hidden",
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#6200ee",
+                    "borderRadius": 12,
+                    "borderWidth": 2.4,
+                    "height": 24,
+                    "width": 24,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders indicator 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": true,
+    }
+  }
+  accessible={true}
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    collapsable={false}
+    style={
+      Object {
+        "height": 24,
+        "opacity": 1,
+        "width": 24,
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 24,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 24,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 12,
+              "overflow": "hidden",
+              "width": 24,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 24,
+                "transform": Array [
+                  Object {
+                    "translateY": 0,
+                  },
+                  Object {
+                    "rotate": "-165deg",
+                  },
+                ],
+                "width": 24,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 12,
+                  "overflow": "hidden",
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#6200ee",
+                    "borderRadius": 12,
+                    "borderWidth": 2.4,
+                    "height": 24,
+                    "width": 24,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 24,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 24,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 12,
+              "overflow": "hidden",
+              "top": 12,
+              "width": 24,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 24,
+                "transform": Array [
+                  Object {
+                    "translateY": -12,
+                  },
+                  Object {
+                    "rotate": "345deg",
+                  },
+                ],
+                "width": 24,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 12,
+                  "overflow": "hidden",
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#6200ee",
+                    "borderRadius": 12,
+                    "borderWidth": 2.4,
+                    "height": 24,
+                    "width": 24,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders large indicator 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": true,
+    }
+  }
+  accessible={true}
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    collapsable={false}
+    style={
+      Object {
+        "height": 48,
+        "opacity": 1,
+        "width": 48,
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 48,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 48,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 24,
+              "overflow": "hidden",
+              "width": 48,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 48,
+                "transform": Array [
+                  Object {
+                    "translateY": 0,
+                  },
+                  Object {
+                    "rotate": "-165deg",
+                  },
+                ],
+                "width": 48,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 24,
+                  "overflow": "hidden",
+                  "width": 48,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#6200ee",
+                    "borderRadius": 24,
+                    "borderWidth": 4.8,
+                    "height": 48,
+                    "width": 48,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "bottom": 0,
+          "justifyContent": "center",
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "height": 48,
+            "transform": Array [
+              Object {
+                "rotate": "45deg",
+              },
+            ],
+            "width": 48,
+          }
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 24,
+              "overflow": "hidden",
+              "top": 24,
+              "width": 48,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "height": 48,
+                "transform": Array [
+                  Object {
+                    "translateY": -24,
+                  },
+                  Object {
+                    "rotate": "345deg",
+                  },
+                ],
+                "width": 48,
+              }
+            }
+          >
+            <View
+              collapsable={false}
+              style={
+                Object {
+                  "height": 24,
+                  "overflow": "hidden",
+                  "width": 48,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "borderColor": "#6200ee",
+                    "borderRadius": 24,
+                    "borderWidth": 4.8,
+                    "height": 48,
+                    "width": 48,
+                  }
+                }
+              />
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/AnimatedFAB.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/AnimatedFAB.test.js.snap
new file mode 100644
index 0000000..fa3bf66
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/AnimatedFAB.test.js.snap
@@ -0,0 +1,706 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders animated fab 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "position": "absolute",
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    style={
+      Object {
+        "borderRadius": 28,
+        "height": 56,
+        "transform": Array [
+          Object {
+            "scaleY": 1,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "elevation": 0,
+          },
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "borderRadius": 28,
+            "bottom": 0,
+            "elevation": 6,
+            "left": 0,
+            "opacity": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "width": 84,
+          }
+        }
+      />
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "borderRadius": 28,
+            "bottom": 0,
+            "elevation": 6,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "transform": Array [
+              Object {
+                "translateX": 28,
+              },
+            ],
+            "width": 56,
+          }
+        }
+      />
+    </View>
+    <View
+      pointerEvents="box-none"
+      style={
+        Object {
+          "borderRadius": 28,
+          "flexDirection": "row",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "backgroundColor": "#03dac4",
+            "borderRadius": 28,
+            "height": 56,
+            "left": 28,
+            "right": undefined,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+            ],
+            "width": 84,
+          }
+        }
+      >
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "disabled": undefined,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Array [
+              Object {
+                "overflow": "hidden",
+              },
+              Object {
+                "borderRadius": 28,
+              },
+            ]
+          }
+        >
+          <View
+            style={
+              Array [
+                Object {
+                  "borderRadius": 28,
+                  "height": 56,
+                },
+                Object {
+                  "width": 84,
+                },
+              ]
+            }
+          />
+        </View>
+      </View>
+    </View>
+  </View>
+  <View
+    pointerEvents="none"
+    style={
+      Object {
+        "alignItems": "center",
+        "height": 56,
+        "justifyContent": "center",
+        "left": 28,
+        "position": "absolute",
+        "right": undefined,
+        "transform": Array [
+          Object {
+            "translateX": 0,
+          },
+        ],
+        "width": 56,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "rgba(0, 0, 0, .54)",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+  <View
+    pointerEvents="none"
+  >
+    <Text
+      ellipsizeMode="tail"
+      numberOfLines={1}
+      onTextLayout={[Function]}
+      style={
+        Object {
+          "color": "rgba(0, 0, 0, .54)",
+          "fontFamily": "System",
+          "fontWeight": "500",
+          "minWidth": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 28,
+          "textAlign": "left",
+          "textTransform": "uppercase",
+          "top": -28,
+          "transform": Array [
+            Object {
+              "translateX": 56,
+            },
+          ],
+          "writingDirection": "ltr",
+        }
+      }
+    />
+  </View>
+</View>
+`;
+
+exports[`renders animated fab with label on the left 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "position": "absolute",
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    style={
+      Object {
+        "borderRadius": 28,
+        "height": 56,
+        "transform": Array [
+          Object {
+            "scaleY": 1,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "elevation": 0,
+          },
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "borderRadius": 28,
+            "bottom": 0,
+            "elevation": 6,
+            "left": 0,
+            "opacity": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "width": 84,
+          }
+        }
+      />
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "borderRadius": 28,
+            "bottom": 0,
+            "elevation": 6,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+            ],
+            "width": 56,
+          }
+        }
+      />
+    </View>
+    <View
+      pointerEvents="box-none"
+      style={
+        Object {
+          "borderRadius": 28,
+          "flexDirection": "row",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "backgroundColor": "#03dac4",
+            "borderRadius": 28,
+            "height": 56,
+            "left": -28,
+            "right": undefined,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+            ],
+            "width": 84,
+          }
+        }
+      >
+        <View
+          accessibilityLabel="text"
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "disabled": undefined,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Array [
+              Object {
+                "overflow": "hidden",
+              },
+              Object {
+                "borderRadius": 28,
+              },
+            ]
+          }
+        >
+          <View
+            style={
+              Array [
+                Object {
+                  "borderRadius": 28,
+                  "height": 56,
+                },
+                Object {
+                  "width": 84,
+                },
+              ]
+            }
+          />
+        </View>
+      </View>
+    </View>
+  </View>
+  <View
+    pointerEvents="none"
+    style={
+      Object {
+        "alignItems": "center",
+        "height": 56,
+        "justifyContent": "center",
+        "left": -28,
+        "position": "absolute",
+        "right": undefined,
+        "transform": Array [
+          Object {
+            "translateX": 28,
+          },
+        ],
+        "width": 56,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "rgba(0, 0, 0, .54)",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+  <View
+    pointerEvents="none"
+  >
+    <Text
+      ellipsizeMode="tail"
+      numberOfLines={1}
+      onTextLayout={[Function]}
+      style={
+        Object {
+          "color": "rgba(0, 0, 0, .54)",
+          "fontFamily": "System",
+          "fontWeight": "500",
+          "left": 28,
+          "minWidth": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "textAlign": "left",
+          "textTransform": "uppercase",
+          "top": -28,
+          "transform": Array [
+            Object {
+              "translateX": 56,
+            },
+          ],
+          "writingDirection": "ltr",
+        }
+      }
+    >
+      text
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders animated fab with label on the right by default 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "position": "absolute",
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    style={
+      Object {
+        "borderRadius": 28,
+        "height": 56,
+        "transform": Array [
+          Object {
+            "scaleY": 1,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "elevation": 0,
+          },
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "borderRadius": 28,
+            "bottom": 0,
+            "elevation": 6,
+            "left": 0,
+            "opacity": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "width": 84,
+          }
+        }
+      />
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "borderRadius": 28,
+            "bottom": 0,
+            "elevation": 6,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "transform": Array [
+              Object {
+                "translateX": 28,
+              },
+            ],
+            "width": 56,
+          }
+        }
+      />
+    </View>
+    <View
+      pointerEvents="box-none"
+      style={
+        Object {
+          "borderRadius": 28,
+          "flexDirection": "row",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "backgroundColor": "#03dac4",
+            "borderRadius": 28,
+            "height": 56,
+            "left": 28,
+            "right": undefined,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+            ],
+            "width": 84,
+          }
+        }
+      >
+        <View
+          accessibilityLabel="text"
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "disabled": undefined,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Array [
+              Object {
+                "overflow": "hidden",
+              },
+              Object {
+                "borderRadius": 28,
+              },
+            ]
+          }
+        >
+          <View
+            style={
+              Array [
+                Object {
+                  "borderRadius": 28,
+                  "height": 56,
+                },
+                Object {
+                  "width": 84,
+                },
+              ]
+            }
+          />
+        </View>
+      </View>
+    </View>
+  </View>
+  <View
+    pointerEvents="none"
+    style={
+      Object {
+        "alignItems": "center",
+        "height": 56,
+        "justifyContent": "center",
+        "left": 28,
+        "position": "absolute",
+        "right": undefined,
+        "transform": Array [
+          Object {
+            "translateX": 0,
+          },
+        ],
+        "width": 56,
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "rgba(0, 0, 0, .54)",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+  <View
+    pointerEvents="none"
+  >
+    <Text
+      ellipsizeMode="tail"
+      numberOfLines={1}
+      onTextLayout={[Function]}
+      style={
+        Object {
+          "color": "rgba(0, 0, 0, .54)",
+          "fontFamily": "System",
+          "fontWeight": "500",
+          "minWidth": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 28,
+          "textAlign": "left",
+          "textTransform": "uppercase",
+          "top": -28,
+          "transform": Array [
+            Object {
+              "translateX": 56,
+            },
+          ],
+          "writingDirection": "ltr",
+        }
+      }
+    >
+      text
+    </Text>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Avatar.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Avatar.test.js.snap
new file mode 100644
index 0000000..f4dfa2c
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Avatar.test.js.snap
@@ -0,0 +1,312 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders avatar with icon 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#6200ee",
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      },
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      Object {},
+    ]
+  }
+>
+  <Text
+    accessibilityElementsHidden={true}
+    importantForAccessibility="no-hide-descendants"
+    pointerEvents="none"
+    selectable={false}
+    style={
+      Array [
+        Object {
+          "backgroundColor": "transparent",
+        },
+        Object {
+          "color": "#ffffff",
+          "fontSize": 38.4,
+        },
+      ]
+    }
+  >
+    □
+  </Text>
+</View>
+`;
+
+exports[`renders avatar with icon and custom background color 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#f44336",
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      },
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      Object {},
+    ]
+  }
+>
+  <Text
+    accessibilityElementsHidden={true}
+    importantForAccessibility="no-hide-descendants"
+    pointerEvents="none"
+    selectable={false}
+    style={
+      Array [
+        Object {
+          "backgroundColor": "transparent",
+        },
+        Object {
+          "color": "#ffffff",
+          "fontSize": 38.4,
+        },
+      ]
+    }
+  >
+    □
+  </Text>
+</View>
+`;
+
+exports[`renders avatar with image 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#6200ee",
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      },
+      undefined,
+    ]
+  }
+>
+  <Image
+    source={
+      Object {
+        "src": "avatar.png",
+      }
+    }
+    style={
+      Object {
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      }
+    }
+  />
+</View>
+`;
+
+exports[`renders avatar with text 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#6200ee",
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      },
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      Object {},
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "textAlign": "center",
+            "textAlignVertical": "center",
+          },
+          Object {
+            "color": "#ffffff",
+            "fontSize": 32,
+            "lineHeight": 64,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    XD
+  </Text>
+</View>
+`;
+
+exports[`renders avatar with text and custom background color 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#f44336",
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      },
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      Object {},
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "textAlign": "center",
+            "textAlignVertical": "center",
+          },
+          Object {
+            "color": "#ffffff",
+            "fontSize": 32,
+            "lineHeight": 64,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    XD
+  </Text>
+</View>
+`;
+
+exports[`renders avatar with text and custom colors 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#6200ee",
+        "borderRadius": 32,
+        "height": 64,
+        "width": 64,
+      },
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      Object {},
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "textAlign": "center",
+            "textAlignVertical": "center",
+          },
+          Object {
+            "color": "#FFFFFF",
+            "fontSize": 32,
+            "lineHeight": 64,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    XD
+  </Text>
+</View>
+`;
+
+exports[`renders avatar with text and custom size 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "#6200ee",
+        "borderRadius": 48,
+        "height": 96,
+        "width": 96,
+      },
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+      },
+      Object {},
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "textAlign": "center",
+            "textAlignVertical": "center",
+          },
+          Object {
+            "color": "#ffffff",
+            "fontSize": 48,
+            "lineHeight": 96,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    XD
+  </Text>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Badge.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Badge.test.js.snap
new file mode 100644
index 0000000..2b97939
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Badge.test.js.snap
@@ -0,0 +1,134 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders badge 1`] = `
+<Text
+  numberOfLines={1}
+  style={
+    Object {
+      "alignSelf": "flex-end",
+      "backgroundColor": "#f50057",
+      "borderRadius": 10,
+      "color": "#ffffff",
+      "fontFamily": "System",
+      "fontSize": 10,
+      "fontWeight": "400",
+      "height": 20,
+      "lineHeight": 20,
+      "minWidth": 20,
+      "opacity": 1,
+      "overflow": "hidden",
+      "paddingHorizontal": 4,
+      "textAlign": "center",
+      "textAlignVertical": "center",
+    }
+  }
+/>
+`;
+
+exports[`renders badge as hidden 1`] = `
+<Text
+  numberOfLines={1}
+  style={
+    Object {
+      "alignSelf": "flex-end",
+      "backgroundColor": "#f50057",
+      "borderRadius": 6,
+      "color": "#ffffff",
+      "fontFamily": "System",
+      "fontSize": 6,
+      "fontWeight": "400",
+      "height": 12,
+      "lineHeight": 12,
+      "minWidth": 12,
+      "opacity": 0,
+      "overflow": "hidden",
+      "paddingHorizontal": 4,
+      "textAlign": "center",
+      "textAlignVertical": "center",
+    }
+  }
+>
+  3
+</Text>
+`;
+
+exports[`renders badge in different color 1`] = `
+<Text
+  numberOfLines={1}
+  style={
+    Object {
+      "alignSelf": "flex-end",
+      "backgroundColor": "#f44336",
+      "borderRadius": 10,
+      "color": "#ffffff",
+      "fontFamily": "System",
+      "fontSize": 10,
+      "fontWeight": "400",
+      "height": 20,
+      "lineHeight": 20,
+      "minWidth": 20,
+      "opacity": 1,
+      "overflow": "hidden",
+      "paddingHorizontal": 4,
+      "textAlign": "center",
+      "textAlignVertical": "center",
+    }
+  }
+>
+  3
+</Text>
+`;
+
+exports[`renders badge in different size 1`] = `
+<Text
+  numberOfLines={1}
+  style={
+    Object {
+      "alignSelf": "flex-end",
+      "backgroundColor": "#f50057",
+      "borderRadius": 6,
+      "color": "#ffffff",
+      "fontFamily": "System",
+      "fontSize": 6,
+      "fontWeight": "400",
+      "height": 12,
+      "lineHeight": 12,
+      "minWidth": 12,
+      "opacity": 1,
+      "overflow": "hidden",
+      "paddingHorizontal": 4,
+      "textAlign": "center",
+      "textAlignVertical": "center",
+    }
+  }
+>
+  3
+</Text>
+`;
+
+exports[`renders badge with content 1`] = `
+<Text
+  numberOfLines={1}
+  style={
+    Object {
+      "alignSelf": "flex-end",
+      "backgroundColor": "#f50057",
+      "borderRadius": 10,
+      "color": "#ffffff",
+      "fontFamily": "System",
+      "fontSize": 10,
+      "fontWeight": "400",
+      "height": 20,
+      "lineHeight": 20,
+      "minWidth": 20,
+      "opacity": 1,
+      "overflow": "hidden",
+      "paddingHorizontal": 4,
+      "textAlign": "center",
+      "textAlignVertical": "center",
+    }
+  }
+>
+  3
+</Text>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Banner.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Banner.test.js.snap
new file mode 100644
index 0000000..3212915
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Banner.test.js.snap
@@ -0,0 +1,996 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`render visible banner, with custom theme 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ccc",
+      "elevation": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 0.75,
+    }
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "alignSelf": "center",
+          "maxWidth": 960,
+          "overflow": "hidden",
+          "width": "100%",
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "height": 0,
+        }
+      }
+    />
+    <View
+      onLayout={[Function]}
+      style={Object {}}
+    >
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-start",
+            "marginBottom": 0,
+            "marginHorizontal": 8,
+            "marginTop": 16,
+          }
+        }
+      >
+        <Text
+          accessibilityLiveRegion="polite"
+          accessibilityRole="alert"
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "flex": 1,
+                  "margin": 8,
+                },
+                Object {
+                  "color": "#00f",
+                },
+              ],
+            ]
+          }
+        >
+          Custom theme
+        </Text>
+      </View>
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-end",
+            "margin": 4,
+          }
+        }
+      >
+        <View
+          style={
+            Object {
+              "backgroundColor": "transparent",
+              "borderColor": "transparent",
+              "borderRadius": 4,
+              "borderStyle": "solid",
+              "borderWidth": 0,
+              "elevation": 0,
+              "margin": 4,
+              "minWidth": "auto",
+              "shadowColor": "#000000",
+              "shadowOffset": Object {
+                "height": 0,
+                "width": 0,
+              },
+              "shadowOpacity": 0,
+              "shadowRadius": 0,
+            }
+          }
+        >
+          <View
+            accessibilityRole="button"
+            accessibilityState={
+              Object {
+                "disabled": undefined,
+              }
+            }
+            accessible={true}
+            focusable={true}
+            onClick={[Function]}
+            onResponderGrant={[Function]}
+            onResponderMove={[Function]}
+            onResponderRelease={[Function]}
+            onResponderTerminate={[Function]}
+            onResponderTerminationRequest={[Function]}
+            onStartShouldSetResponder={[Function]}
+            style={
+              Array [
+                Object {
+                  "overflow": "hidden",
+                },
+                Object {
+                  "borderRadius": 4,
+                },
+              ]
+            }
+          >
+            <View
+              style={
+                Array [
+                  Object {
+                    "alignItems": "center",
+                    "flexDirection": "row",
+                    "justifyContent": "center",
+                  },
+                  undefined,
+                ]
+              }
+            >
+              <Text
+                numberOfLines={1}
+                selectable={false}
+                style={
+                  Array [
+                    Object {
+                      "color": "#000000",
+                      "fontFamily": "System",
+                      "fontWeight": "400",
+                    },
+                    Object {
+                      "textAlign": "left",
+                    },
+                    Array [
+                      Object {
+                        "letterSpacing": 1,
+                        "marginHorizontal": 16,
+                        "marginVertical": 9,
+                        "textAlign": "center",
+                      },
+                      Object {
+                        "marginHorizontal": 8,
+                      },
+                      Object {
+                        "textTransform": "uppercase",
+                      },
+                      Object {
+                        "color": "#043",
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      Object {
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      undefined,
+                    ],
+                  ]
+                }
+              >
+                first
+              </Text>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders hidden banner, without action buttons and without image 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "elevation": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 0.75,
+    }
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "alignSelf": "center",
+          "maxWidth": 960,
+          "overflow": "hidden",
+          "width": "100%",
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "height": 0,
+        }
+      }
+    />
+    <View
+      onLayout={[Function]}
+      style={
+        Object {
+          "opacity": 0,
+          "position": "absolute",
+          "top": 0,
+          "transform": Array [
+            Object {
+              "translateY": -0,
+            },
+          ],
+          "width": "100%",
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-start",
+            "marginBottom": 0,
+            "marginHorizontal": 8,
+            "marginTop": 16,
+          }
+        }
+      >
+        <Text
+          accessibilityLiveRegion="none"
+          accessibilityRole="alert"
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "flex": 1,
+                  "margin": 8,
+                },
+                Object {
+                  "color": "#000000",
+                },
+              ],
+            ]
+          }
+        >
+          Two line text string with two actions. One to two lines is preferable on mobile.
+        </Text>
+      </View>
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-end",
+            "margin": 4,
+          }
+        }
+      />
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders visible banner, with action buttons and with image 1`] = `
+<View
+  image={[Function]}
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "elevation": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 0.75,
+    }
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "alignSelf": "center",
+          "maxWidth": 960,
+          "overflow": "hidden",
+          "width": "100%",
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "height": 0,
+        }
+      }
+    />
+    <View
+      onLayout={[Function]}
+      style={Object {}}
+    >
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-start",
+            "marginBottom": 0,
+            "marginHorizontal": 8,
+            "marginTop": 16,
+          }
+        }
+      >
+        <Text
+          accessibilityLiveRegion="polite"
+          accessibilityRole="alert"
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "flex": 1,
+                  "margin": 8,
+                },
+                Object {
+                  "color": "#000000",
+                },
+              ],
+            ]
+          }
+        >
+          Two line text string with two actions. One to two lines is preferable on mobile.
+        </Text>
+      </View>
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-end",
+            "margin": 4,
+          }
+        }
+      >
+        <View
+          style={
+            Object {
+              "backgroundColor": "transparent",
+              "borderColor": "transparent",
+              "borderRadius": 4,
+              "borderStyle": "solid",
+              "borderWidth": 0,
+              "elevation": 0,
+              "margin": 4,
+              "minWidth": "auto",
+              "shadowColor": "#000000",
+              "shadowOffset": Object {
+                "height": 0,
+                "width": 0,
+              },
+              "shadowOpacity": 0,
+              "shadowRadius": 0,
+            }
+          }
+        >
+          <View
+            accessibilityRole="button"
+            accessibilityState={
+              Object {
+                "disabled": undefined,
+              }
+            }
+            accessible={true}
+            focusable={true}
+            onClick={[Function]}
+            onResponderGrant={[Function]}
+            onResponderMove={[Function]}
+            onResponderRelease={[Function]}
+            onResponderTerminate={[Function]}
+            onResponderTerminationRequest={[Function]}
+            onStartShouldSetResponder={[Function]}
+            style={
+              Array [
+                Object {
+                  "overflow": "hidden",
+                },
+                Object {
+                  "borderRadius": 4,
+                },
+              ]
+            }
+          >
+            <View
+              style={
+                Array [
+                  Object {
+                    "alignItems": "center",
+                    "flexDirection": "row",
+                    "justifyContent": "center",
+                  },
+                  undefined,
+                ]
+              }
+            >
+              <Text
+                numberOfLines={1}
+                selectable={false}
+                style={
+                  Array [
+                    Object {
+                      "color": "#000000",
+                      "fontFamily": "System",
+                      "fontWeight": "400",
+                    },
+                    Object {
+                      "textAlign": "left",
+                    },
+                    Array [
+                      Object {
+                        "letterSpacing": 1,
+                        "marginHorizontal": 16,
+                        "marginVertical": 9,
+                        "textAlign": "center",
+                      },
+                      Object {
+                        "marginHorizontal": 8,
+                      },
+                      Object {
+                        "textTransform": "uppercase",
+                      },
+                      Object {
+                        "color": "#6200ee",
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      Object {
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      undefined,
+                    ],
+                  ]
+                }
+              >
+                first
+              </Text>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders visible banner, with action buttons and without image 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "elevation": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 0.75,
+    }
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "alignSelf": "center",
+          "maxWidth": 960,
+          "overflow": "hidden",
+          "width": "100%",
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "height": 0,
+        }
+      }
+    />
+    <View
+      onLayout={[Function]}
+      style={Object {}}
+    >
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-start",
+            "marginBottom": 0,
+            "marginHorizontal": 8,
+            "marginTop": 16,
+          }
+        }
+      >
+        <Text
+          accessibilityLiveRegion="polite"
+          accessibilityRole="alert"
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "flex": 1,
+                  "margin": 8,
+                },
+                Object {
+                  "color": "#000000",
+                },
+              ],
+            ]
+          }
+        >
+          Two line text string with two actions. One to two lines is preferable on mobile.
+        </Text>
+      </View>
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-end",
+            "margin": 4,
+          }
+        }
+      >
+        <View
+          style={
+            Object {
+              "backgroundColor": "transparent",
+              "borderColor": "transparent",
+              "borderRadius": 4,
+              "borderStyle": "solid",
+              "borderWidth": 0,
+              "elevation": 0,
+              "margin": 4,
+              "minWidth": "auto",
+              "shadowColor": "#000000",
+              "shadowOffset": Object {
+                "height": 0,
+                "width": 0,
+              },
+              "shadowOpacity": 0,
+              "shadowRadius": 0,
+            }
+          }
+        >
+          <View
+            accessibilityRole="button"
+            accessibilityState={
+              Object {
+                "disabled": undefined,
+              }
+            }
+            accessible={true}
+            focusable={true}
+            onClick={[Function]}
+            onResponderGrant={[Function]}
+            onResponderMove={[Function]}
+            onResponderRelease={[Function]}
+            onResponderTerminate={[Function]}
+            onResponderTerminationRequest={[Function]}
+            onStartShouldSetResponder={[Function]}
+            style={
+              Array [
+                Object {
+                  "overflow": "hidden",
+                },
+                Object {
+                  "borderRadius": 4,
+                },
+              ]
+            }
+          >
+            <View
+              style={
+                Array [
+                  Object {
+                    "alignItems": "center",
+                    "flexDirection": "row",
+                    "justifyContent": "center",
+                  },
+                  undefined,
+                ]
+              }
+            >
+              <Text
+                numberOfLines={1}
+                selectable={false}
+                style={
+                  Array [
+                    Object {
+                      "color": "#000000",
+                      "fontFamily": "System",
+                      "fontWeight": "400",
+                    },
+                    Object {
+                      "textAlign": "left",
+                    },
+                    Array [
+                      Object {
+                        "letterSpacing": 1,
+                        "marginHorizontal": 16,
+                        "marginVertical": 9,
+                        "textAlign": "center",
+                      },
+                      Object {
+                        "marginHorizontal": 8,
+                      },
+                      Object {
+                        "textTransform": "uppercase",
+                      },
+                      Object {
+                        "color": "#6200ee",
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      Object {
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      undefined,
+                    ],
+                  ]
+                }
+              >
+                first
+              </Text>
+            </View>
+          </View>
+        </View>
+        <View
+          style={
+            Object {
+              "backgroundColor": "transparent",
+              "borderColor": "transparent",
+              "borderRadius": 4,
+              "borderStyle": "solid",
+              "borderWidth": 0,
+              "elevation": 0,
+              "margin": 4,
+              "minWidth": "auto",
+              "shadowColor": "#000000",
+              "shadowOffset": Object {
+                "height": 0,
+                "width": 0,
+              },
+              "shadowOpacity": 0,
+              "shadowRadius": 0,
+            }
+          }
+        >
+          <View
+            accessibilityRole="button"
+            accessibilityState={
+              Object {
+                "disabled": undefined,
+              }
+            }
+            accessible={true}
+            focusable={true}
+            onClick={[Function]}
+            onResponderGrant={[Function]}
+            onResponderMove={[Function]}
+            onResponderRelease={[Function]}
+            onResponderTerminate={[Function]}
+            onResponderTerminationRequest={[Function]}
+            onStartShouldSetResponder={[Function]}
+            style={
+              Array [
+                Object {
+                  "overflow": "hidden",
+                },
+                Object {
+                  "borderRadius": 4,
+                },
+              ]
+            }
+          >
+            <View
+              style={
+                Array [
+                  Object {
+                    "alignItems": "center",
+                    "flexDirection": "row",
+                    "justifyContent": "center",
+                  },
+                  undefined,
+                ]
+              }
+            >
+              <Text
+                numberOfLines={1}
+                selectable={false}
+                style={
+                  Array [
+                    Object {
+                      "color": "#000000",
+                      "fontFamily": "System",
+                      "fontWeight": "400",
+                    },
+                    Object {
+                      "textAlign": "left",
+                    },
+                    Array [
+                      Object {
+                        "letterSpacing": 1,
+                        "marginHorizontal": 16,
+                        "marginVertical": 9,
+                        "textAlign": "center",
+                      },
+                      Object {
+                        "marginHorizontal": 8,
+                      },
+                      Object {
+                        "textTransform": "uppercase",
+                      },
+                      Object {
+                        "color": "#6200ee",
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      Object {
+                        "fontFamily": "System",
+                        "fontWeight": "500",
+                      },
+                      undefined,
+                    ],
+                  ]
+                }
+              >
+                second
+              </Text>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders visible banner, without action buttons and with image 1`] = `
+<View
+  image={[Function]}
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "elevation": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 0.75,
+    }
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "alignSelf": "center",
+          "maxWidth": 960,
+          "overflow": "hidden",
+          "width": "100%",
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "height": 0,
+        }
+      }
+    />
+    <View
+      onLayout={[Function]}
+      style={Object {}}
+    >
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-start",
+            "marginBottom": 0,
+            "marginHorizontal": 8,
+            "marginTop": 16,
+          }
+        }
+      >
+        <Text
+          accessibilityLiveRegion="polite"
+          accessibilityRole="alert"
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "flex": 1,
+                  "margin": 8,
+                },
+                Object {
+                  "color": "#000000",
+                },
+              ],
+            ]
+          }
+        >
+          Two line text string with two actions. One to two lines is preferable on mobile.
+        </Text>
+      </View>
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-end",
+            "margin": 4,
+          }
+        }
+      />
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders visible banner, without action buttons and without image 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "elevation": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 0.75,
+    }
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "alignSelf": "center",
+          "maxWidth": 960,
+          "overflow": "hidden",
+          "width": "100%",
+        },
+        undefined,
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "height": 0,
+        }
+      }
+    />
+    <View
+      onLayout={[Function]}
+      style={Object {}}
+    >
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-start",
+            "marginBottom": 0,
+            "marginHorizontal": 8,
+            "marginTop": 16,
+          }
+        }
+      >
+        <Text
+          accessibilityLiveRegion="polite"
+          accessibilityRole="alert"
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "flex": 1,
+                  "margin": 8,
+                },
+                Object {
+                  "color": "#000000",
+                },
+              ],
+            ]
+          }
+        >
+          Two line text string with two actions. One to two lines is preferable on mobile.
+        </Text>
+      </View>
+      <View
+        style={
+          Object {
+            "flexDirection": "row",
+            "justifyContent": "flex-end",
+            "margin": 4,
+          }
+        }
+      />
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/BottomNavigation.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/BottomNavigation.test.js.snap
new file mode 100644
index 0000000..6900b73
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/BottomNavigation.test.js.snap
@@ -0,0 +1,6281 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`hides labels in non-shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "#6200ee",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 504,
+            },
+          ]
+        }
+      >
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                }
+              }
+            />
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                }
+              }
+            />
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                }
+              }
+            />
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`hides labels in shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "rgba(98, 0, 238, 1)",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 504,
+            },
+          ]
+        }
+      >
+        <View
+          pointerEvents="none"
+          style={
+            Object {
+              "backgroundColor": undefined,
+              "borderRadius": 0,
+              "height": 0,
+              "left": 0,
+              "opacity": 0,
+              "position": "absolute",
+              "top": 28,
+              "transform": Array [
+                Object {
+                  "scale": 0.008,
+                },
+              ],
+              "width": 0,
+            }
+          }
+        />
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                }
+              }
+            />
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                }
+              }
+            />
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                }
+              }
+            />
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders custom icon and label in non-shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "#6200ee",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 504,
+            },
+          ]
+        }
+      >
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  magnify
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  magnify
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="rgba(255, 255, 255, 0.5)"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  camera
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  camera
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="rgba(255, 255, 255, 0.5)"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  inbox
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  inbox
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="rgba(255, 255, 255, 0.5)"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders custom icon and label in shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "rgba(98, 0, 238, 1)",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 480,
+            },
+          ]
+        }
+      >
+        <View
+          pointerEvents="none"
+          style={
+            Object {
+              "backgroundColor": undefined,
+              "borderRadius": 0,
+              "height": 0,
+              "left": 0,
+              "opacity": 0,
+              "position": "absolute",
+              "top": 28,
+              "transform": Array [
+                Object {
+                  "scale": 0.008,
+                },
+              ],
+              "width": 0,
+            }
+          }
+        />
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  magnify
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  magnify
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  camera
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  camera
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  inbox
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  inbox
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  heart
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  heart
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="#ffffff"
+                >
+                  shopping-music
+                </icon>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <icon
+                  color="rgba(255, 255, 255, 0.5)"
+                >
+                  shopping-music
+                </icon>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <text
+                  color="#ffffff"
+                />
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders custom icon and label with custom colors in non-shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "color": "#e57373",
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "#6200ee",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 504,
+            },
+          ]
+        }
+      >
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#FBF7DB",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#853D4B",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#FBF7DB",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 0
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#853D4B",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 0
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#FBF7DB",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#853D4B",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#FBF7DB",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 1
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#853D4B",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 1
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#FBF7DB",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#853D4B",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#FBF7DB",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 2
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#853D4B",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 2
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders custom icon and label with custom colors in shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "color": "#e57373",
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "rgba(98, 0, 238, 1)",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 504,
+            },
+          ]
+        }
+      >
+        <View
+          pointerEvents="none"
+          style={
+            Object {
+              "backgroundColor": undefined,
+              "borderRadius": 0,
+              "height": 0,
+              "left": 0,
+              "opacity": 0,
+              "position": "absolute",
+              "top": 28,
+              "transform": Array [
+                Object {
+                  "scale": 0.008,
+                },
+              ],
+              "width": 0,
+            }
+          }
+        />
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#FBF7DB",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#853D4B",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#FBF7DB",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 0
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#FBF7DB",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#853D4B",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#FBF7DB",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 1
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#FBF7DB",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#853D4B",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#FBF7DB",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 2
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders non-shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "#6200ee",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 504,
+            },
+          ]
+        }
+      >
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 0
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "rgba(255, 255, 255, 0.5)",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 0
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 1
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "rgba(255, 255, 255, 0.5)",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 1
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 2
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "rgba(255, 255, 255, 0.5)",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 2
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders shifting bottom navigation 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "flex": 1,
+        "overflow": "hidden",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Array [
+        Object {
+          "flex": 1,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityElementsHidden={false}
+      collapsable={false}
+      importantForAccessibility="auto"
+      pointerEvents="auto"
+      removeClippedSubviews={false}
+      style={
+        Array [
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+          },
+          Object {
+            "display": "flex",
+          },
+        ]
+      }
+      testID="RouteScreen: 0"
+    >
+      <View
+        style={
+          Object {
+            "flex": 1,
+            "top": 0,
+          }
+        }
+      >
+        Route: 0
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    pointerEvents="none"
+    style={
+      Object {
+        "backgroundColor": "#ffffff",
+        "bottom": 0,
+        "elevation": 4,
+        "left": 0,
+        "position": null,
+        "right": 0,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 3,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 4,
+        "transform": Array [
+          Object {
+            "translateY": 0,
+          },
+        ],
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "backgroundColor": "rgba(98, 0, 238, 1)",
+          "overflow": "hidden",
+        }
+      }
+    >
+      <View
+        accessibilityRole="tablist"
+        style={
+          Array [
+            Object {
+              "flexDirection": "row",
+            },
+            Object {
+              "marginBottom": 0,
+              "marginHorizontal": 0,
+              "maxWidth": 480,
+            },
+          ]
+        }
+      >
+        <View
+          pointerEvents="none"
+          style={
+            Object {
+              "backgroundColor": undefined,
+              "borderRadius": 0,
+              "height": 0,
+              "left": 0,
+              "opacity": 0,
+              "position": "absolute",
+              "top": 28,
+              "transform": Array [
+                Object {
+                  "scale": 0.008,
+                },
+              ],
+              "width": 0,
+            }
+          }
+        />
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": true,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 0,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 1,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 0
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 1
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 2
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 3
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "selected": false,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Object {
+              "flex": 1,
+              "paddingVertical": 6,
+            }
+          }
+        >
+          <View
+            pointerEvents="none"
+          >
+            <View
+              style={
+                Object {
+                  "alignSelf": "center",
+                  "height": 24,
+                  "marginHorizontal": 12,
+                  "marginTop": 2,
+                  "transform": Array [
+                    Object {
+                      "translateY": 7,
+                    },
+                  ],
+                  "width": 24,
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "#ffffff",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Object {
+                    "alignItems": "center",
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 1,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  accessibilityElementsHidden={true}
+                  importantForAccessibility="no-hide-descendants"
+                  pointerEvents="none"
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "backgroundColor": "transparent",
+                      },
+                      Object {
+                        "color": "rgba(255, 255, 255, 0.5)",
+                        "fontSize": 24,
+                      },
+                    ]
+                  }
+                >
+                  □
+                </Text>
+              </View>
+              <View
+                style={
+                  Array [
+                    Object {
+                      "left": 0,
+                      "position": "absolute",
+                      "top": -2,
+                    },
+                    Object {
+                      "right": -2,
+                    },
+                  ]
+                }
+              >
+                <Text
+                  numberOfLines={1}
+                  style={
+                    Object {
+                      "alignSelf": "flex-end",
+                      "backgroundColor": "#f50057",
+                      "borderRadius": 8,
+                      "color": "#ffffff",
+                      "fontFamily": "System",
+                      "fontSize": 8,
+                      "fontWeight": "400",
+                      "height": 16,
+                      "lineHeight": 16,
+                      "minWidth": 16,
+                      "opacity": 0,
+                      "overflow": "hidden",
+                      "paddingHorizontal": 4,
+                      "textAlign": "center",
+                      "textAlignVertical": "center",
+                    }
+                  }
+                />
+              </View>
+            </View>
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "paddingBottom": 2,
+                  "transform": Array [
+                    Object {
+                      "scale": 0.5,
+                    },
+                  ],
+                }
+              }
+            >
+              <View
+                style={
+                  Object {
+                    "bottom": 0,
+                    "left": 0,
+                    "opacity": 0,
+                    "position": "absolute",
+                    "right": 0,
+                    "top": 0,
+                  }
+                }
+              >
+                <Text
+                  maxFontSizeMultiplier={1}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                          "fontSize": 12,
+                          "height": 56,
+                          "textAlign": "center",
+                        },
+                        Object {
+                          "color": "#ffffff",
+                        },
+                      ],
+                    ]
+                  }
+                >
+                  Route: 4
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Button.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Button.test.js.snap
new file mode 100644
index 0000000..4b68a16
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Button.test.js.snap
@@ -0,0 +1,1512 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders button with an accessibility hint 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityHint="hint"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Button with accessibility hint
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders button with an accessibility label 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityLabel="label"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Button with accessibility label
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders button with color 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#e91e63",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Custom Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders button with custom testID 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+    testID="custom:testID"
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Button with custom testID
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders button with icon 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "marginLeft": 12,
+            "marginRight": -4,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontSize": 16,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Icon Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders button with icon in reverse order 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "flexDirection": "row-reverse",
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "marginLeft": -4,
+            "marginRight": 12,
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontSize": 16,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Right Icon
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders contained contained with mode 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#6200ee",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 2,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0.75,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 1.5,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#ffffff",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Contained Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders disabled button 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": true,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.32)",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Disabled Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders loading button 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <View
+        accessibilityRole="progressbar"
+        accessibilityState={
+          Object {
+            "busy": true,
+          }
+        }
+        accessible={true}
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "marginLeft": 12,
+              "marginRight": -4,
+            },
+          ]
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 16,
+              "opacity": 1,
+              "width": 16,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "alignItems": "center",
+                "bottom": 0,
+                "justifyContent": "center",
+                "left": 0,
+                "position": "absolute",
+                "right": 0,
+                "top": 0,
+              }
+            }
+          >
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "transform": Array [
+                    Object {
+                      "rotate": "45deg",
+                    },
+                  ],
+                  "width": 16,
+                }
+              }
+            >
+              <View
+                collapsable={false}
+                style={
+                  Object {
+                    "height": 8,
+                    "overflow": "hidden",
+                    "width": 16,
+                  }
+                }
+              >
+                <View
+                  style={
+                    Object {
+                      "height": 16,
+                      "transform": Array [
+                        Object {
+                          "translateY": 0,
+                        },
+                        Object {
+                          "rotate": "-165deg",
+                        },
+                      ],
+                      "width": 16,
+                    }
+                  }
+                >
+                  <View
+                    collapsable={false}
+                    style={
+                      Object {
+                        "height": 8,
+                        "overflow": "hidden",
+                        "width": 16,
+                      }
+                    }
+                  >
+                    <View
+                      style={
+                        Object {
+                          "borderColor": "#6200ee",
+                          "borderRadius": 8,
+                          "borderWidth": 1.6,
+                          "height": 16,
+                          "width": 16,
+                        }
+                      }
+                    />
+                  </View>
+                </View>
+              </View>
+            </View>
+          </View>
+          <View
+            style={
+              Object {
+                "alignItems": "center",
+                "bottom": 0,
+                "justifyContent": "center",
+                "left": 0,
+                "position": "absolute",
+                "right": 0,
+                "top": 0,
+              }
+            }
+          >
+            <View
+              style={
+                Object {
+                  "height": 16,
+                  "transform": Array [
+                    Object {
+                      "rotate": "45deg",
+                    },
+                  ],
+                  "width": 16,
+                }
+              }
+            >
+              <View
+                collapsable={false}
+                style={
+                  Object {
+                    "height": 8,
+                    "overflow": "hidden",
+                    "top": 8,
+                    "width": 16,
+                  }
+                }
+              >
+                <View
+                  style={
+                    Object {
+                      "height": 16,
+                      "transform": Array [
+                        Object {
+                          "translateY": -8,
+                        },
+                        Object {
+                          "rotate": "345deg",
+                        },
+                      ],
+                      "width": 16,
+                    }
+                  }
+                >
+                  <View
+                    collapsable={false}
+                    style={
+                      Object {
+                        "height": 8,
+                        "overflow": "hidden",
+                        "width": 16,
+                      }
+                    }
+                  >
+                    <View
+                      style={
+                        Object {
+                          "borderColor": "#6200ee",
+                          "borderRadius": 8,
+                          "borderWidth": 1.6,
+                          "height": 16,
+                          "width": 16,
+                        }
+                      }
+                    />
+                  </View>
+                </View>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Loading Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders outlined button with mode 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "rgba(0, 0, 0, 0.29)",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Outlined Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders text button by default 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Text Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders text button with mode 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "transparent",
+      "borderColor": "transparent",
+      "borderRadius": 4,
+      "borderStyle": "solid",
+      "borderWidth": 0,
+      "elevation": 0,
+      "minWidth": 64,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 0,
+        "width": 0,
+      },
+      "shadowOpacity": 0,
+      "shadowRadius": 0,
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 4,
+        },
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          undefined,
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "letterSpacing": 1,
+                "marginHorizontal": 16,
+                "marginVertical": 9,
+                "textAlign": "center",
+              },
+              undefined,
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              Object {
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Text Button
+      </Text>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Chip.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Chip.test.js.snap
new file mode 100644
index 0000000..0d114ba
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Chip.test.js.snap
@@ -0,0 +1,849 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders chip with close button 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ebebeb",
+      "borderColor": "#ebebeb",
+      "borderRadius": 16,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "flexDirection": "column",
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": false,
+        "selected": false,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "borderRadius": 16,
+          },
+          Object {
+            "flexGrow": 1,
+          },
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "flexGrow": 1,
+            "paddingLeft": 4,
+            "position": "relative",
+          },
+          Object {
+            "paddingRight": 32,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignSelf": "center",
+              "padding": 4,
+            },
+            null,
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 18,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "lineHeight": 24,
+                "marginVertical": 4,
+                "minHeight": 24,
+                "textAlignVertical": "center",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+                "fontFamily": "System",
+                "fontWeight": "400",
+                "marginLeft": 4,
+                "marginRight": 0,
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Example Chip
+      </Text>
+    </View>
+  </View>
+  <View
+    style={
+      Object {
+        "alignItems": "center",
+        "height": "100%",
+        "justifyContent": "center",
+        "position": "absolute",
+        "right": 0,
+      }
+    }
+  >
+    <View
+      accessibilityLabel="Close"
+      accessibilityRole="button"
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "alignSelf": "center",
+            "padding": 4,
+          },
+          Object {
+            "marginRight": 4,
+          },
+        ]
+      }
+    >
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 16,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders chip with custom close button 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ebebeb",
+      "borderColor": "#ebebeb",
+      "borderRadius": 16,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "flexDirection": "column",
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": false,
+        "selected": false,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "borderRadius": 16,
+          },
+          Object {
+            "flexGrow": 1,
+          },
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "flexGrow": 1,
+            "paddingLeft": 4,
+            "position": "relative",
+          },
+          Object {
+            "paddingRight": 32,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignSelf": "center",
+              "padding": 4,
+            },
+            null,
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 18,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "lineHeight": 24,
+                "marginVertical": 4,
+                "minHeight": 24,
+                "textAlignVertical": "center",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+                "fontFamily": "System",
+                "fontWeight": "400",
+                "marginLeft": 4,
+                "marginRight": 0,
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Example Chip
+      </Text>
+    </View>
+  </View>
+  <View
+    style={
+      Object {
+        "alignItems": "center",
+        "height": "100%",
+        "justifyContent": "center",
+        "position": "absolute",
+        "right": 0,
+      }
+    }
+  >
+    <View
+      accessibilityLabel="Close"
+      accessibilityRole="button"
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "alignSelf": "center",
+            "padding": 4,
+          },
+          Object {
+            "marginRight": 4,
+          },
+        ]
+      }
+    >
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 16,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders chip with icon 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ebebeb",
+      "borderColor": "#ebebeb",
+      "borderRadius": 16,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "flexDirection": "column",
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": false,
+        "selected": false,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "borderRadius": 16,
+          },
+          Object {
+            "flexGrow": 1,
+          },
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "flexGrow": 1,
+            "paddingLeft": 4,
+            "position": "relative",
+          },
+          Object {
+            "paddingRight": 4,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignSelf": "center",
+              "padding": 4,
+            },
+            null,
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 18,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "lineHeight": 24,
+                "marginVertical": 4,
+                "minHeight": 24,
+                "textAlignVertical": "center",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+                "fontFamily": "System",
+                "fontWeight": "400",
+                "marginLeft": 4,
+                "marginRight": 8,
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Example Chip
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders chip with onPress 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ebebeb",
+      "borderColor": "#ebebeb",
+      "borderRadius": 16,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "flexDirection": "column",
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": false,
+        "selected": false,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "borderRadius": 16,
+          },
+          Object {
+            "flexGrow": 1,
+          },
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "flexGrow": 1,
+            "paddingLeft": 4,
+            "position": "relative",
+          },
+          Object {
+            "paddingRight": 4,
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "lineHeight": 24,
+                "marginVertical": 4,
+                "minHeight": 24,
+                "textAlignVertical": "center",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+                "fontFamily": "System",
+                "fontWeight": "400",
+                "marginLeft": 8,
+                "marginRight": 8,
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Example Chip
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders outlined disabled chip 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "#ffffff",
+      "borderColor": "rgba(0, 0, 0, 0.29)",
+      "borderRadius": 16,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "flexDirection": "column",
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": true,
+        "selected": false,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "borderRadius": 16,
+          },
+          Object {
+            "flexGrow": 1,
+          },
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "flexGrow": 1,
+            "paddingLeft": 4,
+            "position": "relative",
+          },
+          Object {
+            "paddingRight": 4,
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "lineHeight": 24,
+                "marginVertical": 4,
+                "minHeight": 24,
+                "textAlignVertical": "center",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.26)",
+                "fontFamily": "System",
+                "fontWeight": "400",
+                "marginLeft": 8,
+                "marginRight": 8,
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Example Chip
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders selected chip 1`] = `
+<View
+  style={
+    Object {
+      "backgroundColor": "rgb(188, 188, 188)",
+      "borderColor": "#ebebeb",
+      "borderRadius": 16,
+      "borderStyle": "solid",
+      "borderWidth": 0.5,
+      "elevation": 0,
+      "flexDirection": "column",
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": false,
+        "selected": true,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "borderRadius": 16,
+          },
+          Object {
+            "flexGrow": 1,
+          },
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "flexGrow": 1,
+            "paddingLeft": 4,
+            "position": "relative",
+          },
+          Object {
+            "paddingRight": 4,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignSelf": "center",
+              "padding": 4,
+            },
+            null,
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 18,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "lineHeight": 24,
+                "marginVertical": 4,
+                "minHeight": 24,
+                "textAlignVertical": "center",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+                "fontFamily": "System",
+                "fontWeight": "400",
+                "marginLeft": 4,
+                "marginRight": 8,
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Example Chip
+      </Text>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/DataTable.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/DataTable.test.js.snap
new file mode 100644
index 0000000..9e7626d
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/DataTable.test.js.snap
@@ -0,0 +1,1709 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders data table cell 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "alignItems": "center",
+          "flex": 1,
+          "flexDirection": "row",
+        },
+        undefined,
+        undefined,
+      ],
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        undefined,
+      ]
+    }
+  >
+    Cupcake
+  </Text>
+</View>
+`;
+
+exports[`renders data table header 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "borderBottomWidth": 1,
+        "flexDirection": "row",
+        "height": 48,
+        "paddingHorizontal": 16,
+      },
+      Object {
+        "borderBottomColor": "rgba(0, 0, 0, 0.12)",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "alignContent": "center",
+          "flex": 1,
+          "flexDirection": "row",
+          "paddingVertical": 12,
+        },
+        undefined,
+        undefined,
+      ]
+    }
+  >
+    <Text
+      numberOfLines={1}
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "fontSize": 12,
+              "fontWeight": "500",
+              "lineHeight": 24,
+            },
+            Object {
+              "maxHeight": 24,
+            },
+            Object {},
+            Object {
+              "color": "rgba(0, 0, 0, 0.6)",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Dessert
+    </Text>
+  </View>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "alignContent": "center",
+          "flex": 1,
+          "flexDirection": "row",
+          "paddingVertical": 12,
+        },
+        undefined,
+        undefined,
+      ]
+    }
+  >
+    <Text
+      numberOfLines={1}
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "fontSize": 12,
+              "fontWeight": "500",
+              "lineHeight": 24,
+            },
+            Object {
+              "maxHeight": 24,
+            },
+            Object {},
+            Object {
+              "color": "rgba(0, 0, 0, 0.6)",
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      Calories
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders data table pagination 1`] = `
+<View
+  accessibilityLabel="pagination-container"
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "flexDirection": "row",
+        "flexWrap": "wrap",
+        "justifyContent": "flex-end",
+        "paddingLeft": 16,
+      },
+      undefined,
+    ]
+  }
+>
+  <Text
+    accessibilityLabel="label"
+    numberOfLines={3}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "fontSize": 12,
+            "marginRight": 16,
+          },
+          Object {
+            "color": "rgba(0, 0, 0, 0.6)",
+          },
+        ],
+      ]
+    }
+  />
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      accessibilityLabel="chevron-left"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="chevron-right"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders data table pagination with fast-forward buttons 1`] = `
+<View
+  accessibilityLabel="pagination-container"
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "flexDirection": "row",
+        "flexWrap": "wrap",
+        "justifyContent": "flex-end",
+        "paddingLeft": 16,
+      },
+      undefined,
+    ]
+  }
+>
+  <Text
+    accessibilityLabel="label"
+    numberOfLines={3}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "fontSize": 12,
+            "marginRight": 16,
+          },
+          Object {
+            "color": "rgba(0, 0, 0, 0.6)",
+          },
+        ],
+      ]
+    }
+  >
+    11-20 of 150
+  </Text>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      accessibilityLabel="page-first"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="chevron-left"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="chevron-right"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="page-last"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders data table pagination with label 1`] = `
+<View
+  accessibilityLabel="pagination-container"
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "flexDirection": "row",
+        "flexWrap": "wrap",
+        "justifyContent": "flex-end",
+        "paddingLeft": 16,
+      },
+      undefined,
+    ]
+  }
+>
+  <Text
+    accessibilityLabel="label"
+    numberOfLines={3}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "fontSize": 12,
+            "marginRight": 16,
+          },
+          Object {
+            "color": "rgba(0, 0, 0, 0.6)",
+          },
+        ],
+      ]
+    }
+  >
+    11-20 of 150
+  </Text>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      accessibilityLabel="chevron-left"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="chevron-right"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders data table pagination with options select 1`] = `
+<View
+  accessibilityLabel="pagination-container"
+  style={
+    Array [
+      Object {
+        "alignItems": "center",
+        "flexDirection": "row",
+        "flexWrap": "wrap",
+        "justifyContent": "flex-end",
+        "paddingLeft": 16,
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    accessibilityLabel="Options Select"
+    style={
+      Object {
+        "alignItems": "center",
+        "flexDirection": "row",
+        "marginVertical": 6,
+      }
+    }
+  >
+    <Text
+      accessibilityLabel="selectPageDropdownLabel"
+      numberOfLines={3}
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "fontSize": 12,
+              "marginRight": 16,
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.6)",
+            },
+          ],
+        ]
+      }
+    >
+      Rows per page
+    </Text>
+    <View
+      collapsable={false}
+    >
+      <View
+        style={
+          Object {
+            "backgroundColor": "transparent",
+            "borderColor": "rgba(0, 0, 0, 0.29)",
+            "borderRadius": 4,
+            "borderStyle": "solid",
+            "borderWidth": 0.5,
+            "elevation": 0,
+            "marginRight": 16,
+            "minWidth": 64,
+            "shadowColor": "#000000",
+            "shadowOffset": Object {
+              "height": 0,
+              "width": 0,
+            },
+            "shadowOpacity": 0,
+            "shadowRadius": 0,
+            "textAlign": "center",
+          }
+        }
+      >
+        <View
+          accessibilityRole="button"
+          accessibilityState={
+            Object {
+              "disabled": undefined,
+            }
+          }
+          accessible={true}
+          focusable={true}
+          onClick={[Function]}
+          onResponderGrant={[Function]}
+          onResponderMove={[Function]}
+          onResponderRelease={[Function]}
+          onResponderTerminate={[Function]}
+          onResponderTerminationRequest={[Function]}
+          onStartShouldSetResponder={[Function]}
+          style={
+            Array [
+              Object {
+                "overflow": "hidden",
+              },
+              Object {
+                "borderRadius": 4,
+              },
+            ]
+          }
+        >
+          <View
+            style={
+              Array [
+                Object {
+                  "alignItems": "center",
+                  "flexDirection": "row",
+                  "justifyContent": "center",
+                },
+                Object {
+                  "flexDirection": "row-reverse",
+                },
+              ]
+            }
+          >
+            <View
+              style={
+                Object {
+                  "marginLeft": -4,
+                  "marginRight": 12,
+                }
+              }
+            >
+              <Text
+                accessibilityElementsHidden={true}
+                importantForAccessibility="no-hide-descendants"
+                pointerEvents="none"
+                selectable={false}
+                style={
+                  Array [
+                    Object {
+                      "backgroundColor": "transparent",
+                    },
+                    Object {
+                      "color": "#6200ee",
+                      "fontSize": 16,
+                    },
+                  ]
+                }
+              >
+                □
+              </Text>
+            </View>
+            <Text
+              numberOfLines={1}
+              selectable={false}
+              style={
+                Array [
+                  Object {
+                    "color": "#000000",
+                    "fontFamily": "System",
+                    "fontWeight": "400",
+                  },
+                  Object {
+                    "textAlign": "left",
+                  },
+                  Array [
+                    Object {
+                      "letterSpacing": 1,
+                      "marginHorizontal": 16,
+                      "marginVertical": 9,
+                      "textAlign": "center",
+                    },
+                    undefined,
+                    Object {
+                      "textTransform": "uppercase",
+                    },
+                    Object {
+                      "color": "#6200ee",
+                      "fontFamily": "System",
+                      "fontWeight": "500",
+                    },
+                    Object {
+                      "fontFamily": "System",
+                      "fontWeight": "500",
+                    },
+                    undefined,
+                  ],
+                ]
+              }
+            >
+              2
+            </Text>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+  <Text
+    accessibilityLabel="label"
+    numberOfLines={3}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "fontSize": 12,
+            "marginRight": 16,
+          },
+          Object {
+            "color": "rgba(0, 0, 0, 0.6)",
+          },
+        ],
+      ]
+    }
+  >
+    11-20 of 150
+  </Text>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      accessibilityLabel="page-first"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="chevron-left"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="chevron-right"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+    <View
+      accessibilityLabel="page-last"
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            false,
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders data table title with press handler 1`] = `
+<View
+  accessible={true}
+  focusable={true}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "alignContent": "center",
+        "flex": 1,
+        "flexDirection": "row",
+        "paddingVertical": 12,
+      },
+      undefined,
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "height": 24,
+        "justifyContent": "center",
+        "transform": Array [
+          Object {
+            "rotate": "180deg",
+          },
+        ],
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 16,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "fontSize": 12,
+            "fontWeight": "500",
+            "lineHeight": 24,
+          },
+          Object {
+            "maxHeight": 24,
+          },
+          Object {},
+          Object {
+            "marginLeft": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    Dessert
+  </Text>
+</View>
+`;
+
+exports[`renders data table title with sort icon 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "alignContent": "center",
+        "flex": 1,
+        "flexDirection": "row",
+        "paddingVertical": 12,
+      },
+      undefined,
+      undefined,
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "height": 24,
+        "justifyContent": "center",
+        "transform": Array [
+          Object {
+            "rotate": "180deg",
+          },
+        ],
+      }
+    }
+  >
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 16,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "fontSize": 12,
+            "fontWeight": "500",
+            "lineHeight": 24,
+          },
+          Object {
+            "maxHeight": 24,
+          },
+          Object {},
+          Object {
+            "marginLeft": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    Dessert
+  </Text>
+</View>
+`;
+
+exports[`renders right aligned data table cell 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "alignItems": "center",
+          "flex": 1,
+          "flexDirection": "row",
+        },
+        Object {
+          "justifyContent": "flex-end",
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        undefined,
+      ]
+    }
+  >
+    356
+  </Text>
+</View>
+`;
+
+exports[`renders right aligned data table title 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "alignContent": "center",
+        "flex": 1,
+        "flexDirection": "row",
+        "paddingVertical": 12,
+      },
+      Object {
+        "justifyContent": "flex-end",
+      },
+      undefined,
+    ]
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "fontSize": 12,
+            "fontWeight": "500",
+            "lineHeight": 24,
+          },
+          Object {
+            "maxHeight": 24,
+          },
+          Object {},
+          Object {
+            "color": "rgba(0, 0, 0, 0.6)",
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    Calories
+  </Text>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/DrawerItem.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/DrawerItem.test.js.snap
new file mode 100644
index 0000000..6f37a35
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/DrawerItem.test.js.snap
@@ -0,0 +1,309 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders DrawerItem with icon 1`] = `
+<View>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "selected": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "marginHorizontal": 10,
+            "marginVertical": 4,
+          },
+          Object {
+            "backgroundColor": "transparent",
+            "borderRadius": 4,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "padding": 8,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "alignItems": "center",
+            "flex": 1,
+            "flexDirection": "row",
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.68)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "marginRight": 32,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.68)",
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                  "marginLeft": 32,
+                },
+              ],
+            ]
+          }
+        >
+          Example item
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders active DrawerItem 1`] = `
+<View>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "selected": true,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "marginHorizontal": 10,
+            "marginVertical": 4,
+          },
+          Object {
+            "backgroundColor": "rgba(98, 0, 238, 0.12)",
+            "borderRadius": 4,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "padding": 8,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "alignItems": "center",
+            "flex": 1,
+            "flexDirection": "row",
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#6200ee",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "marginRight": 32,
+                },
+                Object {
+                  "color": "#6200ee",
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                  "marginLeft": 32,
+                },
+              ],
+            ]
+          }
+        >
+          Example item
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders basic DrawerItem 1`] = `
+<View>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "selected": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "marginHorizontal": 10,
+            "marginVertical": 4,
+          },
+          Object {
+            "backgroundColor": "transparent",
+            "borderRadius": 4,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "alignItems": "center",
+          "flexDirection": "row",
+          "padding": 8,
+        }
+      }
+    >
+      <View
+        style={
+          Object {
+            "alignItems": "center",
+            "flex": 1,
+            "flexDirection": "row",
+          }
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "marginRight": 32,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.68)",
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                  "marginLeft": 0,
+                },
+              ],
+            ]
+          }
+        >
+          Example item
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/FAB.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/FAB.test.js.snap
new file mode 100644
index 0000000..e73d27e
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/FAB.test.js.snap
@@ -0,0 +1,1152 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders custom color for the icon and label of the FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 56,
+            "width": 56,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "#AA0114",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders disabled FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "rgba(0, 0, 0, 0.12)",
+      "borderRadius": 28,
+      "elevation": 0,
+      "opacity": 1,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": true,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 56,
+            "width": 56,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.32)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders extended FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityLabel="Add items"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 48,
+            "paddingHorizontal": 16,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, .54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+      <Text
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "marginHorizontal": 8,
+              },
+              Object {
+                "textTransform": "uppercase",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, .54)",
+                "fontFamily": "System",
+                "fontWeight": "500",
+              },
+            ],
+          ]
+        }
+      >
+        Add items
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders loading FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 56,
+            "width": 56,
+          },
+        ]
+      }
+    >
+      <View
+        accessibilityRole="progressbar"
+        accessibilityState={
+          Object {
+            "busy": true,
+          }
+        }
+        accessible={true}
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            undefined,
+          ]
+        }
+      >
+        <View
+          collapsable={false}
+          style={
+            Object {
+              "height": 18,
+              "opacity": 1,
+              "width": 18,
+            }
+          }
+        >
+          <View
+            style={
+              Object {
+                "alignItems": "center",
+                "bottom": 0,
+                "justifyContent": "center",
+                "left": 0,
+                "position": "absolute",
+                "right": 0,
+                "top": 0,
+              }
+            }
+          >
+            <View
+              style={
+                Object {
+                  "height": 18,
+                  "transform": Array [
+                    Object {
+                      "rotate": "45deg",
+                    },
+                  ],
+                  "width": 18,
+                }
+              }
+            >
+              <View
+                collapsable={false}
+                style={
+                  Object {
+                    "height": 9,
+                    "overflow": "hidden",
+                    "width": 18,
+                  }
+                }
+              >
+                <View
+                  style={
+                    Object {
+                      "height": 18,
+                      "transform": Array [
+                        Object {
+                          "translateY": 0,
+                        },
+                        Object {
+                          "rotate": "-165deg",
+                        },
+                      ],
+                      "width": 18,
+                    }
+                  }
+                >
+                  <View
+                    collapsable={false}
+                    style={
+                      Object {
+                        "height": 9,
+                        "overflow": "hidden",
+                        "width": 18,
+                      }
+                    }
+                  >
+                    <View
+                      style={
+                        Object {
+                          "borderColor": "rgba(0, 0, 0, .54)",
+                          "borderRadius": 9,
+                          "borderWidth": 1.8,
+                          "height": 18,
+                          "width": 18,
+                        }
+                      }
+                    />
+                  </View>
+                </View>
+              </View>
+            </View>
+          </View>
+          <View
+            style={
+              Object {
+                "alignItems": "center",
+                "bottom": 0,
+                "justifyContent": "center",
+                "left": 0,
+                "position": "absolute",
+                "right": 0,
+                "top": 0,
+              }
+            }
+          >
+            <View
+              style={
+                Object {
+                  "height": 18,
+                  "transform": Array [
+                    Object {
+                      "rotate": "45deg",
+                    },
+                  ],
+                  "width": 18,
+                }
+              }
+            >
+              <View
+                collapsable={false}
+                style={
+                  Object {
+                    "height": 9,
+                    "overflow": "hidden",
+                    "top": 9,
+                    "width": 18,
+                  }
+                }
+              >
+                <View
+                  style={
+                    Object {
+                      "height": 18,
+                      "transform": Array [
+                        Object {
+                          "translateY": -9,
+                        },
+                        Object {
+                          "rotate": "345deg",
+                        },
+                      ],
+                      "width": 18,
+                    }
+                  }
+                >
+                  <View
+                    collapsable={false}
+                    style={
+                      Object {
+                        "height": 9,
+                        "overflow": "hidden",
+                        "width": 18,
+                      }
+                    }
+                  >
+                    <View
+                      style={
+                        Object {
+                          "borderColor": "rgba(0, 0, 0, .54)",
+                          "borderRadius": 9,
+                          "borderWidth": 1.8,
+                          "height": 18,
+                          "width": 18,
+                        }
+                      }
+                    />
+                  </View>
+                </View>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders normal FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 56,
+            "width": 56,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, .54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders not visible FAB 1`] = `
+<View
+  pointerEvents="none"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 56,
+            "width": 56,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, .54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders small FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 1,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 1,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 40,
+            "width": 40,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, .54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders visible FAB 1`] = `
+<View
+  pointerEvents="auto"
+  style={
+    Object {
+      "backgroundColor": "#03dac4",
+      "borderRadius": 28,
+      "elevation": 6,
+      "opacity": 0,
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 5,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 6,
+      "transform": Array [
+        Object {
+          "scale": 0,
+        },
+      ],
+    }
+  }
+>
+  <View
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 28,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 56,
+            "width": 56,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+            },
+            Object {
+              "height": 24,
+              "width": 24,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Object {
+              "bottom": 0,
+              "left": 0,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 0,
+              "transform": Array [
+                Object {
+                  "rotate": "0deg",
+                },
+              ],
+            }
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, .54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/IconButton.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/IconButton.test.js.snap
new file mode 100644
index 0000000..0176ad3
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/IconButton.test.js.snap
@@ -0,0 +1,396 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders disabled icon button 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": true,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        Object {
+          "opacity": 0.32,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders icon button by default 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        undefined,
+        undefined,
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders icon button with color 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        undefined,
+        undefined,
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#e91e63",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders icon button with size 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 22.5,
+          "height": 45,
+          "width": 45,
+        },
+        undefined,
+        undefined,
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 30,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders icon change animated 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": undefined,
+    }
+  }
+  accessible={true}
+  focusable={false}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      Object {
+        "overflow": "hidden",
+      },
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        undefined,
+        undefined,
+      ],
+    ]
+  }
+>
+  <View>
+    <View
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+          },
+          Object {
+            "height": 24,
+            "width": 24,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 1,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "transform": Array [
+              Object {
+                "rotate": "0deg",
+              },
+            ],
+          }
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListAccordion.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListAccordion.test.js.snap
new file mode 100644
index 0000000..2838959
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListAccordion.test.js.snap
@@ -0,0 +1,835 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders expanded accordion 1`] = `
+<View>
+  <View
+    style={
+      Object {
+        "backgroundColor": "#f6f6f6",
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "expanded": true,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "padding": 8,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+          }
+        }
+      >
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "flex": 1,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            numberOfLines={1}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 16,
+                  },
+                  Object {
+                    "color": "#6200ee",
+                  },
+                  undefined,
+                ],
+              ]
+            }
+          >
+            Accordion item 1
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              undefined,
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          List item 1
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list accordion with children 1`] = `
+<View>
+  <View
+    style={
+      Object {
+        "backgroundColor": "#f6f6f6",
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "expanded": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "padding": 8,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+          }
+        }
+      >
+        <View
+          pointerEvents="box-none"
+          style={
+            Array [
+              Object {
+                "alignItems": "center",
+                "height": 40,
+                "justifyContent": "center",
+                "margin": 8,
+                "width": 40,
+              },
+              undefined,
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "flex": 1,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            numberOfLines={1}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 16,
+                  },
+                  Object {
+                    "color": "rgba(0, 0, 0, 0.87)",
+                  },
+                  undefined,
+                ],
+              ]
+            }
+          >
+            Expandable list item
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              undefined,
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list accordion with custom title and description styles 1`] = `
+<View>
+  <View
+    style={
+      Object {
+        "backgroundColor": "#f6f6f6",
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "expanded": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "padding": 8,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+          }
+        }
+      >
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "flex": 1,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            numberOfLines={1}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 16,
+                  },
+                  Object {
+                    "color": "rgba(0, 0, 0, 0.87)",
+                  },
+                  Object {
+                    "color": "#f44336",
+                  },
+                ],
+              ]
+            }
+          >
+            Accordion item 1
+          </Text>
+          <Text
+            numberOfLines={2}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 14,
+                  },
+                  Object {
+                    "color": "rgba(0, 0, 0, 0.54)",
+                  },
+                  Object {
+                    "color": "#f44336",
+                  },
+                ],
+              ]
+            }
+          >
+            Describes the expandable list item
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "alignItems": "center",
+                "height": 40,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list accordion with left items 1`] = `
+<View>
+  <View
+    style={
+      Object {
+        "backgroundColor": "#f6f6f6",
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "expanded": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "padding": 8,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+          }
+        }
+      >
+        <View
+          pointerEvents="box-none"
+          style={
+            Array [
+              Object {
+                "alignItems": "center",
+                "height": 40,
+                "justifyContent": "center",
+                "margin": 8,
+                "width": 40,
+              },
+              undefined,
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.54)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "flex": 1,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            numberOfLines={1}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 16,
+                  },
+                  Object {
+                    "color": "rgba(0, 0, 0, 0.87)",
+                  },
+                  undefined,
+                ],
+              ]
+            }
+          >
+            Accordion item 1
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              undefined,
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders multiline list accordion 1`] = `
+<View>
+  <View
+    style={
+      Object {
+        "backgroundColor": "#f6f6f6",
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "expanded": false,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "padding": 8,
+            },
+            undefined,
+          ],
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "alignItems": "center",
+            "flexDirection": "row",
+          }
+        }
+      >
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "flex": 1,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            numberOfLines={1}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 16,
+                  },
+                  Object {
+                    "color": "rgba(0, 0, 0, 0.87)",
+                  },
+                  undefined,
+                ],
+              ]
+            }
+          >
+            Expandable list item
+          </Text>
+          <Text
+            numberOfLines={2}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "fontSize": 14,
+                  },
+                  Object {
+                    "color": "rgba(0, 0, 0, 0.54)",
+                  },
+                  undefined,
+                ],
+              ]
+            }
+          >
+            Describes the expandable list item
+          </Text>
+        </View>
+        <View
+          style={
+            Array [
+              Object {
+                "margin": 8,
+              },
+              Object {
+                "alignItems": "center",
+                "height": 40,
+                "justifyContent": "center",
+              },
+            ]
+          }
+        >
+          <Text
+            accessibilityElementsHidden={true}
+            importantForAccessibility="no-hide-descendants"
+            pointerEvents="none"
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "backgroundColor": "transparent",
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                  "fontSize": 24,
+                },
+              ]
+            }
+          >
+            □
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListItem.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListItem.test.js.snap
new file mode 100644
index 0000000..9695c3d
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListItem.test.js.snap
@@ -0,0 +1,876 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders list item with custom description 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        List Item with custom description
+      </Text>
+      <View>
+        <Text
+          numberOfLines={2}
+          style={
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 14,
+            }
+          }
+        >
+          React Native Paper is a high-quality, standard-compliant Design Design library that has you covered in all major use-cases.
+        </Text>
+        <View>
+          <View
+            style={
+              Object {
+                "backgroundColor": "#ebebeb",
+                "borderColor": "#ebebeb",
+                "borderRadius": 16,
+                "borderStyle": "solid",
+                "borderWidth": 0.5,
+                "elevation": 0,
+                "flexDirection": "column",
+              }
+            }
+          >
+            <View
+              accessibilityRole="button"
+              accessibilityState={
+                Object {
+                  "disabled": false,
+                  "selected": false,
+                }
+              }
+              accessible={true}
+              focusable={true}
+              onClick={[Function]}
+              onResponderGrant={[Function]}
+              onResponderMove={[Function]}
+              onResponderRelease={[Function]}
+              onResponderTerminate={[Function]}
+              onResponderTerminationRequest={[Function]}
+              onStartShouldSetResponder={[Function]}
+              style={
+                Array [
+                  Object {
+                    "overflow": "hidden",
+                  },
+                  Array [
+                    Object {
+                      "borderRadius": 16,
+                    },
+                    Object {
+                      "flexGrow": 1,
+                    },
+                  ],
+                ]
+              }
+            >
+              <View
+                style={
+                  Array [
+                    Object {
+                      "alignItems": "center",
+                      "flexDirection": "row",
+                      "flexGrow": 1,
+                      "paddingLeft": 4,
+                      "position": "relative",
+                    },
+                    Object {
+                      "paddingRight": 4,
+                    },
+                  ]
+                }
+              >
+                <View
+                  style={
+                    Array [
+                      Object {
+                        "alignSelf": "center",
+                        "padding": 4,
+                      },
+                      null,
+                    ]
+                  }
+                >
+                  <Text
+                    accessibilityElementsHidden={true}
+                    importantForAccessibility="no-hide-descendants"
+                    pointerEvents="none"
+                    selectable={false}
+                    style={
+                      Array [
+                        Object {
+                          "backgroundColor": "transparent",
+                        },
+                        Object {
+                          "color": "rgba(0, 0, 0, 0.54)",
+                          "fontSize": 18,
+                        },
+                      ]
+                    }
+                  >
+                    □
+                  </Text>
+                </View>
+                <Text
+                  numberOfLines={1}
+                  selectable={false}
+                  style={
+                    Array [
+                      Object {
+                        "color": "#000000",
+                        "fontFamily": "System",
+                        "fontWeight": "400",
+                      },
+                      Object {
+                        "textAlign": "left",
+                      },
+                      Array [
+                        Object {
+                          "lineHeight": 24,
+                          "marginVertical": 4,
+                          "minHeight": 24,
+                          "textAlignVertical": "center",
+                        },
+                        Object {
+                          "color": "rgba(0, 0, 0, 0.87)",
+                          "fontFamily": "System",
+                          "fontWeight": "400",
+                          "marginLeft": 4,
+                          "marginRight": 8,
+                        },
+                        undefined,
+                      ],
+                    ]
+                  }
+                >
+                  DOCS.pdf
+                </Text>
+              </View>
+            </View>
+          </View>
+        </View>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list item with custom title and description styles 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              Object {
+                "fontSize": 20,
+              },
+            ],
+          ]
+        }
+      >
+        First Item
+      </Text>
+      <Text
+        numberOfLines={2}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 14,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+              },
+              Object {
+                "color": "#f44336",
+              },
+            ],
+          ]
+        }
+      >
+        Item description
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list item with left and right items 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <Text>
+      GG
+    </Text>
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        First Item
+      </Text>
+      <Text
+        numberOfLines={2}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 14,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Item description
+      </Text>
+    </View>
+    <View
+      pointerEvents="box-none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "height": 40,
+            "justifyContent": "center",
+            "margin": 8,
+            "width": 40,
+          },
+          Object {
+            "marginRight": 0,
+          },
+        ]
+      }
+    >
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list item with left item 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      pointerEvents="box-none"
+      style={
+        Array [
+          Object {
+            "alignItems": "center",
+            "height": 40,
+            "justifyContent": "center",
+            "margin": 8,
+            "width": 40,
+          },
+          Object {
+            "marginLeft": 0,
+            "marginRight": 16,
+            "marginVertical": 0,
+          },
+        ]
+      }
+    >
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        First Item
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list item with right item 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        First Item
+      </Text>
+    </View>
+    <Text>
+      GG
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders list item with title and description 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        First Item
+      </Text>
+      <Text
+        numberOfLines={2}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 14,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+              },
+              undefined,
+            ],
+          ]
+        }
+      >
+        Description for first item
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders with a description with typeof number 1`] = `
+<View
+  accessible={true}
+  focusable={false}
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "padding": 8,
+        },
+        undefined,
+      ],
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "flexDirection": "row",
+      }
+    }
+  >
+    <View
+      style={
+        Array [
+          Object {
+            "marginVertical": 6,
+            "paddingLeft": 8,
+          },
+          Object {
+            "flex": 1,
+            "justifyContent": "center",
+          },
+        ]
+      }
+    >
+      <Text
+        numberOfLines={1}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 16,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.87)",
+              },
+              Object {
+                "fontSize": 20,
+              },
+            ],
+          ]
+        }
+      >
+        First Item
+      </Text>
+      <Text
+        numberOfLines={2}
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontWeight": "400",
+            },
+            Object {
+              "textAlign": "left",
+            },
+            Array [
+              Object {
+                "fontSize": 14,
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+              },
+              Object {
+                "color": "#f44336",
+              },
+            ],
+          ]
+        }
+      >
+        123
+      </Text>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListSection.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListSection.test.js.snap
new file mode 100644
index 0000000..f4c6c68
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ListSection.test.js.snap
@@ -0,0 +1,895 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders list section with custom title style 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "marginVertical": 8,
+      },
+      undefined,
+    ]
+  }
+  theme={
+    Object {
+      "animation": Object {
+        "scale": 1,
+      },
+      "colors": Object {
+        "accent": "#03dac4",
+        "backdrop": "rgba(0, 0, 0, 0.5)",
+        "background": "#f6f6f6",
+        "disabled": "rgba(0, 0, 0, 0.26)",
+        "error": "#B00020",
+        "notification": "#f50057",
+        "onSurface": "#000000",
+        "placeholder": "rgba(0, 0, 0, 0.54)",
+        "primary": "#6200ee",
+        "surface": "#ffffff",
+        "text": "#000000",
+      },
+      "dark": false,
+      "fonts": Object {
+        "light": Object {
+          "fontFamily": "System",
+          "fontWeight": "300",
+        },
+        "medium": Object {
+          "fontFamily": "System",
+          "fontWeight": "500",
+        },
+        "regular": Object {
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        "thin": Object {
+          "fontFamily": "System",
+          "fontWeight": "100",
+        },
+      },
+      "roundness": 4,
+    }
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "paddingHorizontal": 16,
+            "paddingVertical": 13,
+          },
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontWeight": "500",
+          },
+          Object {
+            "color": "#f44336",
+          },
+        ],
+      ]
+    }
+  >
+    Some title
+  </Text>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        pointerEvents="box-none"
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "height": 40,
+              "justifyContent": "center",
+              "margin": 8,
+              "width": 40,
+            },
+            Object {
+              "marginLeft": 0,
+              "marginRight": 16,
+              "marginVertical": 0,
+            },
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          First Item
+        </Text>
+      </View>
+    </View>
+  </View>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        pointerEvents="box-none"
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "height": 40,
+              "justifyContent": "center",
+              "margin": 8,
+              "width": 40,
+            },
+            Object {
+              "marginLeft": 0,
+              "marginRight": 16,
+              "marginVertical": 0,
+            },
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          Second Item
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list section with subheader 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "marginVertical": 8,
+      },
+      undefined,
+    ]
+  }
+  theme={
+    Object {
+      "animation": Object {
+        "scale": 1,
+      },
+      "colors": Object {
+        "accent": "#03dac4",
+        "backdrop": "rgba(0, 0, 0, 0.5)",
+        "background": "#f6f6f6",
+        "disabled": "rgba(0, 0, 0, 0.26)",
+        "error": "#B00020",
+        "notification": "#f50057",
+        "onSurface": "#000000",
+        "placeholder": "rgba(0, 0, 0, 0.54)",
+        "primary": "#6200ee",
+        "surface": "#ffffff",
+        "text": "#000000",
+      },
+      "dark": false,
+      "fonts": Object {
+        "light": Object {
+          "fontFamily": "System",
+          "fontWeight": "300",
+        },
+        "medium": Object {
+          "fontFamily": "System",
+          "fontWeight": "500",
+        },
+        "regular": Object {
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        "thin": Object {
+          "fontFamily": "System",
+          "fontWeight": "100",
+        },
+      },
+      "roundness": 4,
+    }
+  }
+>
+  <Text
+    numberOfLines={1}
+    style={
+      Array [
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        Object {
+          "textAlign": "left",
+        },
+        Array [
+          Object {
+            "paddingHorizontal": 16,
+            "paddingVertical": 13,
+          },
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontWeight": "500",
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    Some title
+  </Text>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        pointerEvents="box-none"
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "height": 40,
+              "justifyContent": "center",
+              "margin": 8,
+              "width": 40,
+            },
+            Object {
+              "marginLeft": 0,
+              "marginRight": 16,
+              "marginVertical": 0,
+            },
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          First Item
+        </Text>
+      </View>
+    </View>
+  </View>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        pointerEvents="box-none"
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "height": 40,
+              "justifyContent": "center",
+              "margin": 8,
+              "width": 40,
+            },
+            Object {
+              "marginLeft": 0,
+              "marginRight": 16,
+              "marginVertical": 0,
+            },
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          Second Item
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders list section without subheader 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "marginVertical": 8,
+      },
+      undefined,
+    ]
+  }
+  theme={
+    Object {
+      "animation": Object {
+        "scale": 1,
+      },
+      "colors": Object {
+        "accent": "#03dac4",
+        "backdrop": "rgba(0, 0, 0, 0.5)",
+        "background": "#f6f6f6",
+        "disabled": "rgba(0, 0, 0, 0.26)",
+        "error": "#B00020",
+        "notification": "#f50057",
+        "onSurface": "#000000",
+        "placeholder": "rgba(0, 0, 0, 0.54)",
+        "primary": "#6200ee",
+        "surface": "#ffffff",
+        "text": "#000000",
+      },
+      "dark": false,
+      "fonts": Object {
+        "light": Object {
+          "fontFamily": "System",
+          "fontWeight": "300",
+        },
+        "medium": Object {
+          "fontFamily": "System",
+          "fontWeight": "500",
+        },
+        "regular": Object {
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        "thin": Object {
+          "fontFamily": "System",
+          "fontWeight": "100",
+        },
+      },
+      "roundness": 4,
+    }
+  }
+>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        pointerEvents="box-none"
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "height": 40,
+              "justifyContent": "center",
+              "margin": 8,
+              "width": 40,
+            },
+            Object {
+              "marginLeft": 0,
+              "marginRight": 16,
+              "marginVertical": 0,
+            },
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          First Item
+        </Text>
+      </View>
+    </View>
+  </View>
+  <View
+    accessible={true}
+    focusable={false}
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        false,
+        Array [
+          Object {
+            "padding": 8,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View
+      style={
+        Object {
+          "flexDirection": "row",
+        }
+      }
+    >
+      <View
+        pointerEvents="box-none"
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "height": 40,
+              "justifyContent": "center",
+              "margin": 8,
+              "width": 40,
+            },
+            Object {
+              "marginLeft": 0,
+              "marginRight": 16,
+              "marginVertical": 0,
+            },
+          ]
+        }
+      >
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "rgba(0, 0, 0, 0.54)",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+      <View
+        style={
+          Array [
+            Object {
+              "marginVertical": 6,
+              "paddingLeft": 8,
+            },
+            Object {
+              "flex": 1,
+              "justifyContent": "center",
+            },
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "fontSize": 16,
+                },
+                Object {
+                  "color": "rgba(0, 0, 0, 0.87)",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          Second Item
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Menu.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Menu.test.js.snap
new file mode 100644
index 0000000..3182852
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Menu.test.js.snap
@@ -0,0 +1,328 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders menu with content styles 1`] = `
+<View
+  collapsable={false}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "transparent",
+        "borderColor": "rgba(0, 0, 0, 0.29)",
+        "borderRadius": 4,
+        "borderStyle": "solid",
+        "borderWidth": 0.5,
+        "elevation": 0,
+        "minWidth": 64,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 0,
+          "width": 0,
+        },
+        "shadowOpacity": 0,
+        "shadowRadius": 0,
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 4,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "flexDirection": "row",
+              "justifyContent": "center",
+            },
+            undefined,
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "letterSpacing": 1,
+                  "marginHorizontal": 16,
+                  "marginVertical": 9,
+                  "textAlign": "center",
+                },
+                undefined,
+                Object {
+                  "textTransform": "uppercase",
+                },
+                Object {
+                  "color": "#6200ee",
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                },
+                Object {
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          Open menu
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders not visible menu 1`] = `
+<View
+  collapsable={false}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "transparent",
+        "borderColor": "rgba(0, 0, 0, 0.29)",
+        "borderRadius": 4,
+        "borderStyle": "solid",
+        "borderWidth": 0.5,
+        "elevation": 0,
+        "minWidth": 64,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 0,
+          "width": 0,
+        },
+        "shadowOpacity": 0,
+        "shadowRadius": 0,
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 4,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "flexDirection": "row",
+              "justifyContent": "center",
+            },
+            undefined,
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "letterSpacing": 1,
+                  "marginHorizontal": 16,
+                  "marginVertical": 9,
+                  "textAlign": "center",
+                },
+                undefined,
+                Object {
+                  "textTransform": "uppercase",
+                },
+                Object {
+                  "color": "#6200ee",
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                },
+                Object {
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          Open menu
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders visible menu 1`] = `
+<View
+  collapsable={false}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "transparent",
+        "borderColor": "rgba(0, 0, 0, 0.29)",
+        "borderRadius": 4,
+        "borderStyle": "solid",
+        "borderWidth": 0.5,
+        "elevation": 0,
+        "minWidth": 64,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 0,
+          "width": 0,
+        },
+        "shadowOpacity": 0,
+        "shadowRadius": 0,
+      }
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={false}
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 4,
+          },
+        ]
+      }
+    >
+      <View
+        style={
+          Array [
+            Object {
+              "alignItems": "center",
+              "flexDirection": "row",
+              "justifyContent": "center",
+            },
+            undefined,
+          ]
+        }
+      >
+        <Text
+          numberOfLines={1}
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "color": "#000000",
+                "fontFamily": "System",
+                "fontWeight": "400",
+              },
+              Object {
+                "textAlign": "left",
+              },
+              Array [
+                Object {
+                  "letterSpacing": 1,
+                  "marginHorizontal": 16,
+                  "marginVertical": 9,
+                  "textAlign": "center",
+                },
+                undefined,
+                Object {
+                  "textTransform": "uppercase",
+                },
+                Object {
+                  "color": "#6200ee",
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                },
+                Object {
+                  "fontFamily": "System",
+                  "fontWeight": "500",
+                },
+                undefined,
+              ],
+            ]
+          }
+        >
+          Open menu
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Portal.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Portal.test.js.snap
new file mode 100644
index 0000000..da6b2eb
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Portal.test.js.snap
@@ -0,0 +1,38 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders portal with siblings 1`] = `
+Array [
+  <View
+    collapsable={false}
+    pointerEvents="box-none"
+    style={
+      Object {
+        "flex": 1,
+      }
+    }
+  >
+    <Text>
+      Outside content
+    </Text>
+  </View>,
+  <View
+    collapsable={false}
+    pointerEvents="box-none"
+    style={
+      Object {
+        "bottom": 0,
+        "left": 0,
+        "position": "absolute",
+        "right": 0,
+        "top": 0,
+      }
+    }
+  >
+    <Text
+      testID="content"
+    >
+      Portal content
+    </Text>
+  </View>,
+]
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ProgressBar.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ProgressBar.test.js.snap
new file mode 100644
index 0000000..cf4ff44
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ProgressBar.test.js.snap
@@ -0,0 +1,191 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders colored progress bar 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": true,
+    }
+  }
+  accessibilityValue={
+    Object {
+      "max": 100,
+      "min": 0,
+      "now": 20,
+    }
+  }
+  accessible={true}
+  onLayout={[Function]}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(255, 0, 0, 0.38)",
+        "height": 4,
+        "opacity": 0,
+        "overflow": "hidden",
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "backgroundColor": "red",
+          "flex": 1,
+          "transform": Array [
+            Object {
+              "translateX": -50,
+            },
+            Object {
+              "scaleX": 0.0001,
+            },
+          ],
+          "width": 100,
+        }
+      }
+    />
+  </View>
+</View>
+`;
+
+exports[`renders hidden progress bar 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": false,
+    }
+  }
+  accessibilityValue={
+    Object {
+      "max": 100,
+      "min": 0,
+      "now": 20,
+    }
+  }
+  accessible={true}
+  onLayout={[Function]}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(98, 0, 238, 0.38)",
+        "height": 4,
+        "opacity": 0,
+        "overflow": "hidden",
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "backgroundColor": "#6200ee",
+          "flex": 1,
+          "transform": Array [
+            Object {
+              "translateX": -50,
+            },
+            Object {
+              "scaleX": 0.0001,
+            },
+          ],
+          "width": 100,
+        }
+      }
+    />
+  </View>
+</View>
+`;
+
+exports[`renders indeterminate progress bar 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": true,
+    }
+  }
+  accessibilityValue={Object {}}
+  accessible={true}
+  onLayout={[Function]}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(98, 0, 238, 0.38)",
+        "height": 4,
+        "opacity": 0,
+        "overflow": "hidden",
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "backgroundColor": "#6200ee",
+          "flex": 1,
+          "transform": Array [
+            Object {
+              "translateX": -50,
+            },
+            Object {
+              "scaleX": 0.0001,
+            },
+          ],
+          "width": 100,
+        }
+      }
+    />
+  </View>
+</View>
+`;
+
+exports[`renders progress bar with specific progress 1`] = `
+<View
+  accessibilityRole="progressbar"
+  accessibilityState={
+    Object {
+      "busy": true,
+    }
+  }
+  accessibilityValue={
+    Object {
+      "max": 100,
+      "min": 0,
+      "now": 20,
+    }
+  }
+  accessible={true}
+  onLayout={[Function]}
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(98, 0, 238, 0.38)",
+        "height": 4,
+        "opacity": 0,
+        "overflow": "hidden",
+      }
+    }
+  >
+    <View
+      style={
+        Object {
+          "backgroundColor": "#6200ee",
+          "flex": 1,
+          "transform": Array [
+            Object {
+              "translateX": -50,
+            },
+            Object {
+              "scaleX": 0.0001,
+            },
+          ],
+          "width": 100,
+        }
+      }
+    />
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Searchbar.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Searchbar.test.js.snap
new file mode 100644
index 0000000..2946660
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Searchbar.test.js.snap
@@ -0,0 +1,388 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders with placeholder 1`] = `
+<View
+  style={
+    Object {
+      "alignItems": "center",
+      "backgroundColor": "#ffffff",
+      "borderRadius": 4,
+      "elevation": 4,
+      "flexDirection": "row",
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 3,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 4,
+    }
+  }
+>
+  <View
+    accessibilityLabel="search"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    hitSlop={
+      Object {
+        "bottom": 6,
+        "left": 6,
+        "right": 6,
+        "top": 6,
+      }
+    }
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+            "margin": 6,
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "width": 36,
+          },
+          undefined,
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View>
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+  <TextInput
+    accessibilityRole="search"
+    accessibilityTraits="search"
+    allowFontScaling={true}
+    keyboardAppearance="light"
+    placeholder="Search"
+    placeholderTextColor="rgba(0, 0, 0, 0.54)"
+    rejectResponderTermination={true}
+    returnKeyType="search"
+    selectionColor="#6200ee"
+    style={
+      Array [
+        Object {
+          "alignSelf": "stretch",
+          "flex": 1,
+          "fontSize": 18,
+          "minWidth": 0,
+          "paddingLeft": 8,
+          "textAlign": "left",
+        },
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        undefined,
+      ]
+    }
+    underlineColorAndroid="transparent"
+  />
+  <View
+    accessibilityLabel="clear"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": true,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    hitSlop={
+      Object {
+        "bottom": 6,
+        "left": 6,
+        "right": 6,
+        "top": 6,
+      }
+    }
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+            "margin": 6,
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "width": 36,
+          },
+          Object {
+            "opacity": 0.32,
+          },
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View>
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(255, 255, 255, 0)",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`renders with text 1`] = `
+<View
+  style={
+    Object {
+      "alignItems": "center",
+      "backgroundColor": "#ffffff",
+      "borderRadius": 4,
+      "elevation": 4,
+      "flexDirection": "row",
+      "shadowColor": "#000000",
+      "shadowOffset": Object {
+        "height": 3,
+        "width": 0,
+      },
+      "shadowOpacity": 0.24,
+      "shadowRadius": 4,
+    }
+  }
+>
+  <View
+    accessibilityLabel="search"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": undefined,
+      }
+    }
+    accessible={true}
+    focusable={false}
+    hitSlop={
+      Object {
+        "bottom": 6,
+        "left": 6,
+        "right": 6,
+        "top": 6,
+      }
+    }
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+            "margin": 6,
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "width": 36,
+          },
+          undefined,
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View>
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+  <TextInput
+    accessibilityRole="search"
+    accessibilityTraits="search"
+    allowFontScaling={true}
+    keyboardAppearance="light"
+    placeholder="Search"
+    placeholderTextColor="rgba(0, 0, 0, 0.54)"
+    rejectResponderTermination={true}
+    returnKeyType="search"
+    selectionColor="#6200ee"
+    style={
+      Array [
+        Object {
+          "alignSelf": "stretch",
+          "flex": 1,
+          "fontSize": 18,
+          "minWidth": 0,
+          "paddingLeft": 8,
+          "textAlign": "left",
+        },
+        Object {
+          "color": "#000000",
+          "fontFamily": "System",
+          "fontWeight": "400",
+        },
+        undefined,
+      ]
+    }
+    underlineColorAndroid="transparent"
+    value="query"
+  />
+  <View
+    accessibilityLabel="clear"
+    accessibilityRole="button"
+    accessibilityState={
+      Object {
+        "disabled": false,
+      }
+    }
+    accessible={true}
+    focusable={true}
+    hitSlop={
+      Object {
+        "bottom": 6,
+        "left": 6,
+        "right": 6,
+        "top": 6,
+      }
+    }
+    onClick={[Function]}
+    onResponderGrant={[Function]}
+    onResponderMove={[Function]}
+    onResponderRelease={[Function]}
+    onResponderTerminate={[Function]}
+    onResponderTerminationRequest={[Function]}
+    onStartShouldSetResponder={[Function]}
+    style={
+      Array [
+        Object {
+          "overflow": "hidden",
+        },
+        Array [
+          Object {
+            "alignItems": "center",
+            "justifyContent": "center",
+            "margin": 6,
+            "overflow": "hidden",
+          },
+          Object {
+            "borderRadius": 18,
+            "height": 36,
+            "width": 36,
+          },
+          false,
+          undefined,
+        ],
+      ]
+    }
+  >
+    <View>
+      <Text
+        accessibilityElementsHidden={true}
+        importantForAccessibility="no-hide-descendants"
+        pointerEvents="none"
+        selectable={false}
+        style={
+          Array [
+            Object {
+              "backgroundColor": "transparent",
+            },
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontSize": 24,
+            },
+          ]
+        }
+      >
+        □
+      </Text>
+    </View>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Snackbar.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Snackbar.test.js.snap
new file mode 100644
index 0000000..1e1a28b
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Snackbar.test.js.snap
@@ -0,0 +1,336 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders not visible snackbar with content wrapper but no actual content 1`] = `null`;
+
+exports[`renders snackbar with Text as a child 1`] = `
+<RCTSafeAreaView
+  emulateUnlessSupported={true}
+  pointerEvents="box-none"
+  style={
+    Array [
+      Object {
+        "bottom": 0,
+        "position": "absolute",
+        "width": "100%",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    accessibilityLiveRegion="polite"
+    pointerEvents="box-none"
+    style={
+      Object {
+        "alignItems": "center",
+        "backgroundColor": "#000000",
+        "borderRadius": 4,
+        "elevation": 6,
+        "flexDirection": "row",
+        "justifyContent": "space-between",
+        "margin": 8,
+        "opacity": 1,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 5,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 6,
+        "transform": Array [
+          Object {
+            "scale": 1,
+          },
+        ],
+      }
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flex": 1,
+              "flexWrap": "wrap",
+              "marginLeft": 16,
+              "marginVertical": 14,
+            },
+            Object {
+              "color": "#ffffff",
+              "marginRight": 16,
+            },
+          ],
+        ]
+      }
+    >
+      <Text>
+        Snackbar content
+      </Text>
+    </Text>
+  </View>
+</RCTSafeAreaView>
+`;
+
+exports[`renders snackbar with action button 1`] = `
+<RCTSafeAreaView
+  emulateUnlessSupported={true}
+  pointerEvents="box-none"
+  style={
+    Array [
+      Object {
+        "bottom": 0,
+        "position": "absolute",
+        "width": "100%",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    accessibilityLiveRegion="polite"
+    pointerEvents="box-none"
+    style={
+      Object {
+        "alignItems": "center",
+        "backgroundColor": "#000000",
+        "borderRadius": 4,
+        "elevation": 6,
+        "flexDirection": "row",
+        "justifyContent": "space-between",
+        "margin": 8,
+        "opacity": 1,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 5,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 6,
+        "transform": Array [
+          Object {
+            "scale": 1,
+          },
+        ],
+      }
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flex": 1,
+              "flexWrap": "wrap",
+              "marginLeft": 16,
+              "marginVertical": 14,
+            },
+            Object {
+              "color": "#ffffff",
+              "marginRight": 0,
+            },
+          ],
+        ]
+      }
+    >
+      Snackbar content
+    </Text>
+    <View
+      style={
+        Object {
+          "backgroundColor": "transparent",
+          "borderColor": "transparent",
+          "borderRadius": 4,
+          "borderStyle": "solid",
+          "borderWidth": 0,
+          "elevation": 0,
+          "marginHorizontal": 8,
+          "marginVertical": 6,
+          "minWidth": "auto",
+          "shadowColor": "#000000",
+          "shadowOffset": Object {
+            "height": 0,
+            "width": 0,
+          },
+          "shadowOpacity": 0,
+          "shadowRadius": 0,
+        }
+      }
+    >
+      <View
+        accessibilityRole="button"
+        accessibilityState={
+          Object {
+            "disabled": undefined,
+          }
+        }
+        accessible={true}
+        focusable={true}
+        onClick={[Function]}
+        onResponderGrant={[Function]}
+        onResponderMove={[Function]}
+        onResponderRelease={[Function]}
+        onResponderTerminate={[Function]}
+        onResponderTerminationRequest={[Function]}
+        onStartShouldSetResponder={[Function]}
+        style={
+          Array [
+            Object {
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 4,
+            },
+          ]
+        }
+      >
+        <View
+          style={
+            Array [
+              Object {
+                "alignItems": "center",
+                "flexDirection": "row",
+                "justifyContent": "center",
+              },
+              undefined,
+            ]
+          }
+        >
+          <Text
+            numberOfLines={1}
+            selectable={false}
+            style={
+              Array [
+                Object {
+                  "color": "#000000",
+                  "fontFamily": "System",
+                  "fontWeight": "400",
+                },
+                Object {
+                  "textAlign": "left",
+                },
+                Array [
+                  Object {
+                    "letterSpacing": 1,
+                    "marginHorizontal": 16,
+                    "marginVertical": 9,
+                    "textAlign": "center",
+                  },
+                  Object {
+                    "marginHorizontal": 8,
+                  },
+                  Object {
+                    "textTransform": "uppercase",
+                  },
+                  Object {
+                    "color": "#03dac4",
+                    "fontFamily": "System",
+                    "fontWeight": "500",
+                  },
+                  Object {
+                    "fontFamily": "System",
+                    "fontWeight": "500",
+                  },
+                  undefined,
+                ],
+              ]
+            }
+          >
+            Undo
+          </Text>
+        </View>
+      </View>
+    </View>
+  </View>
+</RCTSafeAreaView>
+`;
+
+exports[`renders snackbar with content 1`] = `
+<RCTSafeAreaView
+  emulateUnlessSupported={true}
+  pointerEvents="box-none"
+  style={
+    Array [
+      Object {
+        "bottom": 0,
+        "position": "absolute",
+        "width": "100%",
+      },
+      undefined,
+    ]
+  }
+>
+  <View
+    accessibilityLiveRegion="polite"
+    pointerEvents="box-none"
+    style={
+      Object {
+        "alignItems": "center",
+        "backgroundColor": "#000000",
+        "borderRadius": 4,
+        "elevation": 6,
+        "flexDirection": "row",
+        "justifyContent": "space-between",
+        "margin": 8,
+        "opacity": 1,
+        "shadowColor": "#000000",
+        "shadowOffset": Object {
+          "height": 5,
+          "width": 0,
+        },
+        "shadowOpacity": 0.24,
+        "shadowRadius": 6,
+        "transform": Array [
+          Object {
+            "scale": 1,
+          },
+        ],
+      }
+    }
+  >
+    <Text
+      style={
+        Array [
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontWeight": "400",
+          },
+          Object {
+            "textAlign": "left",
+          },
+          Array [
+            Object {
+              "flex": 1,
+              "flexWrap": "wrap",
+              "marginLeft": 16,
+              "marginVertical": 14,
+            },
+            Object {
+              "color": "#ffffff",
+              "marginRight": 16,
+            },
+          ],
+        ]
+      }
+    >
+      Snackbar content
+    </Text>
+  </View>
+</RCTSafeAreaView>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Switch.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Switch.test.js.snap
new file mode 100644
index 0000000..73c2056
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/Switch.test.js.snap
@@ -0,0 +1,74 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders disabled switch 1`] = `
+<RCTSwitch
+  accessibilityRole="switch"
+  disabled={true}
+  onChange={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  onTintColor="#03dac4"
+  style={
+    Object {
+      "height": 31,
+      "width": 51,
+    }
+  }
+  tintColor=""
+  value={true}
+/>
+`;
+
+exports[`renders off switch 1`] = `
+<RCTSwitch
+  accessibilityRole="switch"
+  onChange={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  onTintColor="#03dac4"
+  style={
+    Object {
+      "height": 31,
+      "width": 51,
+    }
+  }
+  tintColor=""
+  value={false}
+/>
+`;
+
+exports[`renders on switch 1`] = `
+<RCTSwitch
+  accessibilityRole="switch"
+  onChange={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  onTintColor="#03dac4"
+  style={
+    Object {
+      "height": 31,
+      "width": 51,
+    }
+  }
+  tintColor=""
+  value={true}
+/>
+`;
+
+exports[`renders switch with color 1`] = `
+<RCTSwitch
+  accessibilityRole="switch"
+  onChange={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  onTintColor="#e91e63"
+  style={
+    Object {
+      "height": 31,
+      "width": 51,
+    }
+  }
+  tintColor=""
+  value={true}
+/>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/TextInput.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/TextInput.test.js.snap
new file mode 100644
index 0000000..d932270
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/TextInput.test.js.snap
@@ -0,0 +1,1411 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`correctly applies a component as the text label 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "rgb(231, 231, 231)",
+        "borderTopLeftRadius": 4,
+        "borderTopRightRadius": 4,
+      },
+      Object {},
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(0, 0, 0, 0.26)",
+        "bottom": 0,
+        "height": 2,
+        "left": 0,
+        "position": "absolute",
+        "right": 0,
+        "transform": Array [
+          Object {
+            "scaleY": 0.5,
+          },
+        ],
+        "zIndex": 1,
+      }
+    }
+  />
+  <View
+    style={
+      Array [
+        Object {
+          "paddingBottom": 0,
+          "paddingTop": 0,
+        },
+        Object {
+          "minHeight": 64,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Object {
+          "bottom": 0,
+          "left": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+          "transform": Array [
+            Object {
+              "translateX": 3,
+            },
+          ],
+          "zIndex": 3,
+        }
+      }
+    >
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        onLayout={[Function]}
+        style={
+          Object {
+            "color": "#6200ee",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 12,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        <Text
+          style={
+            Object {
+              "color": "#f44336",
+            }
+          }
+        >
+          Flat input
+        </Text>
+      </Text>
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        style={
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 12,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        <Text
+          style={
+            Object {
+              "color": "#f44336",
+            }
+          }
+        >
+          Flat input
+        </Text>
+      </Text>
+    </View>
+    <TextInput
+      allowFontScaling={true}
+      editable={true}
+      maxFontSizeMultiplier={1.5}
+      multiline={false}
+      onBlur={[Function]}
+      onChangeText={[Function]}
+      onFocus={[Function]}
+      placeholder=""
+      placeholderTextColor="rgba(0, 0, 0, 0.54)"
+      rejectResponderTermination={true}
+      selectionColor="#6200ee"
+      style={
+        Array [
+          Object {
+            "flexGrow": 1,
+            "margin": 0,
+          },
+          Object {
+            "paddingLeft": 12,
+            "paddingRight": 12,
+          },
+          Object {
+            "height": 64,
+          },
+          Object {
+            "paddingBottom": 4,
+            "paddingTop": 24,
+          },
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "textAlign": "left",
+            "textAlignVertical": "center",
+          },
+          false,
+          Array [
+            Object {},
+          ],
+        ]
+      }
+      testID="text-input-flat"
+      underlineColorAndroid="transparent"
+      value="Some test value"
+    />
+  </View>
+</View>
+`;
+
+exports[`correctly applies default textAlign based on default RTL 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "rgb(231, 231, 231)",
+        "borderTopLeftRadius": 4,
+        "borderTopRightRadius": 4,
+      },
+      Object {},
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(0, 0, 0, 0.26)",
+        "bottom": 0,
+        "height": 2,
+        "left": 0,
+        "position": "absolute",
+        "right": 0,
+        "transform": Array [
+          Object {
+            "scaleY": 0.5,
+          },
+        ],
+        "zIndex": 1,
+      }
+    }
+  />
+  <View
+    style={
+      Array [
+        Object {
+          "paddingBottom": 0,
+          "paddingTop": 0,
+        },
+        Object {
+          "minHeight": 64,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Object {
+          "bottom": 0,
+          "left": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+          "transform": Array [
+            Object {
+              "translateX": 3,
+            },
+          ],
+          "zIndex": 3,
+        }
+      }
+    >
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        onLayout={[Function]}
+        style={
+          Object {
+            "color": "#6200ee",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 12,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        style={
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 12,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+    </View>
+    <TextInput
+      allowFontScaling={true}
+      editable={true}
+      maxFontSizeMultiplier={1.5}
+      multiline={false}
+      onBlur={[Function]}
+      onChangeText={[Function]}
+      onFocus={[Function]}
+      placeholder=""
+      placeholderTextColor="rgba(0, 0, 0, 0.54)"
+      rejectResponderTermination={true}
+      selectionColor="#6200ee"
+      style={
+        Array [
+          Object {
+            "flexGrow": 1,
+            "margin": 0,
+          },
+          Object {
+            "paddingLeft": 12,
+            "paddingRight": 12,
+          },
+          Object {
+            "height": 64,
+          },
+          Object {
+            "paddingBottom": 4,
+            "paddingTop": 24,
+          },
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "textAlign": "left",
+            "textAlignVertical": "center",
+          },
+          false,
+          Array [
+            Object {},
+          ],
+        ]
+      }
+      testID="text-input-flat"
+      underlineColorAndroid="transparent"
+      value="Some test value"
+    />
+  </View>
+</View>
+`;
+
+exports[`correctly applies height to multiline Outline TextInput 1`] = `
+<View
+  style={Object {}}
+>
+  <View
+    pointerEvents="none"
+    style={
+      Array [
+        Object {
+          "bottom": 0,
+          "left": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 6,
+        },
+        Object {
+          "backgroundColor": "#f6f6f6",
+          "borderColor": "rgba(0, 0, 0, 0.54)",
+          "borderRadius": 4,
+          "borderWidth": 1,
+        },
+      ]
+    }
+    testID="text-input-outline"
+  />
+  <View>
+    <View
+      style={
+        Array [
+          Object {
+            "paddingBottom": 0,
+          },
+          Object {
+            "minHeight": 100,
+            "paddingTop": 8,
+          },
+        ]
+      }
+    >
+      <View
+        pointerEvents="none"
+        style={
+          Object {
+            "bottom": 0,
+            "left": 0,
+            "opacity": 0,
+            "position": "absolute",
+            "right": 0,
+            "top": 0,
+            "transform": Array [
+              Object {
+                "translateX": 3,
+              },
+            ],
+            "zIndex": 3,
+          }
+        }
+      >
+        <View
+          pointerEvents="none"
+          style={
+            Object {
+              "backgroundColor": "#f6f6f6",
+              "bottom": 4,
+              "left": 10,
+              "maxHeight": 2,
+              "opacity": 1,
+              "position": "absolute",
+              "right": 0,
+              "top": 6,
+              "transform": Array [
+                Object {
+                  "translateX": -3,
+                },
+              ],
+              "width": 12,
+            }
+          }
+        />
+        <Text
+          maxFontSizeMultiplier={1.5}
+          numberOfLines={1}
+          style={
+            Object {
+              "backgroundColor": "#f6f6f6",
+              "color": "transparent",
+              "fontFamily": "System",
+              "fontSize": 16,
+              "fontWeight": undefined,
+              "left": 18,
+              "maxWidth": -28,
+              "opacity": 1,
+              "paddingHorizontal": 0,
+              "position": "absolute",
+              "textAlign": "left",
+              "top": 59,
+              "transform": Array [
+                Object {
+                  "translateX": 0,
+                },
+                Object {
+                  "translateY": -52,
+                },
+                Object {
+                  "scale": 0.75,
+                },
+                Object {
+                  "scaleY": 0.2,
+                },
+              ],
+              "writingDirection": "ltr",
+            }
+          }
+        >
+          Outline Input
+        </Text>
+        <Text
+          maxFontSizeMultiplier={1.5}
+          numberOfLines={1}
+          onLayout={[Function]}
+          style={
+            Object {
+              "color": "#6200ee",
+              "fontFamily": "System",
+              "fontSize": 16,
+              "fontWeight": undefined,
+              "left": 0,
+              "opacity": 0,
+              "paddingHorizontal": 14,
+              "position": "absolute",
+              "textAlign": "left",
+              "top": 58,
+              "transform": Array [
+                Object {
+                  "translateX": 0,
+                },
+                Object {
+                  "translateY": -52,
+                },
+                Object {
+                  "scale": 0.75,
+                },
+              ],
+              "writingDirection": "ltr",
+            }
+          }
+        >
+          Outline Input
+        </Text>
+        <Text
+          maxFontSizeMultiplier={1.5}
+          numberOfLines={1}
+          style={
+            Object {
+              "color": "rgba(0, 0, 0, 0.54)",
+              "fontFamily": "System",
+              "fontSize": 16,
+              "fontWeight": undefined,
+              "left": 0,
+              "opacity": 0,
+              "paddingHorizontal": 14,
+              "position": "absolute",
+              "textAlign": "left",
+              "top": 58,
+              "transform": Array [
+                Object {
+                  "translateX": 0,
+                },
+                Object {
+                  "translateY": -52,
+                },
+                Object {
+                  "scale": 0.75,
+                },
+              ],
+              "writingDirection": "ltr",
+            }
+          }
+        >
+          Outline Input
+        </Text>
+      </View>
+      <TextInput
+        allowFontScaling={true}
+        editable={true}
+        maxFontSizeMultiplier={1.5}
+        multiline={true}
+        onBlur={[Function]}
+        onChangeText={[Function]}
+        onFocus={[Function]}
+        placeholder=""
+        placeholderTextColor="rgba(0, 0, 0, 0.54)"
+        rejectResponderTermination={true}
+        selectionColor="#6200ee"
+        style={
+          Array [
+            Object {
+              "flexGrow": 1,
+              "margin": 0,
+              "paddingHorizontal": 14,
+              "zIndex": 1,
+            },
+            Object {
+              "height": 100,
+            },
+            Object {
+              "paddingBottom": 24,
+              "paddingTop": 24,
+            },
+            Object {
+              "color": "#000000",
+              "fontFamily": "System",
+              "fontSize": 16,
+              "fontWeight": undefined,
+              "textAlign": "left",
+              "textAlignVertical": "top",
+            },
+            false,
+            Array [
+              Object {},
+            ],
+          ]
+        }
+        testID="text-input-outlined"
+        underlineColorAndroid="transparent"
+        value="Some test value"
+      />
+    </View>
+  </View>
+</View>
+`;
+
+exports[`correctly applies textAlign center 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "rgb(231, 231, 231)",
+        "borderTopLeftRadius": 4,
+        "borderTopRightRadius": 4,
+      },
+      Object {},
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(0, 0, 0, 0.26)",
+        "bottom": 0,
+        "height": 2,
+        "left": 0,
+        "position": "absolute",
+        "right": 0,
+        "transform": Array [
+          Object {
+            "scaleY": 0.5,
+          },
+        ],
+        "zIndex": 1,
+      }
+    }
+  />
+  <View
+    style={
+      Array [
+        Object {
+          "paddingBottom": 0,
+          "paddingTop": 0,
+        },
+        Object {
+          "minHeight": 64,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Object {
+          "bottom": 0,
+          "left": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+          "transform": Array [
+            Object {
+              "translateX": 3,
+            },
+          ],
+          "zIndex": 3,
+        }
+      }
+    >
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        onLayout={[Function]}
+        style={
+          Object {
+            "color": "#6200ee",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 12,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        style={
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 12,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+    </View>
+    <TextInput
+      allowFontScaling={true}
+      editable={true}
+      maxFontSizeMultiplier={1.5}
+      multiline={false}
+      onBlur={[Function]}
+      onChangeText={[Function]}
+      onFocus={[Function]}
+      placeholder=""
+      placeholderTextColor="rgba(0, 0, 0, 0.54)"
+      rejectResponderTermination={true}
+      selectionColor="#6200ee"
+      style={
+        Array [
+          Object {
+            "flexGrow": 1,
+            "margin": 0,
+          },
+          Object {
+            "paddingLeft": 12,
+            "paddingRight": 12,
+          },
+          Object {
+            "height": 64,
+          },
+          Object {
+            "paddingBottom": 4,
+            "paddingTop": 24,
+          },
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "textAlign": "center",
+            "textAlignVertical": "center",
+          },
+          false,
+          Array [
+            Object {},
+          ],
+        ]
+      }
+      testID="text-input-flat"
+      underlineColorAndroid="transparent"
+      value="Some test value"
+    />
+  </View>
+</View>
+`;
+
+exports[`correctly renders left-side icon adornment, and right-side affix adornment  1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "rgb(231, 231, 231)",
+        "borderTopLeftRadius": 4,
+        "borderTopRightRadius": 4,
+      },
+      Object {},
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(0, 0, 0, 0.26)",
+        "bottom": 0,
+        "height": 2,
+        "left": 0,
+        "position": "absolute",
+        "right": 0,
+        "transform": Array [
+          Object {
+            "scaleY": 0.5,
+          },
+        ],
+        "zIndex": 1,
+      }
+    }
+  />
+  <View
+    style={
+      Array [
+        Object {
+          "paddingBottom": 0,
+          "paddingTop": 0,
+        },
+        Object {
+          "minHeight": 64,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Object {
+          "bottom": 0,
+          "left": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+          "transform": Array [
+            Object {
+              "translateX": 3,
+            },
+          ],
+          "zIndex": 3,
+        }
+      }
+    >
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        onLayout={[Function]}
+        style={
+          Object {
+            "color": "#6200ee",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 44,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        style={
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 12,
+            "paddingRight": 44,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+    </View>
+    <TextInput
+      allowFontScaling={true}
+      editable={true}
+      maxFontSizeMultiplier={1.5}
+      multiline={false}
+      onBlur={[Function]}
+      onChangeText={[Function]}
+      onFocus={[Function]}
+      placeholder=""
+      placeholderTextColor="rgba(0, 0, 0, 0.54)"
+      rejectResponderTermination={true}
+      selectionColor="#6200ee"
+      style={
+        Array [
+          Object {
+            "flexGrow": 1,
+            "margin": 0,
+          },
+          Object {
+            "paddingLeft": 12,
+            "paddingRight": 44,
+          },
+          Object {
+            "height": 64,
+          },
+          Object {
+            "paddingBottom": 4,
+            "paddingTop": 24,
+          },
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "textAlign": "left",
+            "textAlignVertical": "center",
+          },
+          false,
+          Object {
+            "marginLeft": 0,
+            "marginRight": 36,
+            "paddingLeft": 36,
+            "paddingRight": 8,
+          },
+        ]
+      }
+      testID="text-input-flat"
+      underlineColorAndroid="transparent"
+      value="Some test value"
+    />
+  </View>
+  <View
+    onLayout={[Function]}
+    style={
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+        "left": 12,
+        "opacity": 1,
+        "position": "absolute",
+        "top": null,
+      }
+    }
+  >
+    <Text
+      maxFontSizeMultiplier={1.5}
+      style={
+        Array [
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+          },
+          Object {
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+          },
+          Object {
+            "color": "#f44336",
+          },
+        ]
+      }
+    >
+      /100
+    </Text>
+  </View>
+  <View
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "height": 24,
+          "justifyContent": "center",
+          "position": "absolute",
+          "width": 24,
+        },
+        Object {
+          "right": 12,
+          "top": 20,
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            undefined,
+            Object {
+              "margin": 0,
+            },
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+</View>
+`;
+
+exports[`correctly renders left-side icon adornment, and right-side affix adornment 1`] = `
+<View
+  style={
+    Array [
+      Object {
+        "backgroundColor": "rgb(231, 231, 231)",
+        "borderTopLeftRadius": 4,
+        "borderTopRightRadius": 4,
+      },
+      Object {},
+    ]
+  }
+>
+  <View
+    style={
+      Object {
+        "backgroundColor": "rgba(0, 0, 0, 0.26)",
+        "bottom": 0,
+        "height": 2,
+        "left": 0,
+        "position": "absolute",
+        "right": 0,
+        "transform": Array [
+          Object {
+            "scaleY": 0.5,
+          },
+        ],
+        "zIndex": 1,
+      }
+    }
+  />
+  <View
+    style={
+      Array [
+        Object {
+          "paddingBottom": 0,
+          "paddingTop": 0,
+        },
+        Object {
+          "minHeight": 64,
+        },
+      ]
+    }
+  >
+    <View
+      pointerEvents="none"
+      style={
+        Object {
+          "bottom": 0,
+          "left": 0,
+          "opacity": 0,
+          "position": "absolute",
+          "right": 0,
+          "top": 0,
+          "transform": Array [
+            Object {
+              "translateX": 11,
+            },
+          ],
+          "zIndex": 3,
+        }
+      }
+    >
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        onLayout={[Function]}
+        style={
+          Object {
+            "color": "#6200ee",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 44,
+            "paddingRight": 44,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+      <Text
+        maxFontSizeMultiplier={1.5}
+        numberOfLines={1}
+        style={
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "left": 0,
+            "opacity": 0,
+            "paddingLeft": 44,
+            "paddingRight": 44,
+            "position": "absolute",
+            "textAlign": "left",
+            "top": 34,
+            "transform": Array [
+              Object {
+                "translateX": 0,
+              },
+              Object {
+                "translateY": -16,
+              },
+              Object {
+                "scale": 0.75,
+              },
+            ],
+            "writingDirection": "ltr",
+          }
+        }
+      >
+        Flat input
+      </Text>
+    </View>
+    <TextInput
+      allowFontScaling={true}
+      editable={true}
+      maxFontSizeMultiplier={1.5}
+      multiline={false}
+      onBlur={[Function]}
+      onChangeText={[Function]}
+      onFocus={[Function]}
+      placeholder=""
+      placeholderTextColor="rgba(0, 0, 0, 0.54)"
+      rejectResponderTermination={true}
+      selectionColor="#6200ee"
+      style={
+        Array [
+          Object {
+            "flexGrow": 1,
+            "margin": 0,
+          },
+          Object {
+            "paddingLeft": 44,
+            "paddingRight": 44,
+          },
+          Object {
+            "height": 64,
+          },
+          Object {
+            "paddingBottom": 4,
+            "paddingTop": 24,
+          },
+          Object {
+            "color": "#000000",
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+            "textAlign": "left",
+            "textAlignVertical": "center",
+          },
+          false,
+          Object {
+            "marginLeft": 36,
+            "marginRight": 0,
+            "paddingLeft": 8,
+            "paddingRight": 36,
+          },
+        ]
+      }
+      testID="text-input-flat"
+      underlineColorAndroid="transparent"
+      value="Some test value"
+    />
+  </View>
+  <View
+    style={
+      Array [
+        Object {
+          "alignItems": "center",
+          "height": 24,
+          "justifyContent": "center",
+          "position": "absolute",
+          "width": 24,
+        },
+        Object {
+          "left": 12,
+          "top": 20,
+        },
+      ]
+    }
+  >
+    <View
+      accessibilityRole="button"
+      accessibilityState={
+        Object {
+          "disabled": undefined,
+        }
+      }
+      accessible={true}
+      focusable={true}
+      hitSlop={
+        Object {
+          "bottom": 6,
+          "left": 6,
+          "right": 6,
+          "top": 6,
+        }
+      }
+      onClick={[Function]}
+      onResponderGrant={[Function]}
+      onResponderMove={[Function]}
+      onResponderRelease={[Function]}
+      onResponderTerminate={[Function]}
+      onResponderTerminationRequest={[Function]}
+      onStartShouldSetResponder={[Function]}
+      style={
+        Array [
+          Object {
+            "overflow": "hidden",
+          },
+          Array [
+            Object {
+              "alignItems": "center",
+              "justifyContent": "center",
+              "margin": 6,
+              "overflow": "hidden",
+            },
+            Object {
+              "borderRadius": 18,
+              "height": 36,
+              "width": 36,
+            },
+            undefined,
+            Object {
+              "margin": 0,
+            },
+          ],
+        ]
+      }
+    >
+      <View>
+        <Text
+          accessibilityElementsHidden={true}
+          importantForAccessibility="no-hide-descendants"
+          pointerEvents="none"
+          selectable={false}
+          style={
+            Array [
+              Object {
+                "backgroundColor": "transparent",
+              },
+              Object {
+                "color": "#000000",
+                "fontSize": 24,
+              },
+            ]
+          }
+        >
+          □
+        </Text>
+      </View>
+    </View>
+  </View>
+  <View
+    onLayout={[Function]}
+    style={
+      Object {
+        "alignItems": "center",
+        "justifyContent": "center",
+        "opacity": 1,
+        "position": "absolute",
+        "right": 12,
+        "top": null,
+      }
+    }
+  >
+    <Text
+      maxFontSizeMultiplier={1.5}
+      style={
+        Array [
+          Object {
+            "color": "rgba(0, 0, 0, 0.54)",
+          },
+          Object {
+            "fontFamily": "System",
+            "fontSize": 16,
+            "fontWeight": undefined,
+          },
+          Object {
+            "color": "#f44336",
+          },
+        ]
+      }
+    >
+      /100
+    </Text>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ToggleButton.test.js.snap b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ToggleButton.test.js.snap
new file mode 100644
index 0000000..47f8048
--- /dev/null
+++ b/node_modules/react-native-paper/src/components/__tests__/__snapshots__/ToggleButton.test.js.snap
@@ -0,0 +1,254 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`renders disabled toggle button 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": true,
+      "selected": true,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        Object {
+          "opacity": 0.32,
+        },
+        Array [
+          Object {
+            "height": 42,
+            "margin": 0,
+            "width": 42,
+          },
+          Object {
+            "backgroundColor": "rgba(0, 0, 0, .08)",
+            "borderColor": "rgba(0, 0, 0, 0.29)",
+            "borderRadius": 4,
+          },
+          undefined,
+        ],
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders toggle button 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": undefined,
+      "selected": true,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        undefined,
+        Array [
+          Object {
+            "height": 42,
+            "margin": 0,
+            "width": 42,
+          },
+          Object {
+            "backgroundColor": "rgba(0, 0, 0, .08)",
+            "borderColor": "rgba(0, 0, 0, 0.29)",
+            "borderRadius": 4,
+          },
+          undefined,
+        ],
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
+
+exports[`renders unchecked toggle button 1`] = `
+<View
+  accessibilityRole="button"
+  accessibilityState={
+    Object {
+      "disabled": true,
+      "selected": false,
+    }
+  }
+  accessible={true}
+  focusable={true}
+  hitSlop={
+    Object {
+      "bottom": 6,
+      "left": 6,
+      "right": 6,
+      "top": 6,
+    }
+  }
+  onClick={[Function]}
+  onResponderGrant={[Function]}
+  onResponderMove={[Function]}
+  onResponderRelease={[Function]}
+  onResponderTerminate={[Function]}
+  onResponderTerminationRequest={[Function]}
+  onStartShouldSetResponder={[Function]}
+  style={
+    Array [
+      false,
+      Array [
+        Object {
+          "alignItems": "center",
+          "justifyContent": "center",
+          "margin": 6,
+          "overflow": "hidden",
+        },
+        Object {
+          "borderRadius": 18,
+          "height": 36,
+          "width": 36,
+        },
+        Object {
+          "opacity": 0.32,
+        },
+        Array [
+          Object {
+            "height": 42,
+            "margin": 0,
+            "width": 42,
+          },
+          Object {
+            "backgroundColor": "transparent",
+            "borderColor": "rgba(0, 0, 0, 0.29)",
+            "borderRadius": 4,
+          },
+          undefined,
+        ],
+      ],
+    ]
+  }
+>
+  <View>
+    <Text
+      accessibilityElementsHidden={true}
+      importantForAccessibility="no-hide-descendants"
+      pointerEvents="none"
+      selectable={false}
+      style={
+        Array [
+          Object {
+            "backgroundColor": "transparent",
+          },
+          Object {
+            "color": "#000000",
+            "fontSize": 24,
+          },
+        ]
+      }
+    >
+      □
+    </Text>
+  </View>
+</View>
+`;
diff --git a/node_modules/react-native-paper/src/core/__tests__/Provider.test.js b/node_modules/react-native-paper/src/core/__tests__/Provider.test.js
new file mode 100644
index 0000000..03f2137
--- /dev/null
+++ b/node_modules/react-native-paper/src/core/__tests__/Provider.test.js
@@ -0,0 +1,180 @@
+import * as React from 'react';
+import { Appearance, AccessibilityInfo, View } from 'react-native';
+import { render, act } from 'react-native-testing-library';
+import Provider from '../Provider';
+import { useTheme } from '../theming';
+import DarkTheme from '../../styles/DarkTheme';
+import DefaultTheme from '../../styles/DefaultTheme';
+
+const mockAppearance = () => {
+  jest.mock('react-native/Libraries/Utilities/Appearance', () => {
+    const realApp = jest.requireActual(
+      'react-native/Libraries/Utilities/Appearance'
+    );
+    const listeners = [];
+    return {
+      ...realApp,
+      addChangeListener: jest.fn((cb) => {
+        listeners.push(cb);
+      }),
+      removeChangeListener: jest.fn((cb) => {
+        listeners.push(cb);
+      }),
+      getColorScheme: jest.fn(() => {
+        return 'light';
+      }),
+      __internalListeners: listeners,
+    };
+  });
+};
+
+const mockAccessibilityInfo = () => {
+  jest.mock(
+    'react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo',
+    () => {
+      const realApp = jest.requireActual(
+        'react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo'
+      );
+
+      const listeners = [];
+      return {
+        realApp,
+        addEventListener: jest.fn((event, cb) => {
+          listeners.push(cb);
+        }),
+        removeEventListener: jest.fn((cb) => {
+          listeners.push(cb);
+        }),
+        __internalListeners: listeners,
+      };
+    }
+  );
+};
+
+const FakeChild = () => {
+  const theme = useTheme();
+  return <View testID="provider-child-view" theme={theme} />;
+};
+
+const createProvider = (theme) => {
+  return (
+    <Provider theme={theme}>
+      <FakeChild />
+    </Provider>
+  );
+};
+
+describe('Provider', () => {
+  beforeEach(() => {
+    jest.resetModules();
+  });
+
+  it('handles theme change', async () => {
+    mockAppearance();
+    const { getByTestId } = render(createProvider(null));
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      DefaultTheme
+    );
+    act(() => Appearance.__internalListeners[0]({ colorScheme: 'dark' }));
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      DarkTheme
+    );
+  });
+
+  it('should set AccessibilityInfo listeners, if there is no theme', async () => {
+    mockAppearance();
+    mockAccessibilityInfo();
+
+    const { rerender, getByTestId } = render(createProvider(null));
+
+    expect(AccessibilityInfo.addEventListener).toHaveBeenCalled();
+    act(() =>
+      AccessibilityInfo.__internalListeners[0]({
+        reduceMotionEnabled: true,
+      })
+    );
+
+    expect(
+      getByTestId('provider-child-view').props.theme.animation.scale
+    ).toStrictEqual(0);
+
+    rerender(createProvider(DefaultTheme));
+    expect(AccessibilityInfo.removeEventListener).toHaveBeenCalled();
+  });
+
+  it('should not set AccessibilityInfo listeners, if there is a theme', async () => {
+    mockAppearance();
+    const { getByTestId } = render(createProvider(DarkTheme));
+
+    expect(AccessibilityInfo.addEventListener).not.toHaveBeenCalled();
+    expect(AccessibilityInfo.removeEventListener).not.toHaveBeenCalled();
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      DarkTheme
+    );
+  });
+
+  it('should set Appearance listeners, if there is no theme', async () => {
+    mockAppearance();
+    const { getByTestId } = render(createProvider(null));
+
+    expect(Appearance.addChangeListener).toHaveBeenCalled();
+    act(() => Appearance.__internalListeners[0]({ colorScheme: 'dark' }));
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      DarkTheme
+    );
+  });
+
+  it('should not set Appearance listeners, if the theme is passed', async () => {
+    mockAppearance();
+    const { getByTestId } = render(createProvider(DefaultTheme));
+
+    expect(Appearance.addChangeListener).not.toHaveBeenCalled();
+    expect(Appearance.removeChangeListener).not.toHaveBeenCalled();
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      DefaultTheme
+    );
+  });
+
+  it('uses default theme, if Appearance module is not defined', async () => {
+    jest.mock('react-native/Libraries/Utilities/Appearance', () => {
+      return null;
+    });
+    const { getByTestId } = render(createProvider(null));
+    expect(Appearance).toEqual(null);
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      DefaultTheme
+    );
+  });
+
+  it.each`
+    label              | theme           | colorScheme
+    ${'default theme'} | ${DefaultTheme} | ${'light'}
+    ${'dark theme'}    | ${DarkTheme}    | ${'dark'}
+  `(
+    'provides $label for $colorScheme color scheme',
+    async ({ theme, colorScheme }) => {
+      mockAppearance();
+      Appearance.getColorScheme.mockReturnValue(colorScheme);
+      const { getByTestId } = render(createProvider());
+      expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+        theme
+      );
+    }
+  );
+
+  it('uses provided custom theme', async () => {
+    mockAppearance();
+    const customTheme = {
+      ...DefaultTheme,
+      colors: {
+        ...DefaultTheme.colors,
+        primary: 'tomato',
+        accent: 'yellow',
+      },
+    };
+    const { getByTestId } = render(createProvider(customTheme));
+    expect(getByTestId('provider-child-view').props.theme).toStrictEqual(
+      customTheme
+    );
+  });
+});
diff --git a/node_modules/react-native-paper/src/utils/__tests__/addEventListener.js b/node_modules/react-native-paper/src/utils/__tests__/addEventListener.js
new file mode 100644
index 0000000..a8a9f5e
--- /dev/null
+++ b/node_modules/react-native-paper/src/utils/__tests__/addEventListener.js
@@ -0,0 +1,61 @@
+import { BackHandler, Keyboard } from 'react-native';
+import { addEventListener, addListener } from '../addEventListener';
+
+const mockModule = jest.fn();
+const handler = jest.fn();
+
+describe('addEventListener', () => {
+  beforeEach(() => {
+    jest.clearAllMocks();
+  });
+
+  it('assigns subscription', () => {
+    BackHandler.addEventListener = mockModule;
+    addEventListener(BackHandler, 'hardwareBackPress', handler);
+    expect(BackHandler.addEventListener).toHaveBeenCalledWith(
+      'hardwareBackPress',
+      handler
+    );
+  });
+
+  it('removes subscription', () => {
+    const subscription = addEventListener(
+      BackHandler,
+      'hardwareBackPress',
+      handler
+    );
+    BackHandler.removeEventListener = mockModule;
+    subscription.remove();
+
+    expect(BackHandler.removeEventListener).toHaveBeenCalledWith(
+      'hardwareBackPress',
+      handler
+    );
+  });
+});
+
+describe('addListener', () => {
+  beforeEach(() => {
+    jest.clearAllMocks();
+  });
+
+  it('assigns subscription', () => {
+    Keyboard.addListener = mockModule;
+    addListener(Keyboard, 'keyboardWillShow', handler);
+    expect(Keyboard.addListener).toHaveBeenCalledWith(
+      'keyboardWillShow',
+      handler
+    );
+  });
+
+  it('removes subscription', () => {
+    const subscription = addListener(Keyboard, 'keyboardWillShow', handler);
+    Keyboard.removeEventListener = mockModule;
+    subscription.remove();
+
+    expect(Keyboard.removeEventListener).toHaveBeenCalledWith(
+      'keyboardWillShow',
+      handler
+    );
+  });
+});
